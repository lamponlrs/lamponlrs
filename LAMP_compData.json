{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contract-4ca17ba025.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\ncontract LAMP is ERC20, ERC20Permit {\\n    constructor() ERC20(\\\"LAMP\\\", \\\"LMP\\\") ERC20Permit(\\\"LAMP\\\") {\\n        _mint(msg.sender, 25000000000 * 10 ** decimals());\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":true,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[],\"evmVersion\":\"paris\"}}",
	"name": "LAMP",
	"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contract-4ca17ba025.sol\":\"LAMP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contract-4ca17ba025.sol\":{\"keccak256\":\"0x120afff0e68617ca7104059bd63f3b125c570ba4bb080c54cd945808bc62564d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3751683a1d353b48e828e6be8d19ceda0a65a977a8704000cd16ab19b859e01c\",\"dweb:/ipfs/QmV4xGHUUBQcaaGypFuvYSZpeK6HkuDD8NHC6nMTD2kXgM\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_2095": {
				"entryPoint": null,
				"id": 2095,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_213": {
				"entryPoint": null,
				"id": 213,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_3488": {
				"entryPoint": null,
				"id": 3488,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_803": {
				"entryPoint": null,
				"id": 803,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2142": {
				"entryPoint": null,
				"id": 2142,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_mint_516": {
				"entryPoint": 433,
				"id": 516,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_update_483": {
				"entryPoint": 558,
				"id": 483,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@decimals_240": {
				"entryPoint": null,
				"id": 240,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@getStringSlot_1372": {
				"entryPoint": null,
				"id": 1372,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toShortStringWithFallback_1226": {
				"entryPoint": 382,
				"id": 1226,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toShortString_1128": {
				"entryPoint": 496,
				"id": 1128,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 1503,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_dataslot_string_storage": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 1618,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_helper": {
				"entryPoint": 1230,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"checked_exp_t_uint256_t_uint8": {
				"entryPoint": 1458,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_unsigned": {
				"entryPoint": 1297,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 1480,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_string_storage": {
				"entryPoint": 936,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
				"entryPoint": 1582,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 1017,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 878,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 1208,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 856,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:6624:18",
					"nodeType": "YulBlock",
					"src": "0:6624:18",
					"statements": [
						{
							"nativeSrc": "6:3:18",
							"nodeType": "YulBlock",
							"src": "6:3:18",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "46:95:18",
								"nodeType": "YulBlock",
								"src": "46:95:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "63:1:18",
													"nodeType": "YulLiteral",
													"src": "63:1:18",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "70:3:18",
															"nodeType": "YulLiteral",
															"src": "70:3:18",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "75:10:18",
															"nodeType": "YulLiteral",
															"src": "75:10:18",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "66:3:18",
														"nodeType": "YulIdentifier",
														"src": "66:3:18"
													},
													"nativeSrc": "66:20:18",
													"nodeType": "YulFunctionCall",
													"src": "66:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "56:6:18",
												"nodeType": "YulIdentifier",
												"src": "56:6:18"
											},
											"nativeSrc": "56:31:18",
											"nodeType": "YulFunctionCall",
											"src": "56:31:18"
										},
										"nativeSrc": "56:31:18",
										"nodeType": "YulExpressionStatement",
										"src": "56:31:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "103:1:18",
													"nodeType": "YulLiteral",
													"src": "103:1:18",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "106:4:18",
													"nodeType": "YulLiteral",
													"src": "106:4:18",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "96:6:18",
												"nodeType": "YulIdentifier",
												"src": "96:6:18"
											},
											"nativeSrc": "96:15:18",
											"nodeType": "YulFunctionCall",
											"src": "96:15:18"
										},
										"nativeSrc": "96:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "96:15:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "127:1:18",
													"nodeType": "YulLiteral",
													"src": "127:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "130:4:18",
													"nodeType": "YulLiteral",
													"src": "130:4:18",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "120:6:18",
												"nodeType": "YulIdentifier",
												"src": "120:6:18"
											},
											"nativeSrc": "120:15:18",
											"nodeType": "YulFunctionCall",
											"src": "120:15:18"
										},
										"nativeSrc": "120:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "120:15:18"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "14:127:18",
							"nodeType": "YulFunctionDefinition",
							"src": "14:127:18"
						},
						{
							"body": {
								"nativeSrc": "201:325:18",
								"nodeType": "YulBlock",
								"src": "201:325:18",
								"statements": [
									{
										"nativeSrc": "211:22:18",
										"nodeType": "YulAssignment",
										"src": "211:22:18",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "225:1:18",
													"nodeType": "YulLiteral",
													"src": "225:1:18",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "228:4:18",
													"nodeType": "YulIdentifier",
													"src": "228:4:18"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "221:3:18",
												"nodeType": "YulIdentifier",
												"src": "221:3:18"
											},
											"nativeSrc": "221:12:18",
											"nodeType": "YulFunctionCall",
											"src": "221:12:18"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "211:6:18",
												"nodeType": "YulIdentifier",
												"src": "211:6:18"
											}
										]
									},
									{
										"nativeSrc": "242:38:18",
										"nodeType": "YulVariableDeclaration",
										"src": "242:38:18",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "272:4:18",
													"nodeType": "YulIdentifier",
													"src": "272:4:18"
												},
												{
													"kind": "number",
													"nativeSrc": "278:1:18",
													"nodeType": "YulLiteral",
													"src": "278:1:18",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "268:3:18",
												"nodeType": "YulIdentifier",
												"src": "268:3:18"
											},
											"nativeSrc": "268:12:18",
											"nodeType": "YulFunctionCall",
											"src": "268:12:18"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "246:18:18",
												"nodeType": "YulTypedName",
												"src": "246:18:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "319:31:18",
											"nodeType": "YulBlock",
											"src": "319:31:18",
											"statements": [
												{
													"nativeSrc": "321:27:18",
													"nodeType": "YulAssignment",
													"src": "321:27:18",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "335:6:18",
																"nodeType": "YulIdentifier",
																"src": "335:6:18"
															},
															{
																"kind": "number",
																"nativeSrc": "343:4:18",
																"nodeType": "YulLiteral",
																"src": "343:4:18",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "331:3:18",
															"nodeType": "YulIdentifier",
															"src": "331:3:18"
														},
														"nativeSrc": "331:17:18",
														"nodeType": "YulFunctionCall",
														"src": "331:17:18"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "321:6:18",
															"nodeType": "YulIdentifier",
															"src": "321:6:18"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "299:18:18",
													"nodeType": "YulIdentifier",
													"src": "299:18:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "292:6:18",
												"nodeType": "YulIdentifier",
												"src": "292:6:18"
											},
											"nativeSrc": "292:26:18",
											"nodeType": "YulFunctionCall",
											"src": "292:26:18"
										},
										"nativeSrc": "289:61:18",
										"nodeType": "YulIf",
										"src": "289:61:18"
									},
									{
										"body": {
											"nativeSrc": "409:111:18",
											"nodeType": "YulBlock",
											"src": "409:111:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "430:1:18",
																"nodeType": "YulLiteral",
																"src": "430:1:18",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "437:3:18",
																		"nodeType": "YulLiteral",
																		"src": "437:3:18",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "442:10:18",
																		"nodeType": "YulLiteral",
																		"src": "442:10:18",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "433:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "433:3:18"
																},
																"nativeSrc": "433:20:18",
																"nodeType": "YulFunctionCall",
																"src": "433:20:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "423:6:18",
															"nodeType": "YulIdentifier",
															"src": "423:6:18"
														},
														"nativeSrc": "423:31:18",
														"nodeType": "YulFunctionCall",
														"src": "423:31:18"
													},
													"nativeSrc": "423:31:18",
													"nodeType": "YulExpressionStatement",
													"src": "423:31:18"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "474:1:18",
																"nodeType": "YulLiteral",
																"src": "474:1:18",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "477:4:18",
																"nodeType": "YulLiteral",
																"src": "477:4:18",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "467:6:18",
															"nodeType": "YulIdentifier",
															"src": "467:6:18"
														},
														"nativeSrc": "467:15:18",
														"nodeType": "YulFunctionCall",
														"src": "467:15:18"
													},
													"nativeSrc": "467:15:18",
													"nodeType": "YulExpressionStatement",
													"src": "467:15:18"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "502:1:18",
																"nodeType": "YulLiteral",
																"src": "502:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "505:4:18",
																"nodeType": "YulLiteral",
																"src": "505:4:18",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "495:6:18",
															"nodeType": "YulIdentifier",
															"src": "495:6:18"
														},
														"nativeSrc": "495:15:18",
														"nodeType": "YulFunctionCall",
														"src": "495:15:18"
													},
													"nativeSrc": "495:15:18",
													"nodeType": "YulExpressionStatement",
													"src": "495:15:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "365:18:18",
													"nodeType": "YulIdentifier",
													"src": "365:18:18"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "388:6:18",
															"nodeType": "YulIdentifier",
															"src": "388:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "396:2:18",
															"nodeType": "YulLiteral",
															"src": "396:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "385:2:18",
														"nodeType": "YulIdentifier",
														"src": "385:2:18"
													},
													"nativeSrc": "385:14:18",
													"nodeType": "YulFunctionCall",
													"src": "385:14:18"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "362:2:18",
												"nodeType": "YulIdentifier",
												"src": "362:2:18"
											},
											"nativeSrc": "362:38:18",
											"nodeType": "YulFunctionCall",
											"src": "362:38:18"
										},
										"nativeSrc": "359:161:18",
										"nodeType": "YulIf",
										"src": "359:161:18"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "146:380:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "181:4:18",
									"nodeType": "YulTypedName",
									"src": "181:4:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "190:6:18",
									"nodeType": "YulTypedName",
									"src": "190:6:18",
									"type": ""
								}
							],
							"src": "146:380:18"
						},
						{
							"body": {
								"nativeSrc": "587:65:18",
								"nodeType": "YulBlock",
								"src": "587:65:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "604:1:18",
													"nodeType": "YulLiteral",
													"src": "604:1:18",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "607:3:18",
													"nodeType": "YulIdentifier",
													"src": "607:3:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "597:6:18",
												"nodeType": "YulIdentifier",
												"src": "597:6:18"
											},
											"nativeSrc": "597:14:18",
											"nodeType": "YulFunctionCall",
											"src": "597:14:18"
										},
										"nativeSrc": "597:14:18",
										"nodeType": "YulExpressionStatement",
										"src": "597:14:18"
									},
									{
										"nativeSrc": "620:26:18",
										"nodeType": "YulAssignment",
										"src": "620:26:18",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "638:1:18",
													"nodeType": "YulLiteral",
													"src": "638:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "641:4:18",
													"nodeType": "YulLiteral",
													"src": "641:4:18",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "628:9:18",
												"nodeType": "YulIdentifier",
												"src": "628:9:18"
											},
											"nativeSrc": "628:18:18",
											"nodeType": "YulFunctionCall",
											"src": "628:18:18"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "620:4:18",
												"nodeType": "YulIdentifier",
												"src": "620:4:18"
											}
										]
									}
								]
							},
							"name": "array_dataslot_string_storage",
							"nativeSrc": "531:121:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "570:3:18",
									"nodeType": "YulTypedName",
									"src": "570:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "578:4:18",
									"nodeType": "YulTypedName",
									"src": "578:4:18",
									"type": ""
								}
							],
							"src": "531:121:18"
						},
						{
							"body": {
								"nativeSrc": "738:462:18",
								"nodeType": "YulBlock",
								"src": "738:462:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "771:423:18",
											"nodeType": "YulBlock",
											"src": "771:423:18",
											"statements": [
												{
													"nativeSrc": "785:11:18",
													"nodeType": "YulVariableDeclaration",
													"src": "785:11:18",
													"value": {
														"kind": "number",
														"nativeSrc": "795:1:18",
														"nodeType": "YulLiteral",
														"src": "795:1:18",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "_1",
															"nativeSrc": "789:2:18",
															"nodeType": "YulTypedName",
															"src": "789:2:18",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "816:1:18",
																"nodeType": "YulLiteral",
																"src": "816:1:18",
																"type": "",
																"value": "0"
															},
															{
																"name": "array",
																"nativeSrc": "819:5:18",
																"nodeType": "YulIdentifier",
																"src": "819:5:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "809:6:18",
															"nodeType": "YulIdentifier",
															"src": "809:6:18"
														},
														"nativeSrc": "809:16:18",
														"nodeType": "YulFunctionCall",
														"src": "809:16:18"
													},
													"nativeSrc": "809:16:18",
													"nodeType": "YulExpressionStatement",
													"src": "809:16:18"
												},
												{
													"nativeSrc": "838:30:18",
													"nodeType": "YulVariableDeclaration",
													"src": "838:30:18",
													"value": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "860:1:18",
																"nodeType": "YulLiteral",
																"src": "860:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "863:4:18",
																"nodeType": "YulLiteral",
																"src": "863:4:18",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "keccak256",
															"nativeSrc": "850:9:18",
															"nodeType": "YulIdentifier",
															"src": "850:9:18"
														},
														"nativeSrc": "850:18:18",
														"nodeType": "YulFunctionCall",
														"src": "850:18:18"
													},
													"variables": [
														{
															"name": "data",
															"nativeSrc": "842:4:18",
															"nodeType": "YulTypedName",
															"src": "842:4:18",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "881:57:18",
													"nodeType": "YulVariableDeclaration",
													"src": "881:57:18",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "904:4:18",
																"nodeType": "YulIdentifier",
																"src": "904:4:18"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "914:1:18",
																		"nodeType": "YulLiteral",
																		"src": "914:1:18",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "startIndex",
																				"nativeSrc": "921:10:18",
																				"nodeType": "YulIdentifier",
																				"src": "921:10:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "933:2:18",
																				"nodeType": "YulLiteral",
																				"src": "933:2:18",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "917:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "917:3:18"
																		},
																		"nativeSrc": "917:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "917:19:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "910:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "910:3:18"
																},
																"nativeSrc": "910:27:18",
																"nodeType": "YulFunctionCall",
																"src": "910:27:18"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "900:3:18",
															"nodeType": "YulIdentifier",
															"src": "900:3:18"
														},
														"nativeSrc": "900:38:18",
														"nodeType": "YulFunctionCall",
														"src": "900:38:18"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "885:11:18",
															"nodeType": "YulTypedName",
															"src": "885:11:18",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "975:23:18",
														"nodeType": "YulBlock",
														"src": "975:23:18",
														"statements": [
															{
																"nativeSrc": "977:19:18",
																"nodeType": "YulAssignment",
																"src": "977:19:18",
																"value": {
																	"name": "data",
																	"nativeSrc": "992:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "992:4:18"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "977:11:18",
																		"nodeType": "YulIdentifier",
																		"src": "977:11:18"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "957:10:18",
																"nodeType": "YulIdentifier",
																"src": "957:10:18"
															},
															{
																"kind": "number",
																"nativeSrc": "969:4:18",
																"nodeType": "YulLiteral",
																"src": "969:4:18",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "954:2:18",
															"nodeType": "YulIdentifier",
															"src": "954:2:18"
														},
														"nativeSrc": "954:20:18",
														"nodeType": "YulFunctionCall",
														"src": "954:20:18"
													},
													"nativeSrc": "951:47:18",
													"nodeType": "YulIf",
													"src": "951:47:18"
												},
												{
													"nativeSrc": "1011:41:18",
													"nodeType": "YulVariableDeclaration",
													"src": "1011:41:18",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "1025:4:18",
																"nodeType": "YulIdentifier",
																"src": "1025:4:18"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1035:1:18",
																		"nodeType": "YulLiteral",
																		"src": "1035:1:18",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "1042:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "1042:3:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1047:2:18",
																				"nodeType": "YulLiteral",
																				"src": "1047:2:18",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1038:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1038:3:18"
																		},
																		"nativeSrc": "1038:12:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1038:12:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "1031:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "1031:3:18"
																},
																"nativeSrc": "1031:20:18",
																"nodeType": "YulFunctionCall",
																"src": "1031:20:18"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "1021:3:18",
															"nodeType": "YulIdentifier",
															"src": "1021:3:18"
														},
														"nativeSrc": "1021:31:18",
														"nodeType": "YulFunctionCall",
														"src": "1021:31:18"
													},
													"variables": [
														{
															"name": "_2",
															"nativeSrc": "1015:2:18",
															"nodeType": "YulTypedName",
															"src": "1015:2:18",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "1065:24:18",
													"nodeType": "YulVariableDeclaration",
													"src": "1065:24:18",
													"value": {
														"name": "deleteStart",
														"nativeSrc": "1078:11:18",
														"nodeType": "YulIdentifier",
														"src": "1078:11:18"
													},
													"variables": [
														{
															"name": "start",
															"nativeSrc": "1069:5:18",
															"nodeType": "YulTypedName",
															"src": "1069:5:18",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "1163:21:18",
														"nodeType": "YulBlock",
														"src": "1163:21:18",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "1172:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "1172:5:18"
																		},
																		{
																			"name": "_1",
																			"nativeSrc": "1179:2:18",
																			"nodeType": "YulIdentifier",
																			"src": "1179:2:18"
																		}
																	],
																	"functionName": {
																		"name": "sstore",
																		"nativeSrc": "1165:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "1165:6:18"
																	},
																	"nativeSrc": "1165:17:18",
																	"nodeType": "YulFunctionCall",
																	"src": "1165:17:18"
																},
																"nativeSrc": "1165:17:18",
																"nodeType": "YulExpressionStatement",
																"src": "1165:17:18"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "1113:5:18",
																"nodeType": "YulIdentifier",
																"src": "1113:5:18"
															},
															{
																"name": "_2",
																"nativeSrc": "1120:2:18",
																"nodeType": "YulIdentifier",
																"src": "1120:2:18"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "1110:2:18",
															"nodeType": "YulIdentifier",
															"src": "1110:2:18"
														},
														"nativeSrc": "1110:13:18",
														"nodeType": "YulFunctionCall",
														"src": "1110:13:18"
													},
													"nativeSrc": "1102:82:18",
													"nodeType": "YulForLoop",
													"post": {
														"nativeSrc": "1124:26:18",
														"nodeType": "YulBlock",
														"src": "1124:26:18",
														"statements": [
															{
																"nativeSrc": "1126:22:18",
																"nodeType": "YulAssignment",
																"src": "1126:22:18",
																"value": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "1139:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "1139:5:18"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "1146:1:18",
																			"nodeType": "YulLiteral",
																			"src": "1146:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "1135:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "1135:3:18"
																	},
																	"nativeSrc": "1135:13:18",
																	"nodeType": "YulFunctionCall",
																	"src": "1135:13:18"
																},
																"variableNames": [
																	{
																		"name": "start",
																		"nativeSrc": "1126:5:18",
																		"nodeType": "YulIdentifier",
																		"src": "1126:5:18"
																	}
																]
															}
														]
													},
													"pre": {
														"nativeSrc": "1106:3:18",
														"nodeType": "YulBlock",
														"src": "1106:3:18",
														"statements": []
													},
													"src": "1102:82:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "754:3:18",
													"nodeType": "YulIdentifier",
													"src": "754:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "759:2:18",
													"nodeType": "YulLiteral",
													"src": "759:2:18",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "751:2:18",
												"nodeType": "YulIdentifier",
												"src": "751:2:18"
											},
											"nativeSrc": "751:11:18",
											"nodeType": "YulFunctionCall",
											"src": "751:11:18"
										},
										"nativeSrc": "748:446:18",
										"nodeType": "YulIf",
										"src": "748:446:18"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_string_storage",
							"nativeSrc": "657:543:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "710:5:18",
									"nodeType": "YulTypedName",
									"src": "710:5:18",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "717:3:18",
									"nodeType": "YulTypedName",
									"src": "717:3:18",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "722:10:18",
									"nodeType": "YulTypedName",
									"src": "722:10:18",
									"type": ""
								}
							],
							"src": "657:543:18"
						},
						{
							"body": {
								"nativeSrc": "1290:81:18",
								"nodeType": "YulBlock",
								"src": "1290:81:18",
								"statements": [
									{
										"nativeSrc": "1300:65:18",
										"nodeType": "YulAssignment",
										"src": "1300:65:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "data",
															"nativeSrc": "1315:4:18",
															"nodeType": "YulIdentifier",
															"src": "1315:4:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1333:1:18",
																					"nodeType": "YulLiteral",
																					"src": "1333:1:18",
																					"type": "",
																					"value": "3"
																				},
																				{
																					"name": "len",
																					"nativeSrc": "1336:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "1336:3:18"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "1329:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "1329:3:18"
																			},
																			"nativeSrc": "1329:11:18",
																			"nodeType": "YulFunctionCall",
																			"src": "1329:11:18"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1346:1:18",
																					"nodeType": "YulLiteral",
																					"src": "1346:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nativeSrc": "1342:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "1342:3:18"
																			},
																			"nativeSrc": "1342:6:18",
																			"nodeType": "YulFunctionCall",
																			"src": "1342:6:18"
																		}
																	],
																	"functionName": {
																		"name": "shr",
																		"nativeSrc": "1325:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "1325:3:18"
																	},
																	"nativeSrc": "1325:24:18",
																	"nodeType": "YulFunctionCall",
																	"src": "1325:24:18"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "1321:3:18",
																"nodeType": "YulIdentifier",
																"src": "1321:3:18"
															},
															"nativeSrc": "1321:29:18",
															"nodeType": "YulFunctionCall",
															"src": "1321:29:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1311:3:18",
														"nodeType": "YulIdentifier",
														"src": "1311:3:18"
													},
													"nativeSrc": "1311:40:18",
													"nodeType": "YulFunctionCall",
													"src": "1311:40:18"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "1357:1:18",
															"nodeType": "YulLiteral",
															"src": "1357:1:18",
															"type": "",
															"value": "1"
														},
														{
															"name": "len",
															"nativeSrc": "1360:3:18",
															"nodeType": "YulIdentifier",
															"src": "1360:3:18"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "1353:3:18",
														"nodeType": "YulIdentifier",
														"src": "1353:3:18"
													},
													"nativeSrc": "1353:11:18",
													"nodeType": "YulFunctionCall",
													"src": "1353:11:18"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "1308:2:18",
												"nodeType": "YulIdentifier",
												"src": "1308:2:18"
											},
											"nativeSrc": "1308:57:18",
											"nodeType": "YulFunctionCall",
											"src": "1308:57:18"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "1300:4:18",
												"nodeType": "YulIdentifier",
												"src": "1300:4:18"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "1205:166:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "1267:4:18",
									"nodeType": "YulTypedName",
									"src": "1267:4:18",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "1273:3:18",
									"nodeType": "YulTypedName",
									"src": "1273:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "1281:4:18",
									"nodeType": "YulTypedName",
									"src": "1281:4:18",
									"type": ""
								}
							],
							"src": "1205:166:18"
						},
						{
							"body": {
								"nativeSrc": "1472:1249:18",
								"nodeType": "YulBlock",
								"src": "1472:1249:18",
								"statements": [
									{
										"nativeSrc": "1482:24:18",
										"nodeType": "YulVariableDeclaration",
										"src": "1482:24:18",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "1502:3:18",
													"nodeType": "YulIdentifier",
													"src": "1502:3:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1496:5:18",
												"nodeType": "YulIdentifier",
												"src": "1496:5:18"
											},
											"nativeSrc": "1496:10:18",
											"nodeType": "YulFunctionCall",
											"src": "1496:10:18"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "1486:6:18",
												"nodeType": "YulTypedName",
												"src": "1486:6:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "1549:22:18",
											"nodeType": "YulBlock",
											"src": "1549:22:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "1551:16:18",
															"nodeType": "YulIdentifier",
															"src": "1551:16:18"
														},
														"nativeSrc": "1551:18:18",
														"nodeType": "YulFunctionCall",
														"src": "1551:18:18"
													},
													"nativeSrc": "1551:18:18",
													"nodeType": "YulExpressionStatement",
													"src": "1551:18:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "1521:6:18",
													"nodeType": "YulIdentifier",
													"src": "1521:6:18"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "1537:2:18",
																	"nodeType": "YulLiteral",
																	"src": "1537:2:18",
																	"type": "",
																	"value": "64"
																},
																{
																	"kind": "number",
																	"nativeSrc": "1541:1:18",
																	"nodeType": "YulLiteral",
																	"src": "1541:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "1533:3:18",
																"nodeType": "YulIdentifier",
																"src": "1533:3:18"
															},
															"nativeSrc": "1533:10:18",
															"nodeType": "YulFunctionCall",
															"src": "1533:10:18"
														},
														{
															"kind": "number",
															"nativeSrc": "1545:1:18",
															"nodeType": "YulLiteral",
															"src": "1545:1:18",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1529:3:18",
														"nodeType": "YulIdentifier",
														"src": "1529:3:18"
													},
													"nativeSrc": "1529:18:18",
													"nodeType": "YulFunctionCall",
													"src": "1529:18:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "1518:2:18",
												"nodeType": "YulIdentifier",
												"src": "1518:2:18"
											},
											"nativeSrc": "1518:30:18",
											"nodeType": "YulFunctionCall",
											"src": "1518:30:18"
										},
										"nativeSrc": "1515:56:18",
										"nodeType": "YulIf",
										"src": "1515:56:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "1624:4:18",
													"nodeType": "YulIdentifier",
													"src": "1624:4:18"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "1662:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "1662:4:18"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "1656:5:18",
																"nodeType": "YulIdentifier",
																"src": "1656:5:18"
															},
															"nativeSrc": "1656:11:18",
															"nodeType": "YulFunctionCall",
															"src": "1656:11:18"
														}
													],
													"functionName": {
														"name": "extract_byte_array_length",
														"nativeSrc": "1630:25:18",
														"nodeType": "YulIdentifier",
														"src": "1630:25:18"
													},
													"nativeSrc": "1630:38:18",
													"nodeType": "YulFunctionCall",
													"src": "1630:38:18"
												},
												{
													"name": "newLen",
													"nativeSrc": "1670:6:18",
													"nodeType": "YulIdentifier",
													"src": "1670:6:18"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "1580:43:18",
												"nodeType": "YulIdentifier",
												"src": "1580:43:18"
											},
											"nativeSrc": "1580:97:18",
											"nodeType": "YulFunctionCall",
											"src": "1580:97:18"
										},
										"nativeSrc": "1580:97:18",
										"nodeType": "YulExpressionStatement",
										"src": "1580:97:18"
									},
									{
										"nativeSrc": "1686:18:18",
										"nodeType": "YulVariableDeclaration",
										"src": "1686:18:18",
										"value": {
											"kind": "number",
											"nativeSrc": "1703:1:18",
											"nodeType": "YulLiteral",
											"src": "1703:1:18",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "1690:9:18",
												"nodeType": "YulTypedName",
												"src": "1690:9:18",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1713:23:18",
										"nodeType": "YulVariableDeclaration",
										"src": "1713:23:18",
										"value": {
											"kind": "number",
											"nativeSrc": "1732:4:18",
											"nodeType": "YulLiteral",
											"src": "1732:4:18",
											"type": "",
											"value": "0x20"
										},
										"variables": [
											{
												"name": "srcOffset_1",
												"nativeSrc": "1717:11:18",
												"nodeType": "YulTypedName",
												"src": "1717:11:18",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1745:17:18",
										"nodeType": "YulAssignment",
										"src": "1745:17:18",
										"value": {
											"kind": "number",
											"nativeSrc": "1758:4:18",
											"nodeType": "YulLiteral",
											"src": "1758:4:18",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "1745:9:18",
												"nodeType": "YulIdentifier",
												"src": "1745:9:18"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "1808:656:18",
													"nodeType": "YulBlock",
													"src": "1808:656:18",
													"statements": [
														{
															"nativeSrc": "1822:35:18",
															"nodeType": "YulVariableDeclaration",
															"src": "1822:35:18",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1841:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "1841:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1853:2:18",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:18",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1849:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1849:3:18"
																		},
																		"nativeSrc": "1849:7:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1849:7:18"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1837:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "1837:3:18"
																},
																"nativeSrc": "1837:20:18",
																"nodeType": "YulFunctionCall",
																"src": "1837:20:18"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "1826:7:18",
																	"nodeType": "YulTypedName",
																	"src": "1826:7:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1870:49:18",
															"nodeType": "YulVariableDeclaration",
															"src": "1870:49:18",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "1914:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "1914:4:18"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_string_storage",
																	"nativeSrc": "1884:29:18",
																	"nodeType": "YulIdentifier",
																	"src": "1884:29:18"
																},
																"nativeSrc": "1884:35:18",
																"nodeType": "YulFunctionCall",
																"src": "1884:35:18"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "1874:6:18",
																	"nodeType": "YulTypedName",
																	"src": "1874:6:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1932:10:18",
															"nodeType": "YulVariableDeclaration",
															"src": "1932:10:18",
															"value": {
																"kind": "number",
																"nativeSrc": "1941:1:18",
																"nodeType": "YulLiteral",
																"src": "1941:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "1936:1:18",
																	"nodeType": "YulTypedName",
																	"src": "1936:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2019:172:18",
																"nodeType": "YulBlock",
																"src": "2019:172:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2044:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "2044:6:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "2062:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "2062:3:18"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2067:9:18",
																									"nodeType": "YulIdentifier",
																									"src": "2067:9:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2058:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "2058:3:18"
																							},
																							"nativeSrc": "2058:19:18",
																							"nodeType": "YulFunctionCall",
																							"src": "2058:19:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2052:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "2052:5:18"
																					},
																					"nativeSrc": "2052:26:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2052:26:18"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "2037:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2037:6:18"
																			},
																			"nativeSrc": "2037:42:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2037:42:18"
																		},
																		"nativeSrc": "2037:42:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "2037:42:18"
																	},
																	{
																		"nativeSrc": "2096:24:18",
																		"nodeType": "YulAssignment",
																		"src": "2096:24:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2110:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "2110:6:18"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2118:1:18",
																					"nodeType": "YulLiteral",
																					"src": "2118:1:18",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2106:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "2106:3:18"
																			},
																			"nativeSrc": "2106:14:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2106:14:18"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "2096:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2096:6:18"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2137:40:18",
																		"nodeType": "YulAssignment",
																		"src": "2137:40:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "2154:9:18",
																					"nodeType": "YulIdentifier",
																					"src": "2154:9:18"
																				},
																				{
																					"name": "srcOffset_1",
																					"nativeSrc": "2165:11:18",
																					"nodeType": "YulIdentifier",
																					"src": "2165:11:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2150:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "2150:3:18"
																			},
																			"nativeSrc": "2150:27:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2150:27:18"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "2137:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "2137:9:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "1966:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "1966:1:18"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "1969:7:18",
																		"nodeType": "YulIdentifier",
																		"src": "1969:7:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "1963:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "1963:2:18"
																},
																"nativeSrc": "1963:14:18",
																"nodeType": "YulFunctionCall",
																"src": "1963:14:18"
															},
															"nativeSrc": "1955:236:18",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "1978:28:18",
																"nodeType": "YulBlock",
																"src": "1978:28:18",
																"statements": [
																	{
																		"nativeSrc": "1980:24:18",
																		"nodeType": "YulAssignment",
																		"src": "1980:24:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "1989:1:18",
																					"nodeType": "YulIdentifier",
																					"src": "1989:1:18"
																				},
																				{
																					"name": "srcOffset_1",
																					"nativeSrc": "1992:11:18",
																					"nodeType": "YulIdentifier",
																					"src": "1992:11:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "1985:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "1985:3:18"
																			},
																			"nativeSrc": "1985:19:18",
																			"nodeType": "YulFunctionCall",
																			"src": "1985:19:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "1980:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "1980:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "1959:3:18",
																"nodeType": "YulBlock",
																"src": "1959:3:18",
																"statements": []
															},
															"src": "1955:236:18"
														},
														{
															"body": {
																"nativeSrc": "2239:166:18",
																"nodeType": "YulBlock",
																"src": "2239:166:18",
																"statements": [
																	{
																		"nativeSrc": "2257:43:18",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2257:43:18",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "2284:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "2284:3:18"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "2289:9:18",
																							"nodeType": "YulIdentifier",
																							"src": "2289:9:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2280:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "2280:3:18"
																					},
																					"nativeSrc": "2280:19:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2280:19:18"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2274:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "2274:5:18"
																			},
																			"nativeSrc": "2274:26:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2274:26:18"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "2261:9:18",
																				"nodeType": "YulTypedName",
																				"src": "2261:9:18",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2324:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "2324:6:18"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "2336:9:18",
																							"nodeType": "YulIdentifier",
																							"src": "2336:9:18"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nativeSrc": "2363:1:18",
																															"nodeType": "YulLiteral",
																															"src": "2363:1:18",
																															"type": "",
																															"value": "3"
																														},
																														{
																															"name": "newLen",
																															"nativeSrc": "2366:6:18",
																															"nodeType": "YulIdentifier",
																															"src": "2366:6:18"
																														}
																													],
																													"functionName": {
																														"name": "shl",
																														"nativeSrc": "2359:3:18",
																														"nodeType": "YulIdentifier",
																														"src": "2359:3:18"
																													},
																													"nativeSrc": "2359:14:18",
																													"nodeType": "YulFunctionCall",
																													"src": "2359:14:18"
																												},
																												{
																													"kind": "number",
																													"nativeSrc": "2375:3:18",
																													"nodeType": "YulLiteral",
																													"src": "2375:3:18",
																													"type": "",
																													"value": "248"
																												}
																											],
																											"functionName": {
																												"name": "and",
																												"nativeSrc": "2355:3:18",
																												"nodeType": "YulIdentifier",
																												"src": "2355:3:18"
																											},
																											"nativeSrc": "2355:24:18",
																											"nodeType": "YulFunctionCall",
																											"src": "2355:24:18"
																										},
																										{
																											"arguments": [
																												{
																													"kind": "number",
																													"nativeSrc": "2385:1:18",
																													"nodeType": "YulLiteral",
																													"src": "2385:1:18",
																													"type": "",
																													"value": "0"
																												}
																											],
																											"functionName": {
																												"name": "not",
																												"nativeSrc": "2381:3:18",
																												"nodeType": "YulIdentifier",
																												"src": "2381:3:18"
																											},
																											"nativeSrc": "2381:6:18",
																											"nodeType": "YulFunctionCall",
																											"src": "2381:6:18"
																										}
																									],
																									"functionName": {
																										"name": "shr",
																										"nativeSrc": "2351:3:18",
																										"nodeType": "YulIdentifier",
																										"src": "2351:3:18"
																									},
																									"nativeSrc": "2351:37:18",
																									"nodeType": "YulFunctionCall",
																									"src": "2351:37:18"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "2347:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "2347:3:18"
																							},
																							"nativeSrc": "2347:42:18",
																							"nodeType": "YulFunctionCall",
																							"src": "2347:42:18"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "2332:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "2332:3:18"
																					},
																					"nativeSrc": "2332:58:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2332:58:18"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "2317:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2317:6:18"
																			},
																			"nativeSrc": "2317:74:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2317:74:18"
																		},
																		"nativeSrc": "2317:74:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "2317:74:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "2210:7:18",
																		"nodeType": "YulIdentifier",
																		"src": "2210:7:18"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "2219:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "2219:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "2207:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "2207:2:18"
																},
																"nativeSrc": "2207:19:18",
																"nodeType": "YulFunctionCall",
																"src": "2207:19:18"
															},
															"nativeSrc": "2204:201:18",
															"nodeType": "YulIf",
															"src": "2204:201:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2425:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "2425:4:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2439:1:18",
																						"nodeType": "YulLiteral",
																						"src": "2439:1:18",
																						"type": "",
																						"value": "1"
																					},
																					{
																						"name": "newLen",
																						"nativeSrc": "2442:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "2442:6:18"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2435:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "2435:3:18"
																				},
																				"nativeSrc": "2435:14:18",
																				"nodeType": "YulFunctionCall",
																				"src": "2435:14:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2451:1:18",
																				"nodeType": "YulLiteral",
																				"src": "2451:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2431:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2431:3:18"
																		},
																		"nativeSrc": "2431:22:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2431:22:18"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "2418:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2418:6:18"
																},
																"nativeSrc": "2418:36:18",
																"nodeType": "YulFunctionCall",
																"src": "2418:36:18"
															},
															"nativeSrc": "2418:36:18",
															"nodeType": "YulExpressionStatement",
															"src": "2418:36:18"
														}
													]
												},
												"nativeSrc": "1801:663:18",
												"nodeType": "YulCase",
												"src": "1801:663:18",
												"value": {
													"kind": "number",
													"nativeSrc": "1806:1:18",
													"nodeType": "YulLiteral",
													"src": "1806:1:18",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "2481:234:18",
													"nodeType": "YulBlock",
													"src": "2481:234:18",
													"statements": [
														{
															"nativeSrc": "2495:14:18",
															"nodeType": "YulVariableDeclaration",
															"src": "2495:14:18",
															"value": {
																"kind": "number",
																"nativeSrc": "2508:1:18",
																"nodeType": "YulLiteral",
																"src": "2508:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2499:5:18",
																	"nodeType": "YulTypedName",
																	"src": "2499:5:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2544:67:18",
																"nodeType": "YulBlock",
																"src": "2544:67:18",
																"statements": [
																	{
																		"nativeSrc": "2562:35:18",
																		"nodeType": "YulAssignment",
																		"src": "2562:35:18",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "2581:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "2581:3:18"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "2586:9:18",
																							"nodeType": "YulIdentifier",
																							"src": "2586:9:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:18"
																					},
																					"nativeSrc": "2577:19:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:19:18"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:18"
																			},
																			"nativeSrc": "2571:26:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:26:18"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "2562:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "2562:5:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "2525:6:18",
																"nodeType": "YulIdentifier",
																"src": "2525:6:18"
															},
															"nativeSrc": "2522:89:18",
															"nodeType": "YulIf",
															"src": "2522:89:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2631:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "2631:4:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2690:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "2690:5:18"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "2697:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2697:6:18"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "2637:52:18",
																			"nodeType": "YulIdentifier",
																			"src": "2637:52:18"
																		},
																		"nativeSrc": "2637:67:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2637:67:18"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "2624:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2624:6:18"
																},
																"nativeSrc": "2624:81:18",
																"nodeType": "YulFunctionCall",
																"src": "2624:81:18"
															},
															"nativeSrc": "2624:81:18",
															"nodeType": "YulExpressionStatement",
															"src": "2624:81:18"
														}
													]
												},
												"nativeSrc": "2473:242:18",
												"nodeType": "YulCase",
												"src": "2473:242:18",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "1781:6:18",
													"nodeType": "YulIdentifier",
													"src": "1781:6:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1789:2:18",
													"nodeType": "YulLiteral",
													"src": "1789:2:18",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "1778:2:18",
												"nodeType": "YulIdentifier",
												"src": "1778:2:18"
											},
											"nativeSrc": "1778:14:18",
											"nodeType": "YulFunctionCall",
											"src": "1778:14:18"
										},
										"nativeSrc": "1771:944:18",
										"nodeType": "YulSwitch",
										"src": "1771:944:18"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "1376:1345:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "1457:4:18",
									"nodeType": "YulTypedName",
									"src": "1457:4:18",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "1463:3:18",
									"nodeType": "YulTypedName",
									"src": "1463:3:18",
									"type": ""
								}
							],
							"src": "1376:1345:18"
						},
						{
							"body": {
								"nativeSrc": "2758:95:18",
								"nodeType": "YulBlock",
								"src": "2758:95:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2775:1:18",
													"nodeType": "YulLiteral",
													"src": "2775:1:18",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "2782:3:18",
															"nodeType": "YulLiteral",
															"src": "2782:3:18",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "2787:10:18",
															"nodeType": "YulLiteral",
															"src": "2787:10:18",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "2778:3:18",
														"nodeType": "YulIdentifier",
														"src": "2778:3:18"
													},
													"nativeSrc": "2778:20:18",
													"nodeType": "YulFunctionCall",
													"src": "2778:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2768:6:18",
												"nodeType": "YulIdentifier",
												"src": "2768:6:18"
											},
											"nativeSrc": "2768:31:18",
											"nodeType": "YulFunctionCall",
											"src": "2768:31:18"
										},
										"nativeSrc": "2768:31:18",
										"nodeType": "YulExpressionStatement",
										"src": "2768:31:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2815:1:18",
													"nodeType": "YulLiteral",
													"src": "2815:1:18",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "2818:4:18",
													"nodeType": "YulLiteral",
													"src": "2818:4:18",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2808:6:18",
												"nodeType": "YulIdentifier",
												"src": "2808:6:18"
											},
											"nativeSrc": "2808:15:18",
											"nodeType": "YulFunctionCall",
											"src": "2808:15:18"
										},
										"nativeSrc": "2808:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "2808:15:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2839:1:18",
													"nodeType": "YulLiteral",
													"src": "2839:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "2842:4:18",
													"nodeType": "YulLiteral",
													"src": "2842:4:18",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "2832:6:18",
												"nodeType": "YulIdentifier",
												"src": "2832:6:18"
											},
											"nativeSrc": "2832:15:18",
											"nodeType": "YulFunctionCall",
											"src": "2832:15:18"
										},
										"nativeSrc": "2832:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "2832:15:18"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "2726:127:18",
							"nodeType": "YulFunctionDefinition",
							"src": "2726:127:18"
						},
						{
							"body": {
								"nativeSrc": "2922:352:18",
								"nodeType": "YulBlock",
								"src": "2922:352:18",
								"statements": [
									{
										"nativeSrc": "2932:16:18",
										"nodeType": "YulVariableDeclaration",
										"src": "2932:16:18",
										"value": {
											"kind": "number",
											"nativeSrc": "2947:1:18",
											"nodeType": "YulLiteral",
											"src": "2947:1:18",
											"type": "",
											"value": "1"
										},
										"variables": [
											{
												"name": "power_1",
												"nativeSrc": "2936:7:18",
												"nodeType": "YulTypedName",
												"src": "2936:7:18",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "2957:10:18",
										"nodeType": "YulAssignment",
										"src": "2957:10:18",
										"value": {
											"kind": "number",
											"nativeSrc": "2966:1:18",
											"nodeType": "YulLiteral",
											"src": "2966:1:18",
											"type": "",
											"value": "1"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "2957:5:18",
												"nodeType": "YulIdentifier",
												"src": "2957:5:18"
											}
										]
									},
									{
										"nativeSrc": "2976:13:18",
										"nodeType": "YulAssignment",
										"src": "2976:13:18",
										"value": {
											"name": "_base",
											"nativeSrc": "2984:5:18",
											"nodeType": "YulIdentifier",
											"src": "2984:5:18"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "2976:4:18",
												"nodeType": "YulIdentifier",
												"src": "2976:4:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3040:228:18",
											"nodeType": "YulBlock",
											"src": "3040:228:18",
											"statements": [
												{
													"body": {
														"nativeSrc": "3085:22:18",
														"nodeType": "YulBlock",
														"src": "3085:22:18",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "3087:16:18",
																		"nodeType": "YulIdentifier",
																		"src": "3087:16:18"
																	},
																	"nativeSrc": "3087:18:18",
																	"nodeType": "YulFunctionCall",
																	"src": "3087:18:18"
																},
																"nativeSrc": "3087:18:18",
																"nodeType": "YulExpressionStatement",
																"src": "3087:18:18"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "3060:4:18",
																"nodeType": "YulIdentifier",
																"src": "3060:4:18"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3074:1:18",
																				"nodeType": "YulLiteral",
																				"src": "3074:1:18",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "3070:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3070:3:18"
																		},
																		"nativeSrc": "3070:6:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3070:6:18"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "3078:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "3078:4:18"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "3066:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "3066:3:18"
																},
																"nativeSrc": "3066:17:18",
																"nodeType": "YulFunctionCall",
																"src": "3066:17:18"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "3057:2:18",
															"nodeType": "YulIdentifier",
															"src": "3057:2:18"
														},
														"nativeSrc": "3057:27:18",
														"nodeType": "YulFunctionCall",
														"src": "3057:27:18"
													},
													"nativeSrc": "3054:53:18",
													"nodeType": "YulIf",
													"src": "3054:53:18"
												},
												{
													"body": {
														"nativeSrc": "3146:29:18",
														"nodeType": "YulBlock",
														"src": "3146:29:18",
														"statements": [
															{
																"nativeSrc": "3148:25:18",
																"nodeType": "YulAssignment",
																"src": "3148:25:18",
																"value": {
																	"arguments": [
																		{
																			"name": "power",
																			"nativeSrc": "3161:5:18",
																			"nodeType": "YulIdentifier",
																			"src": "3161:5:18"
																		},
																		{
																			"name": "base",
																			"nativeSrc": "3168:4:18",
																			"nodeType": "YulIdentifier",
																			"src": "3168:4:18"
																		}
																	],
																	"functionName": {
																		"name": "mul",
																		"nativeSrc": "3157:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "3157:3:18"
																	},
																	"nativeSrc": "3157:16:18",
																	"nodeType": "YulFunctionCall",
																	"src": "3157:16:18"
																},
																"variableNames": [
																	{
																		"name": "power",
																		"nativeSrc": "3148:5:18",
																		"nodeType": "YulIdentifier",
																		"src": "3148:5:18"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "3127:8:18",
																"nodeType": "YulIdentifier",
																"src": "3127:8:18"
															},
															{
																"name": "power_1",
																"nativeSrc": "3137:7:18",
																"nodeType": "YulIdentifier",
																"src": "3137:7:18"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "3123:3:18",
															"nodeType": "YulIdentifier",
															"src": "3123:3:18"
														},
														"nativeSrc": "3123:22:18",
														"nodeType": "YulFunctionCall",
														"src": "3123:22:18"
													},
													"nativeSrc": "3120:55:18",
													"nodeType": "YulIf",
													"src": "3120:55:18"
												},
												{
													"nativeSrc": "3188:23:18",
													"nodeType": "YulAssignment",
													"src": "3188:23:18",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "3200:4:18",
																"nodeType": "YulIdentifier",
																"src": "3200:4:18"
															},
															{
																"name": "base",
																"nativeSrc": "3206:4:18",
																"nodeType": "YulIdentifier",
																"src": "3206:4:18"
															}
														],
														"functionName": {
															"name": "mul",
															"nativeSrc": "3196:3:18",
															"nodeType": "YulIdentifier",
															"src": "3196:3:18"
														},
														"nativeSrc": "3196:15:18",
														"nodeType": "YulFunctionCall",
														"src": "3196:15:18"
													},
													"variableNames": [
														{
															"name": "base",
															"nativeSrc": "3188:4:18",
															"nodeType": "YulIdentifier",
															"src": "3188:4:18"
														}
													]
												},
												{
													"nativeSrc": "3224:34:18",
													"nodeType": "YulAssignment",
													"src": "3224:34:18",
													"value": {
														"arguments": [
															{
																"name": "power_1",
																"nativeSrc": "3240:7:18",
																"nodeType": "YulIdentifier",
																"src": "3240:7:18"
															},
															{
																"name": "exponent",
																"nativeSrc": "3249:8:18",
																"nodeType": "YulIdentifier",
																"src": "3249:8:18"
															}
														],
														"functionName": {
															"name": "shr",
															"nativeSrc": "3236:3:18",
															"nodeType": "YulIdentifier",
															"src": "3236:3:18"
														},
														"nativeSrc": "3236:22:18",
														"nodeType": "YulFunctionCall",
														"src": "3236:22:18"
													},
													"variableNames": [
														{
															"name": "exponent",
															"nativeSrc": "3224:8:18",
															"nodeType": "YulIdentifier",
															"src": "3224:8:18"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "3009:8:18",
													"nodeType": "YulIdentifier",
													"src": "3009:8:18"
												},
												{
													"name": "power_1",
													"nativeSrc": "3019:7:18",
													"nodeType": "YulIdentifier",
													"src": "3019:7:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3006:2:18",
												"nodeType": "YulIdentifier",
												"src": "3006:2:18"
											},
											"nativeSrc": "3006:21:18",
											"nodeType": "YulFunctionCall",
											"src": "3006:21:18"
										},
										"nativeSrc": "2998:270:18",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "3028:3:18",
											"nodeType": "YulBlock",
											"src": "3028:3:18",
											"statements": []
										},
										"pre": {
											"nativeSrc": "3002:3:18",
											"nodeType": "YulBlock",
											"src": "3002:3:18",
											"statements": []
										},
										"src": "2998:270:18"
									}
								]
							},
							"name": "checked_exp_helper",
							"nativeSrc": "2858:416:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "_base",
									"nativeSrc": "2886:5:18",
									"nodeType": "YulTypedName",
									"src": "2886:5:18",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "2893:8:18",
									"nodeType": "YulTypedName",
									"src": "2893:8:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "2906:5:18",
									"nodeType": "YulTypedName",
									"src": "2906:5:18",
									"type": ""
								},
								{
									"name": "base",
									"nativeSrc": "2913:4:18",
									"nodeType": "YulTypedName",
									"src": "2913:4:18",
									"type": ""
								}
							],
							"src": "2858:416:18"
						},
						{
							"body": {
								"nativeSrc": "3338:747:18",
								"nodeType": "YulBlock",
								"src": "3338:747:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "3376:52:18",
											"nodeType": "YulBlock",
											"src": "3376:52:18",
											"statements": [
												{
													"nativeSrc": "3390:10:18",
													"nodeType": "YulAssignment",
													"src": "3390:10:18",
													"value": {
														"kind": "number",
														"nativeSrc": "3399:1:18",
														"nodeType": "YulLiteral",
														"src": "3399:1:18",
														"type": "",
														"value": "1"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "3390:5:18",
															"nodeType": "YulIdentifier",
															"src": "3390:5:18"
														}
													]
												},
												{
													"nativeSrc": "3413:5:18",
													"nodeType": "YulLeave",
													"src": "3413:5:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "3358:8:18",
													"nodeType": "YulIdentifier",
													"src": "3358:8:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "3351:6:18",
												"nodeType": "YulIdentifier",
												"src": "3351:6:18"
											},
											"nativeSrc": "3351:16:18",
											"nodeType": "YulFunctionCall",
											"src": "3351:16:18"
										},
										"nativeSrc": "3348:80:18",
										"nodeType": "YulIf",
										"src": "3348:80:18"
									},
									{
										"body": {
											"nativeSrc": "3461:52:18",
											"nodeType": "YulBlock",
											"src": "3461:52:18",
											"statements": [
												{
													"nativeSrc": "3475:10:18",
													"nodeType": "YulAssignment",
													"src": "3475:10:18",
													"value": {
														"kind": "number",
														"nativeSrc": "3484:1:18",
														"nodeType": "YulLiteral",
														"src": "3484:1:18",
														"type": "",
														"value": "0"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "3475:5:18",
															"nodeType": "YulIdentifier",
															"src": "3475:5:18"
														}
													]
												},
												{
													"nativeSrc": "3498:5:18",
													"nodeType": "YulLeave",
													"src": "3498:5:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "3447:4:18",
													"nodeType": "YulIdentifier",
													"src": "3447:4:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "3440:6:18",
												"nodeType": "YulIdentifier",
												"src": "3440:6:18"
											},
											"nativeSrc": "3440:12:18",
											"nodeType": "YulFunctionCall",
											"src": "3440:12:18"
										},
										"nativeSrc": "3437:76:18",
										"nodeType": "YulIf",
										"src": "3437:76:18"
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "3549:52:18",
													"nodeType": "YulBlock",
													"src": "3549:52:18",
													"statements": [
														{
															"nativeSrc": "3563:10:18",
															"nodeType": "YulAssignment",
															"src": "3563:10:18",
															"value": {
																"kind": "number",
																"nativeSrc": "3572:1:18",
																"nodeType": "YulLiteral",
																"src": "3572:1:18",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3563:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "3563:5:18"
																}
															]
														},
														{
															"nativeSrc": "3586:5:18",
															"nodeType": "YulLeave",
															"src": "3586:5:18"
														}
													]
												},
												"nativeSrc": "3542:59:18",
												"nodeType": "YulCase",
												"src": "3542:59:18",
												"value": {
													"kind": "number",
													"nativeSrc": "3547:1:18",
													"nodeType": "YulLiteral",
													"src": "3547:1:18",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "3617:123:18",
													"nodeType": "YulBlock",
													"src": "3617:123:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "3652:22:18",
																"nodeType": "YulBlock",
																"src": "3652:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3654:16:18",
																				"nodeType": "YulIdentifier",
																				"src": "3654:16:18"
																			},
																			"nativeSrc": "3654:18:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3654:18:18"
																		},
																		"nativeSrc": "3654:18:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "3654:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3637:8:18",
																		"nodeType": "YulIdentifier",
																		"src": "3637:8:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3647:3:18",
																		"nodeType": "YulLiteral",
																		"src": "3647:3:18",
																		"type": "",
																		"value": "255"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3634:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "3634:2:18"
																},
																"nativeSrc": "3634:17:18",
																"nodeType": "YulFunctionCall",
																"src": "3634:17:18"
															},
															"nativeSrc": "3631:43:18",
															"nodeType": "YulIf",
															"src": "3631:43:18"
														},
														{
															"nativeSrc": "3687:25:18",
															"nodeType": "YulAssignment",
															"src": "3687:25:18",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3700:8:18",
																		"nodeType": "YulIdentifier",
																		"src": "3700:8:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3710:1:18",
																		"nodeType": "YulLiteral",
																		"src": "3710:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "3696:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "3696:3:18"
																},
																"nativeSrc": "3696:16:18",
																"nodeType": "YulFunctionCall",
																"src": "3696:16:18"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3687:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "3687:5:18"
																}
															]
														},
														{
															"nativeSrc": "3725:5:18",
															"nodeType": "YulLeave",
															"src": "3725:5:18"
														}
													]
												},
												"nativeSrc": "3610:130:18",
												"nodeType": "YulCase",
												"src": "3610:130:18",
												"value": {
													"kind": "number",
													"nativeSrc": "3615:1:18",
													"nodeType": "YulLiteral",
													"src": "3615:1:18",
													"type": "",
													"value": "2"
												}
											}
										],
										"expression": {
											"name": "base",
											"nativeSrc": "3529:4:18",
											"nodeType": "YulIdentifier",
											"src": "3529:4:18"
										},
										"nativeSrc": "3522:218:18",
										"nodeType": "YulSwitch",
										"src": "3522:218:18"
									},
									{
										"body": {
											"nativeSrc": "3838:70:18",
											"nodeType": "YulBlock",
											"src": "3838:70:18",
											"statements": [
												{
													"nativeSrc": "3852:28:18",
													"nodeType": "YulAssignment",
													"src": "3852:28:18",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "3865:4:18",
																"nodeType": "YulIdentifier",
																"src": "3865:4:18"
															},
															{
																"name": "exponent",
																"nativeSrc": "3871:8:18",
																"nodeType": "YulIdentifier",
																"src": "3871:8:18"
															}
														],
														"functionName": {
															"name": "exp",
															"nativeSrc": "3861:3:18",
															"nodeType": "YulIdentifier",
															"src": "3861:3:18"
														},
														"nativeSrc": "3861:19:18",
														"nodeType": "YulFunctionCall",
														"src": "3861:19:18"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "3852:5:18",
															"nodeType": "YulIdentifier",
															"src": "3852:5:18"
														}
													]
												},
												{
													"nativeSrc": "3893:5:18",
													"nodeType": "YulLeave",
													"src": "3893:5:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "3762:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "3762:4:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3768:2:18",
																	"nodeType": "YulLiteral",
																	"src": "3768:2:18",
																	"type": "",
																	"value": "11"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "3759:2:18",
																"nodeType": "YulIdentifier",
																"src": "3759:2:18"
															},
															"nativeSrc": "3759:12:18",
															"nodeType": "YulFunctionCall",
															"src": "3759:12:18"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "3776:8:18",
																	"nodeType": "YulIdentifier",
																	"src": "3776:8:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3786:2:18",
																	"nodeType": "YulLiteral",
																	"src": "3786:2:18",
																	"type": "",
																	"value": "78"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "3773:2:18",
																"nodeType": "YulIdentifier",
																"src": "3773:2:18"
															},
															"nativeSrc": "3773:16:18",
															"nodeType": "YulFunctionCall",
															"src": "3773:16:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3755:3:18",
														"nodeType": "YulIdentifier",
														"src": "3755:3:18"
													},
													"nativeSrc": "3755:35:18",
													"nodeType": "YulFunctionCall",
													"src": "3755:35:18"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "3799:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "3799:4:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3805:3:18",
																	"nodeType": "YulLiteral",
																	"src": "3805:3:18",
																	"type": "",
																	"value": "307"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "3796:2:18",
																"nodeType": "YulIdentifier",
																"src": "3796:2:18"
															},
															"nativeSrc": "3796:13:18",
															"nodeType": "YulFunctionCall",
															"src": "3796:13:18"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "3814:8:18",
																	"nodeType": "YulIdentifier",
																	"src": "3814:8:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3824:2:18",
																	"nodeType": "YulLiteral",
																	"src": "3824:2:18",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "3811:2:18",
																"nodeType": "YulIdentifier",
																"src": "3811:2:18"
															},
															"nativeSrc": "3811:16:18",
															"nodeType": "YulFunctionCall",
															"src": "3811:16:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3792:3:18",
														"nodeType": "YulIdentifier",
														"src": "3792:3:18"
													},
													"nativeSrc": "3792:36:18",
													"nodeType": "YulFunctionCall",
													"src": "3792:36:18"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "3752:2:18",
												"nodeType": "YulIdentifier",
												"src": "3752:2:18"
											},
											"nativeSrc": "3752:77:18",
											"nodeType": "YulFunctionCall",
											"src": "3752:77:18"
										},
										"nativeSrc": "3749:159:18",
										"nodeType": "YulIf",
										"src": "3749:159:18"
									},
									{
										"nativeSrc": "3917:57:18",
										"nodeType": "YulVariableDeclaration",
										"src": "3917:57:18",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "3959:4:18",
													"nodeType": "YulIdentifier",
													"src": "3959:4:18"
												},
												{
													"name": "exponent",
													"nativeSrc": "3965:8:18",
													"nodeType": "YulIdentifier",
													"src": "3965:8:18"
												}
											],
											"functionName": {
												"name": "checked_exp_helper",
												"nativeSrc": "3940:18:18",
												"nodeType": "YulIdentifier",
												"src": "3940:18:18"
											},
											"nativeSrc": "3940:34:18",
											"nodeType": "YulFunctionCall",
											"src": "3940:34:18"
										},
										"variables": [
											{
												"name": "power_1",
												"nativeSrc": "3921:7:18",
												"nodeType": "YulTypedName",
												"src": "3921:7:18",
												"type": ""
											},
											{
												"name": "base_1",
												"nativeSrc": "3930:6:18",
												"nodeType": "YulTypedName",
												"src": "3930:6:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4019:22:18",
											"nodeType": "YulBlock",
											"src": "4019:22:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "4021:16:18",
															"nodeType": "YulIdentifier",
															"src": "4021:16:18"
														},
														"nativeSrc": "4021:18:18",
														"nodeType": "YulFunctionCall",
														"src": "4021:18:18"
													},
													"nativeSrc": "4021:18:18",
													"nodeType": "YulExpressionStatement",
													"src": "4021:18:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "power_1",
													"nativeSrc": "3989:7:18",
													"nodeType": "YulIdentifier",
													"src": "3989:7:18"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "4006:1:18",
																	"nodeType": "YulLiteral",
																	"src": "4006:1:18",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "4002:3:18",
																"nodeType": "YulIdentifier",
																"src": "4002:3:18"
															},
															"nativeSrc": "4002:6:18",
															"nodeType": "YulFunctionCall",
															"src": "4002:6:18"
														},
														{
															"name": "base_1",
															"nativeSrc": "4010:6:18",
															"nodeType": "YulIdentifier",
															"src": "4010:6:18"
														}
													],
													"functionName": {
														"name": "div",
														"nativeSrc": "3998:3:18",
														"nodeType": "YulIdentifier",
														"src": "3998:3:18"
													},
													"nativeSrc": "3998:19:18",
													"nodeType": "YulFunctionCall",
													"src": "3998:19:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3986:2:18",
												"nodeType": "YulIdentifier",
												"src": "3986:2:18"
											},
											"nativeSrc": "3986:32:18",
											"nodeType": "YulFunctionCall",
											"src": "3986:32:18"
										},
										"nativeSrc": "3983:58:18",
										"nodeType": "YulIf",
										"src": "3983:58:18"
									},
									{
										"nativeSrc": "4050:29:18",
										"nodeType": "YulAssignment",
										"src": "4050:29:18",
										"value": {
											"arguments": [
												{
													"name": "power_1",
													"nativeSrc": "4063:7:18",
													"nodeType": "YulIdentifier",
													"src": "4063:7:18"
												},
												{
													"name": "base_1",
													"nativeSrc": "4072:6:18",
													"nodeType": "YulIdentifier",
													"src": "4072:6:18"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "4059:3:18",
												"nodeType": "YulIdentifier",
												"src": "4059:3:18"
											},
											"nativeSrc": "4059:20:18",
											"nodeType": "YulFunctionCall",
											"src": "4059:20:18"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "4050:5:18",
												"nodeType": "YulIdentifier",
												"src": "4050:5:18"
											}
										]
									}
								]
							},
							"name": "checked_exp_unsigned",
							"nativeSrc": "3279:806:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "3309:4:18",
									"nodeType": "YulTypedName",
									"src": "3309:4:18",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "3315:8:18",
									"nodeType": "YulTypedName",
									"src": "3315:8:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "3328:5:18",
									"nodeType": "YulTypedName",
									"src": "3328:5:18",
									"type": ""
								}
							],
							"src": "3279:806:18"
						},
						{
							"body": {
								"nativeSrc": "4158:72:18",
								"nodeType": "YulBlock",
								"src": "4158:72:18",
								"statements": [
									{
										"nativeSrc": "4168:56:18",
										"nodeType": "YulAssignment",
										"src": "4168:56:18",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "4198:4:18",
													"nodeType": "YulIdentifier",
													"src": "4198:4:18"
												},
												{
													"arguments": [
														{
															"name": "exponent",
															"nativeSrc": "4208:8:18",
															"nodeType": "YulIdentifier",
															"src": "4208:8:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4218:4:18",
															"nodeType": "YulLiteral",
															"src": "4218:4:18",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4204:3:18",
														"nodeType": "YulIdentifier",
														"src": "4204:3:18"
													},
													"nativeSrc": "4204:19:18",
													"nodeType": "YulFunctionCall",
													"src": "4204:19:18"
												}
											],
											"functionName": {
												"name": "checked_exp_unsigned",
												"nativeSrc": "4177:20:18",
												"nodeType": "YulIdentifier",
												"src": "4177:20:18"
											},
											"nativeSrc": "4177:47:18",
											"nodeType": "YulFunctionCall",
											"src": "4177:47:18"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "4168:5:18",
												"nodeType": "YulIdentifier",
												"src": "4168:5:18"
											}
										]
									}
								]
							},
							"name": "checked_exp_t_uint256_t_uint8",
							"nativeSrc": "4090:140:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "4129:4:18",
									"nodeType": "YulTypedName",
									"src": "4129:4:18",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "4135:8:18",
									"nodeType": "YulTypedName",
									"src": "4135:8:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "4148:5:18",
									"nodeType": "YulTypedName",
									"src": "4148:5:18",
									"type": ""
								}
							],
							"src": "4090:140:18"
						},
						{
							"body": {
								"nativeSrc": "4287:116:18",
								"nodeType": "YulBlock",
								"src": "4287:116:18",
								"statements": [
									{
										"nativeSrc": "4297:20:18",
										"nodeType": "YulAssignment",
										"src": "4297:20:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "4312:1:18",
													"nodeType": "YulIdentifier",
													"src": "4312:1:18"
												},
												{
													"name": "y",
													"nativeSrc": "4315:1:18",
													"nodeType": "YulIdentifier",
													"src": "4315:1:18"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "4308:3:18",
												"nodeType": "YulIdentifier",
												"src": "4308:3:18"
											},
											"nativeSrc": "4308:9:18",
											"nodeType": "YulFunctionCall",
											"src": "4308:9:18"
										},
										"variableNames": [
											{
												"name": "product",
												"nativeSrc": "4297:7:18",
												"nodeType": "YulIdentifier",
												"src": "4297:7:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4375:22:18",
											"nodeType": "YulBlock",
											"src": "4375:22:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "4377:16:18",
															"nodeType": "YulIdentifier",
															"src": "4377:16:18"
														},
														"nativeSrc": "4377:18:18",
														"nodeType": "YulFunctionCall",
														"src": "4377:18:18"
													},
													"nativeSrc": "4377:18:18",
													"nodeType": "YulExpressionStatement",
													"src": "4377:18:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nativeSrc": "4346:1:18",
																	"nodeType": "YulIdentifier",
																	"src": "4346:1:18"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "4339:6:18",
																"nodeType": "YulIdentifier",
																"src": "4339:6:18"
															},
															"nativeSrc": "4339:9:18",
															"nodeType": "YulFunctionCall",
															"src": "4339:9:18"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nativeSrc": "4353:1:18",
																	"nodeType": "YulIdentifier",
																	"src": "4353:1:18"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nativeSrc": "4360:7:18",
																			"nodeType": "YulIdentifier",
																			"src": "4360:7:18"
																		},
																		{
																			"name": "x",
																			"nativeSrc": "4369:1:18",
																			"nodeType": "YulIdentifier",
																			"src": "4369:1:18"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nativeSrc": "4356:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "4356:3:18"
																	},
																	"nativeSrc": "4356:15:18",
																	"nodeType": "YulFunctionCall",
																	"src": "4356:15:18"
																}
															],
															"functionName": {
																"name": "eq",
																"nativeSrc": "4350:2:18",
																"nodeType": "YulIdentifier",
																"src": "4350:2:18"
															},
															"nativeSrc": "4350:22:18",
															"nodeType": "YulFunctionCall",
															"src": "4350:22:18"
														}
													],
													"functionName": {
														"name": "or",
														"nativeSrc": "4336:2:18",
														"nodeType": "YulIdentifier",
														"src": "4336:2:18"
													},
													"nativeSrc": "4336:37:18",
													"nodeType": "YulFunctionCall",
													"src": "4336:37:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4329:6:18",
												"nodeType": "YulIdentifier",
												"src": "4329:6:18"
											},
											"nativeSrc": "4329:45:18",
											"nodeType": "YulFunctionCall",
											"src": "4329:45:18"
										},
										"nativeSrc": "4326:71:18",
										"nodeType": "YulIf",
										"src": "4326:71:18"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nativeSrc": "4235:168:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "4266:1:18",
									"nodeType": "YulTypedName",
									"src": "4266:1:18",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "4269:1:18",
									"nodeType": "YulTypedName",
									"src": "4269:1:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nativeSrc": "4275:7:18",
									"nodeType": "YulTypedName",
									"src": "4275:7:18",
									"type": ""
								}
							],
							"src": "4235:168:18"
						},
						{
							"body": {
								"nativeSrc": "4621:276:18",
								"nodeType": "YulBlock",
								"src": "4621:276:18",
								"statements": [
									{
										"nativeSrc": "4631:27:18",
										"nodeType": "YulAssignment",
										"src": "4631:27:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4643:9:18",
													"nodeType": "YulIdentifier",
													"src": "4643:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "4654:3:18",
													"nodeType": "YulLiteral",
													"src": "4654:3:18",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4639:3:18",
												"nodeType": "YulIdentifier",
												"src": "4639:3:18"
											},
											"nativeSrc": "4639:19:18",
											"nodeType": "YulFunctionCall",
											"src": "4639:19:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4631:4:18",
												"nodeType": "YulIdentifier",
												"src": "4631:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4674:9:18",
													"nodeType": "YulIdentifier",
													"src": "4674:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "4685:6:18",
													"nodeType": "YulIdentifier",
													"src": "4685:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4667:6:18",
												"nodeType": "YulIdentifier",
												"src": "4667:6:18"
											},
											"nativeSrc": "4667:25:18",
											"nodeType": "YulFunctionCall",
											"src": "4667:25:18"
										},
										"nativeSrc": "4667:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "4667:25:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4712:9:18",
															"nodeType": "YulIdentifier",
															"src": "4712:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4723:2:18",
															"nodeType": "YulLiteral",
															"src": "4723:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4708:3:18",
														"nodeType": "YulIdentifier",
														"src": "4708:3:18"
													},
													"nativeSrc": "4708:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4708:18:18"
												},
												{
													"name": "value1",
													"nativeSrc": "4728:6:18",
													"nodeType": "YulIdentifier",
													"src": "4728:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4701:6:18",
												"nodeType": "YulIdentifier",
												"src": "4701:6:18"
											},
											"nativeSrc": "4701:34:18",
											"nodeType": "YulFunctionCall",
											"src": "4701:34:18"
										},
										"nativeSrc": "4701:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "4701:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4755:9:18",
															"nodeType": "YulIdentifier",
															"src": "4755:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4766:2:18",
															"nodeType": "YulLiteral",
															"src": "4766:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4751:3:18",
														"nodeType": "YulIdentifier",
														"src": "4751:3:18"
													},
													"nativeSrc": "4751:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4751:18:18"
												},
												{
													"name": "value2",
													"nativeSrc": "4771:6:18",
													"nodeType": "YulIdentifier",
													"src": "4771:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4744:6:18",
												"nodeType": "YulIdentifier",
												"src": "4744:6:18"
											},
											"nativeSrc": "4744:34:18",
											"nodeType": "YulFunctionCall",
											"src": "4744:34:18"
										},
										"nativeSrc": "4744:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "4744:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4798:9:18",
															"nodeType": "YulIdentifier",
															"src": "4798:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4809:2:18",
															"nodeType": "YulLiteral",
															"src": "4809:2:18",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4794:3:18",
														"nodeType": "YulIdentifier",
														"src": "4794:3:18"
													},
													"nativeSrc": "4794:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4794:18:18"
												},
												{
													"name": "value3",
													"nativeSrc": "4814:6:18",
													"nodeType": "YulIdentifier",
													"src": "4814:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4787:6:18",
												"nodeType": "YulIdentifier",
												"src": "4787:6:18"
											},
											"nativeSrc": "4787:34:18",
											"nodeType": "YulFunctionCall",
											"src": "4787:34:18"
										},
										"nativeSrc": "4787:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "4787:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4841:9:18",
															"nodeType": "YulIdentifier",
															"src": "4841:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4852:3:18",
															"nodeType": "YulLiteral",
															"src": "4852:3:18",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4837:3:18",
														"nodeType": "YulIdentifier",
														"src": "4837:3:18"
													},
													"nativeSrc": "4837:19:18",
													"nodeType": "YulFunctionCall",
													"src": "4837:19:18"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "4862:6:18",
															"nodeType": "YulIdentifier",
															"src": "4862:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "4878:3:18",
																			"nodeType": "YulLiteral",
																			"src": "4878:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "4883:1:18",
																			"nodeType": "YulLiteral",
																			"src": "4883:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "4874:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "4874:3:18"
																	},
																	"nativeSrc": "4874:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "4874:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4887:1:18",
																	"nodeType": "YulLiteral",
																	"src": "4887:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "4870:3:18",
																"nodeType": "YulIdentifier",
																"src": "4870:3:18"
															},
															"nativeSrc": "4870:19:18",
															"nodeType": "YulFunctionCall",
															"src": "4870:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4858:3:18",
														"nodeType": "YulIdentifier",
														"src": "4858:3:18"
													},
													"nativeSrc": "4858:32:18",
													"nodeType": "YulFunctionCall",
													"src": "4858:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4830:6:18",
												"nodeType": "YulIdentifier",
												"src": "4830:6:18"
											},
											"nativeSrc": "4830:61:18",
											"nodeType": "YulFunctionCall",
											"src": "4830:61:18"
										},
										"nativeSrc": "4830:61:18",
										"nodeType": "YulExpressionStatement",
										"src": "4830:61:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "4408:489:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4558:9:18",
									"nodeType": "YulTypedName",
									"src": "4558:9:18",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "4569:6:18",
									"nodeType": "YulTypedName",
									"src": "4569:6:18",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "4577:6:18",
									"nodeType": "YulTypedName",
									"src": "4577:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "4585:6:18",
									"nodeType": "YulTypedName",
									"src": "4585:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4593:6:18",
									"nodeType": "YulTypedName",
									"src": "4593:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4601:6:18",
									"nodeType": "YulTypedName",
									"src": "4601:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4612:4:18",
									"nodeType": "YulTypedName",
									"src": "4612:4:18",
									"type": ""
								}
							],
							"src": "4408:489:18"
						},
						{
							"body": {
								"nativeSrc": "5003:102:18",
								"nodeType": "YulBlock",
								"src": "5003:102:18",
								"statements": [
									{
										"nativeSrc": "5013:26:18",
										"nodeType": "YulAssignment",
										"src": "5013:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5025:9:18",
													"nodeType": "YulIdentifier",
													"src": "5025:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5036:2:18",
													"nodeType": "YulLiteral",
													"src": "5036:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5021:3:18",
												"nodeType": "YulIdentifier",
												"src": "5021:3:18"
											},
											"nativeSrc": "5021:18:18",
											"nodeType": "YulFunctionCall",
											"src": "5021:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5013:4:18",
												"nodeType": "YulIdentifier",
												"src": "5013:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5055:9:18",
													"nodeType": "YulIdentifier",
													"src": "5055:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "5070:6:18",
															"nodeType": "YulIdentifier",
															"src": "5070:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5086:3:18",
																			"nodeType": "YulLiteral",
																			"src": "5086:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5091:1:18",
																			"nodeType": "YulLiteral",
																			"src": "5091:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "5082:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "5082:3:18"
																	},
																	"nativeSrc": "5082:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "5082:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "5095:1:18",
																	"nodeType": "YulLiteral",
																	"src": "5095:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "5078:3:18",
																"nodeType": "YulIdentifier",
																"src": "5078:3:18"
															},
															"nativeSrc": "5078:19:18",
															"nodeType": "YulFunctionCall",
															"src": "5078:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5066:3:18",
														"nodeType": "YulIdentifier",
														"src": "5066:3:18"
													},
													"nativeSrc": "5066:32:18",
													"nodeType": "YulFunctionCall",
													"src": "5066:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5048:6:18",
												"nodeType": "YulIdentifier",
												"src": "5048:6:18"
											},
											"nativeSrc": "5048:51:18",
											"nodeType": "YulFunctionCall",
											"src": "5048:51:18"
										},
										"nativeSrc": "5048:51:18",
										"nodeType": "YulExpressionStatement",
										"src": "5048:51:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "4902:203:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4972:9:18",
									"nodeType": "YulTypedName",
									"src": "4972:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4983:6:18",
									"nodeType": "YulTypedName",
									"src": "4983:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4994:4:18",
									"nodeType": "YulTypedName",
									"src": "4994:4:18",
									"type": ""
								}
							],
							"src": "4902:203:18"
						},
						{
							"body": {
								"nativeSrc": "5231:427:18",
								"nodeType": "YulBlock",
								"src": "5231:427:18",
								"statements": [
									{
										"nativeSrc": "5241:12:18",
										"nodeType": "YulVariableDeclaration",
										"src": "5241:12:18",
										"value": {
											"kind": "number",
											"nativeSrc": "5251:2:18",
											"nodeType": "YulLiteral",
											"src": "5251:2:18",
											"type": "",
											"value": "32"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "5245:2:18",
												"nodeType": "YulTypedName",
												"src": "5245:2:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5269:9:18",
													"nodeType": "YulIdentifier",
													"src": "5269:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5280:2:18",
													"nodeType": "YulLiteral",
													"src": "5280:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5262:6:18",
												"nodeType": "YulIdentifier",
												"src": "5262:6:18"
											},
											"nativeSrc": "5262:21:18",
											"nodeType": "YulFunctionCall",
											"src": "5262:21:18"
										},
										"nativeSrc": "5262:21:18",
										"nodeType": "YulExpressionStatement",
										"src": "5262:21:18"
									},
									{
										"nativeSrc": "5292:27:18",
										"nodeType": "YulVariableDeclaration",
										"src": "5292:27:18",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "5312:6:18",
													"nodeType": "YulIdentifier",
													"src": "5312:6:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "5306:5:18",
												"nodeType": "YulIdentifier",
												"src": "5306:5:18"
											},
											"nativeSrc": "5306:13:18",
											"nodeType": "YulFunctionCall",
											"src": "5306:13:18"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "5296:6:18",
												"nodeType": "YulTypedName",
												"src": "5296:6:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5339:9:18",
															"nodeType": "YulIdentifier",
															"src": "5339:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5350:2:18",
															"nodeType": "YulLiteral",
															"src": "5350:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5335:3:18",
														"nodeType": "YulIdentifier",
														"src": "5335:3:18"
													},
													"nativeSrc": "5335:18:18",
													"nodeType": "YulFunctionCall",
													"src": "5335:18:18"
												},
												{
													"name": "length",
													"nativeSrc": "5355:6:18",
													"nodeType": "YulIdentifier",
													"src": "5355:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5328:6:18",
												"nodeType": "YulIdentifier",
												"src": "5328:6:18"
											},
											"nativeSrc": "5328:34:18",
											"nodeType": "YulFunctionCall",
											"src": "5328:34:18"
										},
										"nativeSrc": "5328:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "5328:34:18"
									},
									{
										"nativeSrc": "5371:10:18",
										"nodeType": "YulVariableDeclaration",
										"src": "5371:10:18",
										"value": {
											"kind": "number",
											"nativeSrc": "5380:1:18",
											"nodeType": "YulLiteral",
											"src": "5380:1:18",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "5375:1:18",
												"nodeType": "YulTypedName",
												"src": "5375:1:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5440:90:18",
											"nodeType": "YulBlock",
											"src": "5440:90:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5469:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5469:9:18"
																			},
																			{
																				"name": "i",
																				"nativeSrc": "5480:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "5480:1:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5465:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5465:3:18"
																		},
																		"nativeSrc": "5465:17:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5465:17:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5484:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5484:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5461:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:18"
																},
																"nativeSrc": "5461:26:18",
																"nodeType": "YulFunctionCall",
																"src": "5461:26:18"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "5503:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "5503:6:18"
																					},
																					{
																						"name": "i",
																						"nativeSrc": "5511:1:18",
																						"nodeType": "YulIdentifier",
																						"src": "5511:1:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5499:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "5499:3:18"
																				},
																				"nativeSrc": "5499:14:18",
																				"nodeType": "YulFunctionCall",
																				"src": "5499:14:18"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "5515:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "5515:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5495:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5495:3:18"
																		},
																		"nativeSrc": "5495:23:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5495:23:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5489:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "5489:5:18"
																},
																"nativeSrc": "5489:30:18",
																"nodeType": "YulFunctionCall",
																"src": "5489:30:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "5454:6:18",
															"nodeType": "YulIdentifier",
															"src": "5454:6:18"
														},
														"nativeSrc": "5454:66:18",
														"nodeType": "YulFunctionCall",
														"src": "5454:66:18"
													},
													"nativeSrc": "5454:66:18",
													"nodeType": "YulExpressionStatement",
													"src": "5454:66:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "5401:1:18",
													"nodeType": "YulIdentifier",
													"src": "5401:1:18"
												},
												{
													"name": "length",
													"nativeSrc": "5404:6:18",
													"nodeType": "YulIdentifier",
													"src": "5404:6:18"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "5398:2:18",
												"nodeType": "YulIdentifier",
												"src": "5398:2:18"
											},
											"nativeSrc": "5398:13:18",
											"nodeType": "YulFunctionCall",
											"src": "5398:13:18"
										},
										"nativeSrc": "5390:140:18",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "5412:19:18",
											"nodeType": "YulBlock",
											"src": "5412:19:18",
											"statements": [
												{
													"nativeSrc": "5414:15:18",
													"nodeType": "YulAssignment",
													"src": "5414:15:18",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "5423:1:18",
																"nodeType": "YulIdentifier",
																"src": "5423:1:18"
															},
															{
																"name": "_1",
																"nativeSrc": "5426:2:18",
																"nodeType": "YulIdentifier",
																"src": "5426:2:18"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5419:3:18",
															"nodeType": "YulIdentifier",
															"src": "5419:3:18"
														},
														"nativeSrc": "5419:10:18",
														"nodeType": "YulFunctionCall",
														"src": "5419:10:18"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "5414:1:18",
															"nodeType": "YulIdentifier",
															"src": "5414:1:18"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "5394:3:18",
											"nodeType": "YulBlock",
											"src": "5394:3:18",
											"statements": []
										},
										"src": "5390:140:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5554:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "5554:9:18"
																},
																{
																	"name": "length",
																	"nativeSrc": "5565:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5565:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5550:3:18",
																"nodeType": "YulIdentifier",
																"src": "5550:3:18"
															},
															"nativeSrc": "5550:22:18",
															"nodeType": "YulFunctionCall",
															"src": "5550:22:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5574:2:18",
															"nodeType": "YulLiteral",
															"src": "5574:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5546:3:18",
														"nodeType": "YulIdentifier",
														"src": "5546:3:18"
													},
													"nativeSrc": "5546:31:18",
													"nodeType": "YulFunctionCall",
													"src": "5546:31:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5579:1:18",
													"nodeType": "YulLiteral",
													"src": "5579:1:18",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5539:6:18",
												"nodeType": "YulIdentifier",
												"src": "5539:6:18"
											},
											"nativeSrc": "5539:42:18",
											"nodeType": "YulFunctionCall",
											"src": "5539:42:18"
										},
										"nativeSrc": "5539:42:18",
										"nodeType": "YulExpressionStatement",
										"src": "5539:42:18"
									},
									{
										"nativeSrc": "5590:62:18",
										"nodeType": "YulAssignment",
										"src": "5590:62:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5606:9:18",
															"nodeType": "YulIdentifier",
															"src": "5606:9:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "5625:6:18",
																			"nodeType": "YulIdentifier",
																			"src": "5625:6:18"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5633:2:18",
																			"nodeType": "YulLiteral",
																			"src": "5633:2:18",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "5621:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "5621:3:18"
																	},
																	"nativeSrc": "5621:15:18",
																	"nodeType": "YulFunctionCall",
																	"src": "5621:15:18"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5642:2:18",
																			"nodeType": "YulLiteral",
																			"src": "5642:2:18",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "5638:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "5638:3:18"
																	},
																	"nativeSrc": "5638:7:18",
																	"nodeType": "YulFunctionCall",
																	"src": "5638:7:18"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "5617:3:18",
																"nodeType": "YulIdentifier",
																"src": "5617:3:18"
															},
															"nativeSrc": "5617:29:18",
															"nodeType": "YulFunctionCall",
															"src": "5617:29:18"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5602:3:18",
														"nodeType": "YulIdentifier",
														"src": "5602:3:18"
													},
													"nativeSrc": "5602:45:18",
													"nodeType": "YulFunctionCall",
													"src": "5602:45:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5649:2:18",
													"nodeType": "YulLiteral",
													"src": "5649:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5598:3:18",
												"nodeType": "YulIdentifier",
												"src": "5598:3:18"
											},
											"nativeSrc": "5598:54:18",
											"nodeType": "YulFunctionCall",
											"src": "5598:54:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5590:4:18",
												"nodeType": "YulIdentifier",
												"src": "5590:4:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "5110:548:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5200:9:18",
									"nodeType": "YulTypedName",
									"src": "5200:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5211:6:18",
									"nodeType": "YulTypedName",
									"src": "5211:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5222:4:18",
									"nodeType": "YulTypedName",
									"src": "5222:4:18",
									"type": ""
								}
							],
							"src": "5110:548:18"
						},
						{
							"body": {
								"nativeSrc": "5757:203:18",
								"nodeType": "YulBlock",
								"src": "5757:203:18",
								"statements": [
									{
										"nativeSrc": "5767:26:18",
										"nodeType": "YulVariableDeclaration",
										"src": "5767:26:18",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "5787:5:18",
													"nodeType": "YulIdentifier",
													"src": "5787:5:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "5781:5:18",
												"nodeType": "YulIdentifier",
												"src": "5781:5:18"
											},
											"nativeSrc": "5781:12:18",
											"nodeType": "YulFunctionCall",
											"src": "5781:12:18"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "5771:6:18",
												"nodeType": "YulTypedName",
												"src": "5771:6:18",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "5802:32:18",
										"nodeType": "YulAssignment",
										"src": "5802:32:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "array",
															"nativeSrc": "5821:5:18",
															"nodeType": "YulIdentifier",
															"src": "5821:5:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5828:4:18",
															"nodeType": "YulLiteral",
															"src": "5828:4:18",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5817:3:18",
														"nodeType": "YulIdentifier",
														"src": "5817:3:18"
													},
													"nativeSrc": "5817:16:18",
													"nodeType": "YulFunctionCall",
													"src": "5817:16:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "5811:5:18",
												"nodeType": "YulIdentifier",
												"src": "5811:5:18"
											},
											"nativeSrc": "5811:23:18",
											"nodeType": "YulFunctionCall",
											"src": "5811:23:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "5802:5:18",
												"nodeType": "YulIdentifier",
												"src": "5802:5:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5871:83:18",
											"nodeType": "YulBlock",
											"src": "5871:83:18",
											"statements": [
												{
													"nativeSrc": "5885:59:18",
													"nodeType": "YulAssignment",
													"src": "5885:59:18",
													"value": {
														"arguments": [
															{
																"name": "value",
																"nativeSrc": "5898:5:18",
																"nodeType": "YulIdentifier",
																"src": "5898:5:18"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5913:1:18",
																				"nodeType": "YulLiteral",
																				"src": "5913:1:18",
																				"type": "",
																				"value": "3"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5920:4:18",
																						"nodeType": "YulLiteral",
																						"src": "5920:4:18",
																						"type": "",
																						"value": "0x20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "5926:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "5926:6:18"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5916:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "5916:3:18"
																				},
																				"nativeSrc": "5916:17:18",
																				"nodeType": "YulFunctionCall",
																				"src": "5916:17:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5909:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5909:3:18"
																		},
																		"nativeSrc": "5909:25:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5909:25:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5940:1:18",
																				"nodeType": "YulLiteral",
																				"src": "5940:1:18",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "5936:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5936:3:18"
																		},
																		"nativeSrc": "5936:6:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5936:6:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "5905:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "5905:3:18"
																},
																"nativeSrc": "5905:38:18",
																"nodeType": "YulFunctionCall",
																"src": "5905:38:18"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "5894:3:18",
															"nodeType": "YulIdentifier",
															"src": "5894:3:18"
														},
														"nativeSrc": "5894:50:18",
														"nodeType": "YulFunctionCall",
														"src": "5894:50:18"
													},
													"variableNames": [
														{
															"name": "value",
															"nativeSrc": "5885:5:18",
															"nodeType": "YulIdentifier",
															"src": "5885:5:18"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "5849:6:18",
													"nodeType": "YulIdentifier",
													"src": "5849:6:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5857:4:18",
													"nodeType": "YulLiteral",
													"src": "5857:4:18",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "5846:2:18",
												"nodeType": "YulIdentifier",
												"src": "5846:2:18"
											},
											"nativeSrc": "5846:16:18",
											"nodeType": "YulFunctionCall",
											"src": "5846:16:18"
										},
										"nativeSrc": "5843:111:18",
										"nodeType": "YulIf",
										"src": "5843:111:18"
									}
								]
							},
							"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
							"nativeSrc": "5663:297:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "5737:5:18",
									"nodeType": "YulTypedName",
									"src": "5737:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "5747:5:18",
									"nodeType": "YulTypedName",
									"src": "5747:5:18",
									"type": ""
								}
							],
							"src": "5663:297:18"
						},
						{
							"body": {
								"nativeSrc": "6013:77:18",
								"nodeType": "YulBlock",
								"src": "6013:77:18",
								"statements": [
									{
										"nativeSrc": "6023:16:18",
										"nodeType": "YulAssignment",
										"src": "6023:16:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6034:1:18",
													"nodeType": "YulIdentifier",
													"src": "6034:1:18"
												},
												{
													"name": "y",
													"nativeSrc": "6037:1:18",
													"nodeType": "YulIdentifier",
													"src": "6037:1:18"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6030:3:18",
												"nodeType": "YulIdentifier",
												"src": "6030:3:18"
											},
											"nativeSrc": "6030:9:18",
											"nodeType": "YulFunctionCall",
											"src": "6030:9:18"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "6023:3:18",
												"nodeType": "YulIdentifier",
												"src": "6023:3:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6062:22:18",
											"nodeType": "YulBlock",
											"src": "6062:22:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "6064:16:18",
															"nodeType": "YulIdentifier",
															"src": "6064:16:18"
														},
														"nativeSrc": "6064:18:18",
														"nodeType": "YulFunctionCall",
														"src": "6064:18:18"
													},
													"nativeSrc": "6064:18:18",
													"nodeType": "YulExpressionStatement",
													"src": "6064:18:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6054:1:18",
													"nodeType": "YulIdentifier",
													"src": "6054:1:18"
												},
												{
													"name": "sum",
													"nativeSrc": "6057:3:18",
													"nodeType": "YulIdentifier",
													"src": "6057:3:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "6051:2:18",
												"nodeType": "YulIdentifier",
												"src": "6051:2:18"
											},
											"nativeSrc": "6051:10:18",
											"nodeType": "YulFunctionCall",
											"src": "6051:10:18"
										},
										"nativeSrc": "6048:36:18",
										"nodeType": "YulIf",
										"src": "6048:36:18"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "5965:125:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "5996:1:18",
									"nodeType": "YulTypedName",
									"src": "5996:1:18",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "5999:1:18",
									"nodeType": "YulTypedName",
									"src": "5999:1:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "6005:3:18",
									"nodeType": "YulTypedName",
									"src": "6005:3:18",
									"type": ""
								}
							],
							"src": "5965:125:18"
						},
						{
							"body": {
								"nativeSrc": "6252:188:18",
								"nodeType": "YulBlock",
								"src": "6252:188:18",
								"statements": [
									{
										"nativeSrc": "6262:26:18",
										"nodeType": "YulAssignment",
										"src": "6262:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6274:9:18",
													"nodeType": "YulIdentifier",
													"src": "6274:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6285:2:18",
													"nodeType": "YulLiteral",
													"src": "6285:2:18",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6270:3:18",
												"nodeType": "YulIdentifier",
												"src": "6270:3:18"
											},
											"nativeSrc": "6270:18:18",
											"nodeType": "YulFunctionCall",
											"src": "6270:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6262:4:18",
												"nodeType": "YulIdentifier",
												"src": "6262:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6304:9:18",
													"nodeType": "YulIdentifier",
													"src": "6304:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "6319:6:18",
															"nodeType": "YulIdentifier",
															"src": "6319:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "6335:3:18",
																			"nodeType": "YulLiteral",
																			"src": "6335:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "6340:1:18",
																			"nodeType": "YulLiteral",
																			"src": "6340:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "6331:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "6331:3:18"
																	},
																	"nativeSrc": "6331:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "6331:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6344:1:18",
																	"nodeType": "YulLiteral",
																	"src": "6344:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "6327:3:18",
																"nodeType": "YulIdentifier",
																"src": "6327:3:18"
															},
															"nativeSrc": "6327:19:18",
															"nodeType": "YulFunctionCall",
															"src": "6327:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "6315:3:18",
														"nodeType": "YulIdentifier",
														"src": "6315:3:18"
													},
													"nativeSrc": "6315:32:18",
													"nodeType": "YulFunctionCall",
													"src": "6315:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6297:6:18",
												"nodeType": "YulIdentifier",
												"src": "6297:6:18"
											},
											"nativeSrc": "6297:51:18",
											"nodeType": "YulFunctionCall",
											"src": "6297:51:18"
										},
										"nativeSrc": "6297:51:18",
										"nodeType": "YulExpressionStatement",
										"src": "6297:51:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6368:9:18",
															"nodeType": "YulIdentifier",
															"src": "6368:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "6379:2:18",
															"nodeType": "YulLiteral",
															"src": "6379:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6364:3:18",
														"nodeType": "YulIdentifier",
														"src": "6364:3:18"
													},
													"nativeSrc": "6364:18:18",
													"nodeType": "YulFunctionCall",
													"src": "6364:18:18"
												},
												{
													"name": "value1",
													"nativeSrc": "6384:6:18",
													"nodeType": "YulIdentifier",
													"src": "6384:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6357:6:18",
												"nodeType": "YulIdentifier",
												"src": "6357:6:18"
											},
											"nativeSrc": "6357:34:18",
											"nodeType": "YulFunctionCall",
											"src": "6357:34:18"
										},
										"nativeSrc": "6357:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "6357:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6411:9:18",
															"nodeType": "YulIdentifier",
															"src": "6411:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "6422:2:18",
															"nodeType": "YulLiteral",
															"src": "6422:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6407:3:18",
														"nodeType": "YulIdentifier",
														"src": "6407:3:18"
													},
													"nativeSrc": "6407:18:18",
													"nodeType": "YulFunctionCall",
													"src": "6407:18:18"
												},
												{
													"name": "value2",
													"nativeSrc": "6427:6:18",
													"nodeType": "YulIdentifier",
													"src": "6427:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6400:6:18",
												"nodeType": "YulIdentifier",
												"src": "6400:6:18"
											},
											"nativeSrc": "6400:34:18",
											"nodeType": "YulFunctionCall",
											"src": "6400:34:18"
										},
										"nativeSrc": "6400:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "6400:34:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "6095:345:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6205:9:18",
									"nodeType": "YulTypedName",
									"src": "6205:9:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6216:6:18",
									"nodeType": "YulTypedName",
									"src": "6216:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6224:6:18",
									"nodeType": "YulTypedName",
									"src": "6224:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6232:6:18",
									"nodeType": "YulTypedName",
									"src": "6232:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6243:4:18",
									"nodeType": "YulTypedName",
									"src": "6243:4:18",
									"type": ""
								}
							],
							"src": "6095:345:18"
						},
						{
							"body": {
								"nativeSrc": "6546:76:18",
								"nodeType": "YulBlock",
								"src": "6546:76:18",
								"statements": [
									{
										"nativeSrc": "6556:26:18",
										"nodeType": "YulAssignment",
										"src": "6556:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6568:9:18",
													"nodeType": "YulIdentifier",
													"src": "6568:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6579:2:18",
													"nodeType": "YulLiteral",
													"src": "6579:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6564:3:18",
												"nodeType": "YulIdentifier",
												"src": "6564:3:18"
											},
											"nativeSrc": "6564:18:18",
											"nodeType": "YulFunctionCall",
											"src": "6564:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6556:4:18",
												"nodeType": "YulIdentifier",
												"src": "6556:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6598:9:18",
													"nodeType": "YulIdentifier",
													"src": "6598:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "6609:6:18",
													"nodeType": "YulIdentifier",
													"src": "6609:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6591:6:18",
												"nodeType": "YulIdentifier",
												"src": "6591:6:18"
											},
											"nativeSrc": "6591:25:18",
											"nodeType": "YulFunctionCall",
											"src": "6591:25:18"
										},
										"nativeSrc": "6591:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "6591:25:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "6445:177:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6515:9:18",
									"nodeType": "YulTypedName",
									"src": "6515:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6526:6:18",
									"nodeType": "YulTypedName",
									"src": "6526:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6537:4:18",
									"nodeType": "YulTypedName",
									"src": "6537:4:18",
									"type": ""
								}
							],
							"src": "6445:177:18"
						}
					]
				},
				"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := 1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
				"id": 18,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "61016060405234801561001157600080fd5b506040518060400160405280600481526020016304c414d560e41b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600481526020016304c414d560e41b8152506040518060400160405280600381526020016204c4d560ec1b815250816003908161009291906103f9565b50600461009f82826103f9565b506100af9150839050600561017e565b610120526100be81600661017e565b61014052815160208084019190912060e052815190820120610100524660a05261014b60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c05250610179336101656012600a6105b2565b610174906405d21dba006105c8565b6101b1565b610665565b600060208351101561019a57610193836101f0565b90506101ab565b816101a584826103f9565b5060ff90505b92915050565b6001600160a01b0382166101e05760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6101ec6000838361022e565b5050565b600080829050601f8151111561021b578260405163305a27a960e01b81526004016101d791906105df565b80516102268261062e565b179392505050565b6001600160a01b03831661025957806002600082825461024e9190610652565b909155506102cb9050565b6001600160a01b038316600090815260208190526040902054818110156102ac5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016101d7565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166102e757600280548290039055610306565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161034b91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061038257607f821691505b6020821081036103a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156103f4576000816000526020600020601f850160051c810160208610156103d15750805b601f850160051c820191505b818110156103f0578281556001016103dd565b5050505b505050565b81516001600160401b0381111561041257610412610358565b61042681610420845461036e565b846103a8565b602080601f83116001811461045b57600084156104435750858301515b600019600386901b1c1916600185901b1785556103f0565b600085815260208120601f198616915b8281101561048a5788860151825594840194600190910190840161046b565b50858210156104a85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156105095781600019048211156104ef576104ef6104b8565b808516156104fc57918102915b93841c93908002906104d3565b509250929050565b600082610520575060016101ab565b8161052d575060006101ab565b8160018114610543576002811461054d57610569565b60019150506101ab565b60ff84111561055e5761055e6104b8565b50506001821b6101ab565b5060208310610133831016604e8410600b841016171561058c575081810a6101ab565b61059683836104ce565b80600019048211156105aa576105aa6104b8565b029392505050565b60006105c160ff841683610511565b9392505050565b80820281158282048414176101ab576101ab6104b8565b60006020808352835180602085015260005b8181101561060d578581018301518582016040015282016105f1565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156103a25760001960209190910360031b1b16919050565b808201808211156101ab576101ab6104b8565b60805160a05160c05160e051610100516101205161014051610eff6106bf60003960006106fe015260006106d10152600061067901526000610651015260006105ac015260006105d6015260006106000152610eff6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101a8578063a9059cbb146101b0578063d505accf146101c3578063dd62ed3e146101d857600080fd5b806370a08231146101515780637ecebe001461017a57806384b0196e1461018d57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633644e51514610149575b600080fd5b6100dc610211565b6040516100e99190610c62565b60405180910390f35b610105610100366004610c98565b6102a3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610cc2565b6102bd565b604051601281526020016100e9565b6101196102e1565b61011961015f366004610cfe565b6001600160a01b031660009081526020819052604090205490565b610119610188366004610cfe565b6102f0565b61019561030e565b6040516100e99796959493929190610d19565b6100dc610354565b6101056101be366004610c98565b610363565b6101d66101d1366004610db2565b610371565b005b6101196101e6366004610e25565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022090610e58565b80601f016020809104026020016040519081016040528092919081815260200182805461024c90610e58565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050905090565b6000336102b18185856104b0565b60019150505b92915050565b6000336102cb8582856104c2565b6102d6858585610540565b506001949350505050565b60006102eb61059f565b905090565b6001600160a01b0381166000908152600760205260408120546102b7565b6000606080600080600060606103226106ca565b61032a6106f7565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461022090610e58565b6000336102b1818585610540565b8342111561039a5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886103e78c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061044282610724565b9050600061045282878787610751565b9050896001600160a01b0316816001600160a01b031614610499576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610391565b6104a48a8a8a6104b0565b50505050505050505050565b6104bd838383600161077f565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461053a578181101561052b57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610391565b61053a8484848403600061077f565b50505050565b6001600160a01b03831661056a57604051634b637e8f60e11b815260006004820152602401610391565b6001600160a01b0382166105945760405163ec442f0560e01b815260006004820152602401610391565b6104bd838383610854565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156105f857507f000000000000000000000000000000000000000000000000000000000000000046145b1561062257507f000000000000000000000000000000000000000000000000000000000000000090565b6102eb604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60606102eb7f0000000000000000000000000000000000000000000000000000000000000000600561097e565b60606102eb7f0000000000000000000000000000000000000000000000000000000000000000600661097e565b60006102b761073161059f565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061076388888888610a29565b9250925092506107738282610af8565b50909695505050505050565b6001600160a01b0384166107a95760405163e602df0560e01b815260006004820152602401610391565b6001600160a01b0383166107d357604051634a1406b160e11b815260006004820152602401610391565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561053a57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161084691815260200190565b60405180910390a350505050565b6001600160a01b03831661087f5780600260008282546108749190610e92565b909155506108f19050565b6001600160a01b038316600090815260208190526040902054818110156108d25760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610391565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661090d5760028054829003905561092c565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161097191815260200190565b60405180910390a3505050565b606060ff83146109985761099183610bb5565b90506102b7565b8180546109a490610e58565b80601f01602080910402602001604051908101604052809291908181526020018280546109d090610e58565b8015610a1d5780601f106109f257610100808354040283529160200191610a1d565b820191906000526020600020905b815481529060010190602001808311610a0057829003601f168201915b505050505090506102b7565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610a645750600091506003905082610aee565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610ab8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ae457506000925060019150829050610aee565b9250600091508190505b9450945094915050565b6000826003811115610b0c57610b0c610eb3565b03610b15575050565b6001826003811115610b2957610b29610eb3565b03610b475760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610b5b57610b5b610eb3565b03610b7c5760405163fce698f760e01b815260048101829052602401610391565b6003826003811115610b9057610b90610eb3565b03610bb1576040516335e2f38360e21b815260048101829052602401610391565b5050565b60606000610bc283610bf4565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156102b757604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b81811015610c4257602081850181015186830182015201610c26565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610c756020830184610c1c565b9392505050565b80356001600160a01b0381168114610c9357600080fd5b919050565b60008060408385031215610cab57600080fd5b610cb483610c7c565b946020939093013593505050565b600080600060608486031215610cd757600080fd5b610ce084610c7c565b9250610cee60208501610c7c565b9150604084013590509250925092565b600060208284031215610d1057600080fd5b610c7582610c7c565b60ff60f81b881681526000602060e06020840152610d3a60e084018a610c1c565b8381036040850152610d4c818a610c1c565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b81811015610da057835183529284019291840191600101610d84565b50909c9b505050505050505050505050565b600080600080600080600060e0888a031215610dcd57600080fd5b610dd688610c7c565b9650610de460208901610c7c565b95506040880135945060608801359350608088013560ff81168114610e0857600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e3857600080fd5b610e4183610c7c565b9150610e4f60208401610c7c565b90509250929050565b600181811c90821680610e6c57607f821691505b602082108103610e8c57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102b757634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212209fcada7485cfd0367975e363f341cc51d41c08eba8101e259d7b0fa6e054291764736f6c63430008190033",
		"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x4C414D5 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x4C414D5 PUSH1 0xE4 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4C4D5 PUSH1 0xEC SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x92 SWAP2 SWAP1 PUSH2 0x3F9 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x9F DUP3 DUP3 PUSH2 0x3F9 JUMP JUMPDEST POP PUSH2 0xAF SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0xBE DUP2 PUSH1 0x6 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x14B PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH2 0x179 CALLER PUSH2 0x165 PUSH1 0x12 PUSH1 0xA PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x174 SWAP1 PUSH5 0x5D21DBA00 PUSH2 0x5C8 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x19A JUMPI PUSH2 0x193 DUP4 PUSH2 0x1F0 JUMP JUMPDEST SWAP1 POP PUSH2 0x1AB JUMP JUMPDEST DUP2 PUSH2 0x1A5 DUP5 DUP3 PUSH2 0x3F9 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EC PUSH1 0x0 DUP4 DUP4 PUSH2 0x22E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x21B JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x5DF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x226 DUP3 PUSH2 0x62E JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x259 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x652 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2CB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2AC JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2E7 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x306 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x34B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x382 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3A2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x3D1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F0 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3DD JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x412 JUMPI PUSH2 0x412 PUSH2 0x358 JUMP JUMPDEST PUSH2 0x426 DUP2 PUSH2 0x420 DUP5 SLOAD PUSH2 0x36E JUMP JUMPDEST DUP5 PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x45B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x443 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x48A JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x46B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x4A8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x509 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x4EF JUMPI PUSH2 0x4EF PUSH2 0x4B8 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x4FC JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x4D3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x520 JUMPI POP PUSH1 0x1 PUSH2 0x1AB JUMP JUMPDEST DUP2 PUSH2 0x52D JUMPI POP PUSH1 0x0 PUSH2 0x1AB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x543 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x54D JUMPI PUSH2 0x569 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1AB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x55E JUMPI PUSH2 0x55E PUSH2 0x4B8 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x1AB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x58C JUMPI POP DUP2 DUP2 EXP PUSH2 0x1AB JUMP JUMPDEST PUSH2 0x596 DUP4 DUP4 PUSH2 0x4CE JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x5AA JUMPI PUSH2 0x5AA PUSH2 0x4B8 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C1 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x511 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x1AB JUMPI PUSH2 0x1AB PUSH2 0x4B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x60D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x5F1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1AB JUMPI PUSH2 0x1AB PUSH2 0x4B8 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0xEFF PUSH2 0x6BF PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x6FE ADD MSTORE PUSH1 0x0 PUSH2 0x6D1 ADD MSTORE PUSH1 0x0 PUSH2 0x679 ADD MSTORE PUSH1 0x0 PUSH2 0x651 ADD MSTORE PUSH1 0x0 PUSH2 0x5AC ADD MSTORE PUSH1 0x0 PUSH2 0x5D6 ADD MSTORE PUSH1 0x0 PUSH2 0x600 ADD MSTORE PUSH2 0xEFF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x149 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x211 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0xCC2 JUMP JUMPDEST PUSH2 0x2BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x2E1 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xCFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST PUSH2 0x195 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD19 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x354 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDB2 JUMP JUMPDEST PUSH2 0x371 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x119 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x220 SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x24C SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x299 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x26E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x299 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x27C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B1 DUP2 DUP6 DUP6 PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2CB DUP6 DUP3 DUP6 PUSH2 0x4C2 JUMP JUMPDEST PUSH2 0x2D6 DUP6 DUP6 DUP6 PUSH2 0x540 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB PUSH2 0x59F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0x322 PUSH2 0x6CA JUMP JUMPDEST PUSH2 0x32A PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x220 SWAP1 PUSH2 0xE58 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B1 DUP2 DUP6 DUP6 PUSH2 0x540 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x3E7 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x442 DUP3 PUSH2 0x724 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x452 DUP3 DUP8 DUP8 DUP8 PUSH2 0x751 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x499 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x4A4 DUP11 DUP11 DUP11 PUSH2 0x4B0 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4BD DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x77F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x53A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52B JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x53A DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x77F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x56A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x594 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x4BD DUP4 DUP4 DUP4 PUSH2 0x854 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x5F8 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x622 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EB PUSH32 0x0 PUSH1 0x5 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EB PUSH32 0x0 PUSH1 0x6 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7 PUSH2 0x731 PUSH2 0x59F JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x763 DUP9 DUP9 DUP9 DUP9 PUSH2 0xA29 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x773 DUP3 DUP3 PUSH2 0xAF8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x53A JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x846 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x87F JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x874 SWAP2 SWAP1 PUSH2 0xE92 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x8F1 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x90D JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x971 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0x998 JUMPI PUSH2 0x991 DUP4 PUSH2 0xBB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B7 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x9A4 SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9D0 SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA1D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA1D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA00 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xA64 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xAEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAE4 JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xAEE JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB0C JUMPI PUSH2 0xB0C PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xB15 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB29 JUMPI PUSH2 0xB29 PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB5B JUMPI PUSH2 0xB5B PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xB7C JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB90 JUMPI PUSH2 0xB90 PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xBB1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xBC2 DUP4 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC42 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xC26 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC75 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC1C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB4 DUP4 PUSH2 0xC7C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCE0 DUP5 PUSH2 0xC7C JUMP JUMPDEST SWAP3 POP PUSH2 0xCEE PUSH1 0x20 DUP6 ADD PUSH2 0xC7C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC75 DUP3 PUSH2 0xC7C JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xD3A PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0xC1C JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xD4C DUP2 DUP11 PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA0 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xD84 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xDCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD6 DUP9 PUSH2 0xC7C JUMP JUMPDEST SWAP7 POP PUSH2 0xDE4 PUSH1 0x20 DUP10 ADD PUSH2 0xC7C JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE41 DUP4 PUSH2 0xC7C JUMP JUMPDEST SWAP2 POP PUSH2 0xE4F PUSH1 0x20 DUP5 ADD PUSH2 0xC7C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xE6C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE8C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2B7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 0xCA 0xDA PUSH21 0x85CFD0367975E363F341CC51D41C08EBA8101E259D PUSH28 0xFA6E054291764736F6C634300081900330000000000000000000000 ",
		"sourceMap": "249:165:17:-:0;;;291:121;;;;;;;;;;1574:52:4;;;;;;;;;;;;;-1:-1:-1;;;1574:52:4;;;1613:4;3328:431:13;;;;;;;;;;;;;-1:-1:-1;;;3328:431:13;;;1896:113:2;;;;;;;;;;;;;-1:-1:-1;;;1896:113:2;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:2;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:2;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;3401:45:13;;-1:-1:-1;3401:4:13;;-1:-1:-1;3432:13:13;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;4667:25:18;4708:18;;;4701:34;;;;4751:18;;;4744:34;4255:13:13;4794:18:18;;;4787:34;4278:4:13;4837:19:18;;;4830:61;4168:7:13;;4639:19:18;;4204:80:13;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:13;3725:27;;-1:-1:-1;356:49:17::2;362:10;388:16;3075:2:2::0;388::17::2;:16;:::i;:::-;374:30;::::0;:11:::2;:30;:::i;:::-;356:5;:49::i;:::-;249:165:::0;;2914:340:9;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:9;;-1:-1:-1;3033:215:9;2914:340;;;;:::o;7721:208:2:-;-1:-1:-1;;;;;7791:21:2;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:2;;7864:1;7835:32;;;5048:51:18;5021:18;;7835:32:2;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;1708:286:9:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:9;;;;;;;;:::i;1836:72::-;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:9:o;6271:1107:2:-;-1:-1:-1;;;;;6360:18:2;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:2;;-1:-1:-1;6356:540:2;;-1:-1:-1;;;;;6570:15:2;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:2;;-1:-1:-1;;;;;6315:32:18;;6649:50:2;;;6297:51:18;6364:18;;;6357:34;;;6407:18;;;6400:34;;;6270:18;;6649:50:2;6095:345:18;6599:115:2;-1:-1:-1;;;;;6834:15:2;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:2;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:2;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:2;7355:4;-1:-1:-1;;;;;7346:25:2;;7365:5;7346:25;;;;6591::18;;6579:2;6564:18;;6445:177;7346:25:2;;;;;;;;6271:1107;;;:::o;14:127:18:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:543::-;759:2;754:3;751:11;748:446;;;795:1;819:5;816:1;809:16;863:4;860:1;850:18;933:2;921:10;917:19;914:1;910:27;904:4;900:38;969:4;957:10;954:20;951:47;;;-1:-1:-1;992:4:18;951:47;1047:2;1042:3;1038:12;1035:1;1031:20;1025:4;1021:31;1011:41;;1102:82;1120:2;1113:5;1110:13;1102:82;;;1165:17;;;1146:1;1135:13;1102:82;;;1106:3;;;748:446;657:543;;;:::o;1376:1345::-;1496:10;;-1:-1:-1;;;;;1518:30:18;;1515:56;;;1551:18;;:::i;:::-;1580:97;1670:6;1630:38;1662:4;1656:11;1630:38;:::i;:::-;1624:4;1580:97;:::i;:::-;1732:4;;1789:2;1778:14;;1806:1;1801:663;;;;2508:1;2525:6;2522:89;;;-1:-1:-1;2577:19:18;;;2571:26;2522:89;-1:-1:-1;;1333:1:18;1329:11;;;1325:24;1321:29;1311:40;1357:1;1353:11;;;1308:57;2624:81;;1771:944;;1801:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1837:20:18;;;1955:236;1969:7;1966:1;1963:14;1955:236;;;2058:19;;;2052:26;2037:42;;2150:27;;;;2118:1;2106:14;;;;1985:19;;1955:236;;;1959:3;2219:6;2210:7;2207:19;2204:201;;;2280:19;;;2274:26;-1:-1:-1;;2363:1:18;2359:14;;;2375:3;2355:24;2351:37;2347:42;2332:58;2317:74;;2204:201;-1:-1:-1;;;;;2451:1:18;2435:14;;;2431:22;2418:36;;-1:-1:-1;1376:1345:18:o;2726:127::-;2787:10;2782:3;2778:20;2775:1;2768:31;2818:4;2815:1;2808:15;2842:4;2839:1;2832:15;2858:416;2947:1;2984:5;2947:1;2998:270;3019:7;3009:8;3006:21;2998:270;;;3078:4;3074:1;3070:6;3066:17;3060:4;3057:27;3054:53;;;3087:18;;:::i;:::-;3137:7;3127:8;3123:22;3120:55;;;3157:16;;;;3120:55;3236:22;;;;3196:15;;;;2998:270;;;3002:3;2858:416;;;;;:::o;3279:806::-;3328:5;3358:8;3348:80;;-1:-1:-1;3399:1:18;3413:5;;3348:80;3447:4;3437:76;;-1:-1:-1;3484:1:18;3498:5;;3437:76;3529:4;3547:1;3542:59;;;;3615:1;3610:130;;;;3522:218;;3542:59;3572:1;3563:10;;3586:5;;;3610:130;3647:3;3637:8;3634:17;3631:43;;;3654:18;;:::i;:::-;-1:-1:-1;;3710:1:18;3696:16;;3725:5;;3522:218;;3824:2;3814:8;3811:16;3805:3;3799:4;3796:13;3792:36;3786:2;3776:8;3773:16;3768:2;3762:4;3759:12;3755:35;3752:77;3749:159;;;-1:-1:-1;3861:19:18;;;3893:5;;3749:159;3940:34;3965:8;3959:4;3940:34;:::i;:::-;4010:6;4006:1;4002:6;3998:19;3989:7;3986:32;3983:58;;;4021:18;;:::i;:::-;4059:20;;3279:806;-1:-1:-1;;;3279:806:18:o;4090:140::-;4148:5;4177:47;4218:4;4208:8;4204:19;4198:4;4177:47;:::i;:::-;4168:56;4090:140;-1:-1:-1;;;4090:140:18:o;4235:168::-;4308:9;;;4339;;4356:15;;;4350:22;;4336:37;4326:71;;4377:18;;:::i;5110:548::-;5222:4;5251:2;5280;5269:9;5262:21;5312:6;5306:13;5355:6;5350:2;5339:9;5335:18;5328:34;5380:1;5390:140;5404:6;5401:1;5398:13;5390:140;;;5499:14;;;5495:23;;5489:30;5465:17;;;5484:2;5461:26;5454:66;5419:10;;5390:140;;;5394:3;5579:1;5574:2;5565:6;5554:9;5550:22;5546:31;5539:42;5649:2;5642;5638:7;5633:2;5625:6;5621:15;5617:29;5606:9;5602:45;5598:54;5590:62;;;;5110:548;;;;:::o;5663:297::-;5781:12;;5828:4;5817:16;;;5811:23;;5781:12;5846:16;;5843:111;;;-1:-1:-1;;5920:4:18;5916:17;;;;5913:1;5909:25;5905:38;5894:50;;5663:297;-1:-1:-1;5663:297:18:o;5965:125::-;6030:9;;;6051:10;;;6048:36;;;6064:18;;:::i;6445:177::-;249:165:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "ECDSAInvalidSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "ECDSAInvalidSignatureLength",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "ECDSAInvalidSignatureS",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				}
			],
			"name": "ERC2612ExpiredSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "signer",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC2612InvalidSigner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "currentNonce",
					"type": "uint256"
				}
			],
			"name": "InvalidAccountNonce",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "InvalidShortString",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "str",
					"type": "string"
				}
			],
			"name": "StringTooLong",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [],
			"name": "EIP712DomainChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "DOMAIN_SEPARATOR",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "eip712Domain",
			"outputs": [
				{
					"internalType": "bytes1",
					"name": "fields",
					"type": "bytes1"
				},
				{
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "version",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "chainId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "verifyingContract",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "salt",
					"type": "bytes32"
				},
				{
					"internalType": "uint256[]",
					"name": "extensions",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "nonces",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "permit",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 184,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 190,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 192,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 194,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 196,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			},
			{
				"astId": 2035,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_nameFallback",
				"offset": 0,
				"slot": "5",
				"type": "t_string_storage"
			},
			{
				"astId": 2037,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_versionFallback",
				"offset": 0,
				"slot": "6",
				"type": "t_string_storage"
			},
			{
				"astId": 1014,
				"contract": "contract-4ca17ba025.sol:LAMP",
				"label": "_nonces",
				"offset": 0,
				"slot": "7",
				"type": "t_mapping(t_address,t_uint256)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var lampContract = new web3.eth.Contract([{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar lamp = lampContract.deploy({\n     data: '', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"3644e515": "DOMAIN_SEPARATOR()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"84b0196e": "eip712Domain()",
		"06fdde03": "name()",
		"7ecebe00": "nonces(address)",
		"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "767800",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"DOMAIN_SEPARATOR()": "infinite",
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "24739",
			"balanceOf(address)": "2563",
			"decimals()": "266",
			"eip712Domain()": "infinite",
			"name()": "infinite",
			"nonces(address)": "2616",
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"symbol()": "infinite",
			"totalSupply()": "2326",
			"transfer(address,uint256)": "51266",
			"transferFrom(address,address,uint256)": "infinite"
		}
	},
	"devdoc": {
		"errors": {
			"ECDSAInvalidSignature()": [
				{
					"details": "The signature derives the `address(0)`."
				}
			],
			"ECDSAInvalidSignatureLength(uint256)": [
				{
					"details": "The signature has an invalid length."
				}
			],
			"ECDSAInvalidSignatureS(bytes32)": [
				{
					"details": "The signature has an S value that is in the upper half order."
				}
			],
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC2612ExpiredSignature(uint256)": [
				{
					"details": "Permit deadline has expired."
				}
			],
			"ERC2612InvalidSigner(address,address)": [
				{
					"details": "Mismatched signature."
				}
			],
			"InvalidAccountNonce(address,uint256)": [
				{
					"details": "The nonce used for an `account` is not the expected current nonce."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"EIP712DomainChanged()": {
				"details": "MAY be emitted to signal that the domain could have changed."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			}
		},
		"kind": "dev",
		"methods": {
			"DOMAIN_SEPARATOR()": {
				"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
			},
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"eip712Domain()": {
				"details": "See {IERC-5267}."
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"nonces(address)": {
				"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
			},
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@DOMAIN_SEPARATOR_907": {
				"entryPoint": 737,
				"id": 907,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Name_2212": {
				"entryPoint": 1738,
				"id": 2212,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Version_2224": {
				"entryPoint": 1783,
				"id": 2224,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_approve_567": {
				"entryPoint": 1200,
				"id": 567,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_627": {
				"entryPoint": 1919,
				"id": 627,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2142": {
				"entryPoint": null,
				"id": 2142,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_domainSeparatorV4_2121": {
				"entryPoint": 1439,
				"id": 2121,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_hashTypedDataV4_2158": {
				"entryPoint": 1828,
				"id": 2158,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_msgSender_982": {
				"entryPoint": null,
				"id": 982,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_spendAllowance_675": {
				"entryPoint": 1218,
				"id": 675,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_throwError_1997": {
				"entryPoint": 2808,
				"id": 1997,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_transfer_406": {
				"entryPoint": 1344,
				"id": 406,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_483": {
				"entryPoint": 2132,
				"id": 483,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_useNonce_1042": {
				"entryPoint": null,
				"id": 1042,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@allowance_303": {
				"entryPoint": null,
				"id": 303,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_327": {
				"entryPoint": 675,
				"id": 327,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_262": {
				"entryPoint": null,
				"id": 262,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@byteLength_1186": {
				"entryPoint": 3060,
				"id": 1186,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@decimals_240": {
				"entryPoint": null,
				"id": 240,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@eip712Domain_2200": {
				"entryPoint": 782,
				"id": 2200,
				"parameterSlots": 0,
				"returnSlots": 7
			},
			"@name_222": {
				"entryPoint": 529,
				"id": 222,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@nonces_1027": {
				"entryPoint": null,
				"id": 1027,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_897": {
				"entryPoint": 752,
				"id": 897,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@permit_880": {
				"entryPoint": 881,
				"id": 880,
				"parameterSlots": 7,
				"returnSlots": 0
			},
			"@recover_1948": {
				"entryPoint": 1873,
				"id": 1948,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@symbol_231": {
				"entryPoint": 852,
				"id": 231,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@toStringWithFallback_1253": {
				"entryPoint": 2430,
				"id": 1253,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toString_1154": {
				"entryPoint": 2997,
				"id": 1154,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toTypedDataHash_2298": {
				"entryPoint": null,
				"id": 2298,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@totalSupply_249": {
				"entryPoint": null,
				"id": 249,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_359": {
				"entryPoint": 701,
				"id": 359,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transfer_286": {
				"entryPoint": 867,
				"id": 286,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@tryRecover_1912": {
				"entryPoint": 2601,
				"id": 1912,
				"parameterSlots": 4,
				"returnSlots": 3
			},
			"abi_decode_address": {
				"entryPoint": 3196,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 3326,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 3621,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 3266,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 3506,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 7
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 3224,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_encode_string": {
				"entryPoint": 3100,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 3353,
				"id": null,
				"parameterSlots": 8,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 7,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 3170,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 3730,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 3672,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x21": {
				"entryPoint": 3763,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:7833:18",
					"nodeType": "YulBlock",
					"src": "0:7833:18",
					"statements": [
						{
							"nativeSrc": "6:3:18",
							"nodeType": "YulBlock",
							"src": "6:3:18",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "64:373:18",
								"nodeType": "YulBlock",
								"src": "64:373:18",
								"statements": [
									{
										"nativeSrc": "74:26:18",
										"nodeType": "YulVariableDeclaration",
										"src": "74:26:18",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "94:5:18",
													"nodeType": "YulIdentifier",
													"src": "94:5:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "88:5:18",
												"nodeType": "YulIdentifier",
												"src": "88:5:18"
											},
											"nativeSrc": "88:12:18",
											"nodeType": "YulFunctionCall",
											"src": "88:12:18"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "78:6:18",
												"nodeType": "YulTypedName",
												"src": "78:6:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "116:3:18",
													"nodeType": "YulIdentifier",
													"src": "116:3:18"
												},
												{
													"name": "length",
													"nativeSrc": "121:6:18",
													"nodeType": "YulIdentifier",
													"src": "121:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "109:6:18",
												"nodeType": "YulIdentifier",
												"src": "109:6:18"
											},
											"nativeSrc": "109:19:18",
											"nodeType": "YulFunctionCall",
											"src": "109:19:18"
										},
										"nativeSrc": "109:19:18",
										"nodeType": "YulExpressionStatement",
										"src": "109:19:18"
									},
									{
										"nativeSrc": "137:10:18",
										"nodeType": "YulVariableDeclaration",
										"src": "137:10:18",
										"value": {
											"kind": "number",
											"nativeSrc": "146:1:18",
											"nodeType": "YulLiteral",
											"src": "146:1:18",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "141:1:18",
												"nodeType": "YulTypedName",
												"src": "141:1:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "208:110:18",
											"nodeType": "YulBlock",
											"src": "208:110:18",
											"statements": [
												{
													"nativeSrc": "222:14:18",
													"nodeType": "YulVariableDeclaration",
													"src": "222:14:18",
													"value": {
														"kind": "number",
														"nativeSrc": "232:4:18",
														"nodeType": "YulLiteral",
														"src": "232:4:18",
														"type": "",
														"value": "0x20"
													},
													"variables": [
														{
															"name": "_1",
															"nativeSrc": "226:2:18",
															"nodeType": "YulTypedName",
															"src": "226:2:18",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "264:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "264:3:18"
																			},
																			{
																				"name": "i",
																				"nativeSrc": "269:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "269:1:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "260:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "260:3:18"
																		},
																		"nativeSrc": "260:11:18",
																		"nodeType": "YulFunctionCall",
																		"src": "260:11:18"
																	},
																	{
																		"name": "_1",
																		"nativeSrc": "273:2:18",
																		"nodeType": "YulIdentifier",
																		"src": "273:2:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "256:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "256:3:18"
																},
																"nativeSrc": "256:20:18",
																"nodeType": "YulFunctionCall",
																"src": "256:20:18"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "292:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "292:5:18"
																					},
																					{
																						"name": "i",
																						"nativeSrc": "299:1:18",
																						"nodeType": "YulIdentifier",
																						"src": "299:1:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "288:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "288:3:18"
																				},
																				"nativeSrc": "288:13:18",
																				"nodeType": "YulFunctionCall",
																				"src": "288:13:18"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "303:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "303:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "284:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "284:3:18"
																		},
																		"nativeSrc": "284:22:18",
																		"nodeType": "YulFunctionCall",
																		"src": "284:22:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "278:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "278:5:18"
																},
																"nativeSrc": "278:29:18",
																"nodeType": "YulFunctionCall",
																"src": "278:29:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "249:6:18",
															"nodeType": "YulIdentifier",
															"src": "249:6:18"
														},
														"nativeSrc": "249:59:18",
														"nodeType": "YulFunctionCall",
														"src": "249:59:18"
													},
													"nativeSrc": "249:59:18",
													"nodeType": "YulExpressionStatement",
													"src": "249:59:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "167:1:18",
													"nodeType": "YulIdentifier",
													"src": "167:1:18"
												},
												{
													"name": "length",
													"nativeSrc": "170:6:18",
													"nodeType": "YulIdentifier",
													"src": "170:6:18"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "164:2:18",
												"nodeType": "YulIdentifier",
												"src": "164:2:18"
											},
											"nativeSrc": "164:13:18",
											"nodeType": "YulFunctionCall",
											"src": "164:13:18"
										},
										"nativeSrc": "156:162:18",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "178:21:18",
											"nodeType": "YulBlock",
											"src": "178:21:18",
											"statements": [
												{
													"nativeSrc": "180:17:18",
													"nodeType": "YulAssignment",
													"src": "180:17:18",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "189:1:18",
																"nodeType": "YulIdentifier",
																"src": "189:1:18"
															},
															{
																"kind": "number",
																"nativeSrc": "192:4:18",
																"nodeType": "YulLiteral",
																"src": "192:4:18",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "185:3:18",
															"nodeType": "YulIdentifier",
															"src": "185:3:18"
														},
														"nativeSrc": "185:12:18",
														"nodeType": "YulFunctionCall",
														"src": "185:12:18"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "180:1:18",
															"nodeType": "YulIdentifier",
															"src": "180:1:18"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "160:3:18",
											"nodeType": "YulBlock",
											"src": "160:3:18",
											"statements": []
										},
										"src": "156:162:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nativeSrc": "342:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "342:3:18"
																},
																{
																	"name": "length",
																	"nativeSrc": "347:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "347:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "338:3:18",
																"nodeType": "YulIdentifier",
																"src": "338:3:18"
															},
															"nativeSrc": "338:16:18",
															"nodeType": "YulFunctionCall",
															"src": "338:16:18"
														},
														{
															"kind": "number",
															"nativeSrc": "356:4:18",
															"nodeType": "YulLiteral",
															"src": "356:4:18",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "334:3:18",
														"nodeType": "YulIdentifier",
														"src": "334:3:18"
													},
													"nativeSrc": "334:27:18",
													"nodeType": "YulFunctionCall",
													"src": "334:27:18"
												},
												{
													"kind": "number",
													"nativeSrc": "363:1:18",
													"nodeType": "YulLiteral",
													"src": "363:1:18",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "327:6:18",
												"nodeType": "YulIdentifier",
												"src": "327:6:18"
											},
											"nativeSrc": "327:38:18",
											"nodeType": "YulFunctionCall",
											"src": "327:38:18"
										},
										"nativeSrc": "327:38:18",
										"nodeType": "YulExpressionStatement",
										"src": "327:38:18"
									},
									{
										"nativeSrc": "374:57:18",
										"nodeType": "YulAssignment",
										"src": "374:57:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nativeSrc": "389:3:18",
															"nodeType": "YulIdentifier",
															"src": "389:3:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "402:6:18",
																			"nodeType": "YulIdentifier",
																			"src": "402:6:18"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "410:2:18",
																			"nodeType": "YulLiteral",
																			"src": "410:2:18",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "398:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "398:3:18"
																	},
																	"nativeSrc": "398:15:18",
																	"nodeType": "YulFunctionCall",
																	"src": "398:15:18"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "419:2:18",
																			"nodeType": "YulLiteral",
																			"src": "419:2:18",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "415:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "415:3:18"
																	},
																	"nativeSrc": "415:7:18",
																	"nodeType": "YulFunctionCall",
																	"src": "415:7:18"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "394:3:18",
																"nodeType": "YulIdentifier",
																"src": "394:3:18"
															},
															"nativeSrc": "394:29:18",
															"nodeType": "YulFunctionCall",
															"src": "394:29:18"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "385:3:18",
														"nodeType": "YulIdentifier",
														"src": "385:3:18"
													},
													"nativeSrc": "385:39:18",
													"nodeType": "YulFunctionCall",
													"src": "385:39:18"
												},
												{
													"kind": "number",
													"nativeSrc": "426:4:18",
													"nodeType": "YulLiteral",
													"src": "426:4:18",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "381:3:18",
												"nodeType": "YulIdentifier",
												"src": "381:3:18"
											},
											"nativeSrc": "381:50:18",
											"nodeType": "YulFunctionCall",
											"src": "381:50:18"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "374:3:18",
												"nodeType": "YulIdentifier",
												"src": "374:3:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_string",
							"nativeSrc": "14:423:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "41:5:18",
									"nodeType": "YulTypedName",
									"src": "41:5:18",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "48:3:18",
									"nodeType": "YulTypedName",
									"src": "48:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "56:3:18",
									"nodeType": "YulTypedName",
									"src": "56:3:18",
									"type": ""
								}
							],
							"src": "14:423:18"
						},
						{
							"body": {
								"nativeSrc": "563:99:18",
								"nodeType": "YulBlock",
								"src": "563:99:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "580:9:18",
													"nodeType": "YulIdentifier",
													"src": "580:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "591:2:18",
													"nodeType": "YulLiteral",
													"src": "591:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "573:6:18",
												"nodeType": "YulIdentifier",
												"src": "573:6:18"
											},
											"nativeSrc": "573:21:18",
											"nodeType": "YulFunctionCall",
											"src": "573:21:18"
										},
										"nativeSrc": "573:21:18",
										"nodeType": "YulExpressionStatement",
										"src": "573:21:18"
									},
									{
										"nativeSrc": "603:53:18",
										"nodeType": "YulAssignment",
										"src": "603:53:18",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "629:6:18",
													"nodeType": "YulIdentifier",
													"src": "629:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "641:9:18",
															"nodeType": "YulIdentifier",
															"src": "641:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "652:2:18",
															"nodeType": "YulLiteral",
															"src": "652:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "637:3:18",
														"nodeType": "YulIdentifier",
														"src": "637:3:18"
													},
													"nativeSrc": "637:18:18",
													"nodeType": "YulFunctionCall",
													"src": "637:18:18"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "611:17:18",
												"nodeType": "YulIdentifier",
												"src": "611:17:18"
											},
											"nativeSrc": "611:45:18",
											"nodeType": "YulFunctionCall",
											"src": "611:45:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "603:4:18",
												"nodeType": "YulIdentifier",
												"src": "603:4:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "442:220:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "532:9:18",
									"nodeType": "YulTypedName",
									"src": "532:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "543:6:18",
									"nodeType": "YulTypedName",
									"src": "543:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "554:4:18",
									"nodeType": "YulTypedName",
									"src": "554:4:18",
									"type": ""
								}
							],
							"src": "442:220:18"
						},
						{
							"body": {
								"nativeSrc": "716:124:18",
								"nodeType": "YulBlock",
								"src": "716:124:18",
								"statements": [
									{
										"nativeSrc": "726:29:18",
										"nodeType": "YulAssignment",
										"src": "726:29:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "748:6:18",
													"nodeType": "YulIdentifier",
													"src": "748:6:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "735:12:18",
												"nodeType": "YulIdentifier",
												"src": "735:12:18"
											},
											"nativeSrc": "735:20:18",
											"nodeType": "YulFunctionCall",
											"src": "735:20:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "726:5:18",
												"nodeType": "YulIdentifier",
												"src": "726:5:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "818:16:18",
											"nodeType": "YulBlock",
											"src": "818:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "827:1:18",
																"nodeType": "YulLiteral",
																"src": "827:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "830:1:18",
																"nodeType": "YulLiteral",
																"src": "830:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "820:6:18",
															"nodeType": "YulIdentifier",
															"src": "820:6:18"
														},
														"nativeSrc": "820:12:18",
														"nodeType": "YulFunctionCall",
														"src": "820:12:18"
													},
													"nativeSrc": "820:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "820:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "777:5:18",
															"nodeType": "YulIdentifier",
															"src": "777:5:18"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "788:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "788:5:18"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "803:3:18",
																					"nodeType": "YulLiteral",
																					"src": "803:3:18",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "808:1:18",
																					"nodeType": "YulLiteral",
																					"src": "808:1:18",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "799:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "799:3:18"
																			},
																			"nativeSrc": "799:11:18",
																			"nodeType": "YulFunctionCall",
																			"src": "799:11:18"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "812:1:18",
																			"nodeType": "YulLiteral",
																			"src": "812:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nativeSrc": "795:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "795:3:18"
																	},
																	"nativeSrc": "795:19:18",
																	"nodeType": "YulFunctionCall",
																	"src": "795:19:18"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "784:3:18",
																"nodeType": "YulIdentifier",
																"src": "784:3:18"
															},
															"nativeSrc": "784:31:18",
															"nodeType": "YulFunctionCall",
															"src": "784:31:18"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "774:2:18",
														"nodeType": "YulIdentifier",
														"src": "774:2:18"
													},
													"nativeSrc": "774:42:18",
													"nodeType": "YulFunctionCall",
													"src": "774:42:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "767:6:18",
												"nodeType": "YulIdentifier",
												"src": "767:6:18"
											},
											"nativeSrc": "767:50:18",
											"nodeType": "YulFunctionCall",
											"src": "767:50:18"
										},
										"nativeSrc": "764:70:18",
										"nodeType": "YulIf",
										"src": "764:70:18"
									}
								]
							},
							"name": "abi_decode_address",
							"nativeSrc": "667:173:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "695:6:18",
									"nodeType": "YulTypedName",
									"src": "695:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "706:5:18",
									"nodeType": "YulTypedName",
									"src": "706:5:18",
									"type": ""
								}
							],
							"src": "667:173:18"
						},
						{
							"body": {
								"nativeSrc": "932:167:18",
								"nodeType": "YulBlock",
								"src": "932:167:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "978:16:18",
											"nodeType": "YulBlock",
											"src": "978:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "987:1:18",
																"nodeType": "YulLiteral",
																"src": "987:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "990:1:18",
																"nodeType": "YulLiteral",
																"src": "990:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "980:6:18",
															"nodeType": "YulIdentifier",
															"src": "980:6:18"
														},
														"nativeSrc": "980:12:18",
														"nodeType": "YulFunctionCall",
														"src": "980:12:18"
													},
													"nativeSrc": "980:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "980:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "953:7:18",
															"nodeType": "YulIdentifier",
															"src": "953:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "962:9:18",
															"nodeType": "YulIdentifier",
															"src": "962:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "949:3:18",
														"nodeType": "YulIdentifier",
														"src": "949:3:18"
													},
													"nativeSrc": "949:23:18",
													"nodeType": "YulFunctionCall",
													"src": "949:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "974:2:18",
													"nodeType": "YulLiteral",
													"src": "974:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "945:3:18",
												"nodeType": "YulIdentifier",
												"src": "945:3:18"
											},
											"nativeSrc": "945:32:18",
											"nodeType": "YulFunctionCall",
											"src": "945:32:18"
										},
										"nativeSrc": "942:52:18",
										"nodeType": "YulIf",
										"src": "942:52:18"
									},
									{
										"nativeSrc": "1003:39:18",
										"nodeType": "YulAssignment",
										"src": "1003:39:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1032:9:18",
													"nodeType": "YulIdentifier",
													"src": "1032:9:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1013:18:18",
												"nodeType": "YulIdentifier",
												"src": "1013:18:18"
											},
											"nativeSrc": "1013:29:18",
											"nodeType": "YulFunctionCall",
											"src": "1013:29:18"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1003:6:18",
												"nodeType": "YulIdentifier",
												"src": "1003:6:18"
											}
										]
									},
									{
										"nativeSrc": "1051:42:18",
										"nodeType": "YulAssignment",
										"src": "1051:42:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1078:9:18",
															"nodeType": "YulIdentifier",
															"src": "1078:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "1089:2:18",
															"nodeType": "YulLiteral",
															"src": "1089:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1074:3:18",
														"nodeType": "YulIdentifier",
														"src": "1074:3:18"
													},
													"nativeSrc": "1074:18:18",
													"nodeType": "YulFunctionCall",
													"src": "1074:18:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1061:12:18",
												"nodeType": "YulIdentifier",
												"src": "1061:12:18"
											},
											"nativeSrc": "1061:32:18",
											"nodeType": "YulFunctionCall",
											"src": "1061:32:18"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1051:6:18",
												"nodeType": "YulIdentifier",
												"src": "1051:6:18"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "845:254:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "890:9:18",
									"nodeType": "YulTypedName",
									"src": "890:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "901:7:18",
									"nodeType": "YulTypedName",
									"src": "901:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "913:6:18",
									"nodeType": "YulTypedName",
									"src": "913:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "921:6:18",
									"nodeType": "YulTypedName",
									"src": "921:6:18",
									"type": ""
								}
							],
							"src": "845:254:18"
						},
						{
							"body": {
								"nativeSrc": "1199:92:18",
								"nodeType": "YulBlock",
								"src": "1199:92:18",
								"statements": [
									{
										"nativeSrc": "1209:26:18",
										"nodeType": "YulAssignment",
										"src": "1209:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1221:9:18",
													"nodeType": "YulIdentifier",
													"src": "1221:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1232:2:18",
													"nodeType": "YulLiteral",
													"src": "1232:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1217:3:18",
												"nodeType": "YulIdentifier",
												"src": "1217:3:18"
											},
											"nativeSrc": "1217:18:18",
											"nodeType": "YulFunctionCall",
											"src": "1217:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1209:4:18",
												"nodeType": "YulIdentifier",
												"src": "1209:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1251:9:18",
													"nodeType": "YulIdentifier",
													"src": "1251:9:18"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nativeSrc": "1276:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1276:6:18"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "1269:6:18",
																"nodeType": "YulIdentifier",
																"src": "1269:6:18"
															},
															"nativeSrc": "1269:14:18",
															"nodeType": "YulFunctionCall",
															"src": "1269:14:18"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "1262:6:18",
														"nodeType": "YulIdentifier",
														"src": "1262:6:18"
													},
													"nativeSrc": "1262:22:18",
													"nodeType": "YulFunctionCall",
													"src": "1262:22:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1244:6:18",
												"nodeType": "YulIdentifier",
												"src": "1244:6:18"
											},
											"nativeSrc": "1244:41:18",
											"nodeType": "YulFunctionCall",
											"src": "1244:41:18"
										},
										"nativeSrc": "1244:41:18",
										"nodeType": "YulExpressionStatement",
										"src": "1244:41:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "1104:187:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1168:9:18",
									"nodeType": "YulTypedName",
									"src": "1168:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1179:6:18",
									"nodeType": "YulTypedName",
									"src": "1179:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1190:4:18",
									"nodeType": "YulTypedName",
									"src": "1190:4:18",
									"type": ""
								}
							],
							"src": "1104:187:18"
						},
						{
							"body": {
								"nativeSrc": "1397:76:18",
								"nodeType": "YulBlock",
								"src": "1397:76:18",
								"statements": [
									{
										"nativeSrc": "1407:26:18",
										"nodeType": "YulAssignment",
										"src": "1407:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1419:9:18",
													"nodeType": "YulIdentifier",
													"src": "1419:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1430:2:18",
													"nodeType": "YulLiteral",
													"src": "1430:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1415:3:18",
												"nodeType": "YulIdentifier",
												"src": "1415:3:18"
											},
											"nativeSrc": "1415:18:18",
											"nodeType": "YulFunctionCall",
											"src": "1415:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1407:4:18",
												"nodeType": "YulIdentifier",
												"src": "1407:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1449:9:18",
													"nodeType": "YulIdentifier",
													"src": "1449:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "1460:6:18",
													"nodeType": "YulIdentifier",
													"src": "1460:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1442:6:18",
												"nodeType": "YulIdentifier",
												"src": "1442:6:18"
											},
											"nativeSrc": "1442:25:18",
											"nodeType": "YulFunctionCall",
											"src": "1442:25:18"
										},
										"nativeSrc": "1442:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "1442:25:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "1296:177:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1366:9:18",
									"nodeType": "YulTypedName",
									"src": "1366:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1377:6:18",
									"nodeType": "YulTypedName",
									"src": "1377:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1388:4:18",
									"nodeType": "YulTypedName",
									"src": "1388:4:18",
									"type": ""
								}
							],
							"src": "1296:177:18"
						},
						{
							"body": {
								"nativeSrc": "1582:224:18",
								"nodeType": "YulBlock",
								"src": "1582:224:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "1628:16:18",
											"nodeType": "YulBlock",
											"src": "1628:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1637:1:18",
																"nodeType": "YulLiteral",
																"src": "1637:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1640:1:18",
																"nodeType": "YulLiteral",
																"src": "1640:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1630:6:18",
															"nodeType": "YulIdentifier",
															"src": "1630:6:18"
														},
														"nativeSrc": "1630:12:18",
														"nodeType": "YulFunctionCall",
														"src": "1630:12:18"
													},
													"nativeSrc": "1630:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "1630:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1603:7:18",
															"nodeType": "YulIdentifier",
															"src": "1603:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "1612:9:18",
															"nodeType": "YulIdentifier",
															"src": "1612:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1599:3:18",
														"nodeType": "YulIdentifier",
														"src": "1599:3:18"
													},
													"nativeSrc": "1599:23:18",
													"nodeType": "YulFunctionCall",
													"src": "1599:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1624:2:18",
													"nodeType": "YulLiteral",
													"src": "1624:2:18",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1595:3:18",
												"nodeType": "YulIdentifier",
												"src": "1595:3:18"
											},
											"nativeSrc": "1595:32:18",
											"nodeType": "YulFunctionCall",
											"src": "1595:32:18"
										},
										"nativeSrc": "1592:52:18",
										"nodeType": "YulIf",
										"src": "1592:52:18"
									},
									{
										"nativeSrc": "1653:39:18",
										"nodeType": "YulAssignment",
										"src": "1653:39:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1682:9:18",
													"nodeType": "YulIdentifier",
													"src": "1682:9:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1663:18:18",
												"nodeType": "YulIdentifier",
												"src": "1663:18:18"
											},
											"nativeSrc": "1663:29:18",
											"nodeType": "YulFunctionCall",
											"src": "1663:29:18"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1653:6:18",
												"nodeType": "YulIdentifier",
												"src": "1653:6:18"
											}
										]
									},
									{
										"nativeSrc": "1701:48:18",
										"nodeType": "YulAssignment",
										"src": "1701:48:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1734:9:18",
															"nodeType": "YulIdentifier",
															"src": "1734:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "1745:2:18",
															"nodeType": "YulLiteral",
															"src": "1745:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1730:3:18",
														"nodeType": "YulIdentifier",
														"src": "1730:3:18"
													},
													"nativeSrc": "1730:18:18",
													"nodeType": "YulFunctionCall",
													"src": "1730:18:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1711:18:18",
												"nodeType": "YulIdentifier",
												"src": "1711:18:18"
											},
											"nativeSrc": "1711:38:18",
											"nodeType": "YulFunctionCall",
											"src": "1711:38:18"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1701:6:18",
												"nodeType": "YulIdentifier",
												"src": "1701:6:18"
											}
										]
									},
									{
										"nativeSrc": "1758:42:18",
										"nodeType": "YulAssignment",
										"src": "1758:42:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1785:9:18",
															"nodeType": "YulIdentifier",
															"src": "1785:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "1796:2:18",
															"nodeType": "YulLiteral",
															"src": "1796:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1781:3:18",
														"nodeType": "YulIdentifier",
														"src": "1781:3:18"
													},
													"nativeSrc": "1781:18:18",
													"nodeType": "YulFunctionCall",
													"src": "1781:18:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1768:12:18",
												"nodeType": "YulIdentifier",
												"src": "1768:12:18"
											},
											"nativeSrc": "1768:32:18",
											"nodeType": "YulFunctionCall",
											"src": "1768:32:18"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "1758:6:18",
												"nodeType": "YulIdentifier",
												"src": "1758:6:18"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "1478:328:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1532:9:18",
									"nodeType": "YulTypedName",
									"src": "1532:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1543:7:18",
									"nodeType": "YulTypedName",
									"src": "1543:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1555:6:18",
									"nodeType": "YulTypedName",
									"src": "1555:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "1563:6:18",
									"nodeType": "YulTypedName",
									"src": "1563:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "1571:6:18",
									"nodeType": "YulTypedName",
									"src": "1571:6:18",
									"type": ""
								}
							],
							"src": "1478:328:18"
						},
						{
							"body": {
								"nativeSrc": "1908:87:18",
								"nodeType": "YulBlock",
								"src": "1908:87:18",
								"statements": [
									{
										"nativeSrc": "1918:26:18",
										"nodeType": "YulAssignment",
										"src": "1918:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1930:9:18",
													"nodeType": "YulIdentifier",
													"src": "1930:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1941:2:18",
													"nodeType": "YulLiteral",
													"src": "1941:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1926:3:18",
												"nodeType": "YulIdentifier",
												"src": "1926:3:18"
											},
											"nativeSrc": "1926:18:18",
											"nodeType": "YulFunctionCall",
											"src": "1926:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1918:4:18",
												"nodeType": "YulIdentifier",
												"src": "1918:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1960:9:18",
													"nodeType": "YulIdentifier",
													"src": "1960:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "1975:6:18",
															"nodeType": "YulIdentifier",
															"src": "1975:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "1983:4:18",
															"nodeType": "YulLiteral",
															"src": "1983:4:18",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1971:3:18",
														"nodeType": "YulIdentifier",
														"src": "1971:3:18"
													},
													"nativeSrc": "1971:17:18",
													"nodeType": "YulFunctionCall",
													"src": "1971:17:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1953:6:18",
												"nodeType": "YulIdentifier",
												"src": "1953:6:18"
											},
											"nativeSrc": "1953:36:18",
											"nodeType": "YulFunctionCall",
											"src": "1953:36:18"
										},
										"nativeSrc": "1953:36:18",
										"nodeType": "YulExpressionStatement",
										"src": "1953:36:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nativeSrc": "1811:184:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1877:9:18",
									"nodeType": "YulTypedName",
									"src": "1877:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1888:6:18",
									"nodeType": "YulTypedName",
									"src": "1888:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1899:4:18",
									"nodeType": "YulTypedName",
									"src": "1899:4:18",
									"type": ""
								}
							],
							"src": "1811:184:18"
						},
						{
							"body": {
								"nativeSrc": "2101:76:18",
								"nodeType": "YulBlock",
								"src": "2101:76:18",
								"statements": [
									{
										"nativeSrc": "2111:26:18",
										"nodeType": "YulAssignment",
										"src": "2111:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2123:9:18",
													"nodeType": "YulIdentifier",
													"src": "2123:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "2134:2:18",
													"nodeType": "YulLiteral",
													"src": "2134:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2119:3:18",
												"nodeType": "YulIdentifier",
												"src": "2119:3:18"
											},
											"nativeSrc": "2119:18:18",
											"nodeType": "YulFunctionCall",
											"src": "2119:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2111:4:18",
												"nodeType": "YulIdentifier",
												"src": "2111:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2153:9:18",
													"nodeType": "YulIdentifier",
													"src": "2153:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "2164:6:18",
													"nodeType": "YulIdentifier",
													"src": "2164:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2146:6:18",
												"nodeType": "YulIdentifier",
												"src": "2146:6:18"
											},
											"nativeSrc": "2146:25:18",
											"nodeType": "YulFunctionCall",
											"src": "2146:25:18"
										},
										"nativeSrc": "2146:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "2146:25:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
							"nativeSrc": "2000:177:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2070:9:18",
									"nodeType": "YulTypedName",
									"src": "2070:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2081:6:18",
									"nodeType": "YulTypedName",
									"src": "2081:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2092:4:18",
									"nodeType": "YulTypedName",
									"src": "2092:4:18",
									"type": ""
								}
							],
							"src": "2000:177:18"
						},
						{
							"body": {
								"nativeSrc": "2252:116:18",
								"nodeType": "YulBlock",
								"src": "2252:116:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "2298:16:18",
											"nodeType": "YulBlock",
											"src": "2298:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2307:1:18",
																"nodeType": "YulLiteral",
																"src": "2307:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2310:1:18",
																"nodeType": "YulLiteral",
																"src": "2310:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2300:6:18",
															"nodeType": "YulIdentifier",
															"src": "2300:6:18"
														},
														"nativeSrc": "2300:12:18",
														"nodeType": "YulFunctionCall",
														"src": "2300:12:18"
													},
													"nativeSrc": "2300:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "2300:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2273:7:18",
															"nodeType": "YulIdentifier",
															"src": "2273:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "2282:9:18",
															"nodeType": "YulIdentifier",
															"src": "2282:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2269:3:18",
														"nodeType": "YulIdentifier",
														"src": "2269:3:18"
													},
													"nativeSrc": "2269:23:18",
													"nodeType": "YulFunctionCall",
													"src": "2269:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "2294:2:18",
													"nodeType": "YulLiteral",
													"src": "2294:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2265:3:18",
												"nodeType": "YulIdentifier",
												"src": "2265:3:18"
											},
											"nativeSrc": "2265:32:18",
											"nodeType": "YulFunctionCall",
											"src": "2265:32:18"
										},
										"nativeSrc": "2262:52:18",
										"nodeType": "YulIf",
										"src": "2262:52:18"
									},
									{
										"nativeSrc": "2323:39:18",
										"nodeType": "YulAssignment",
										"src": "2323:39:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2352:9:18",
													"nodeType": "YulIdentifier",
													"src": "2352:9:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "2333:18:18",
												"nodeType": "YulIdentifier",
												"src": "2333:18:18"
											},
											"nativeSrc": "2333:29:18",
											"nodeType": "YulFunctionCall",
											"src": "2333:29:18"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "2323:6:18",
												"nodeType": "YulIdentifier",
												"src": "2323:6:18"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "2182:186:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2218:9:18",
									"nodeType": "YulTypedName",
									"src": "2218:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2229:7:18",
									"nodeType": "YulTypedName",
									"src": "2229:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2241:6:18",
									"nodeType": "YulTypedName",
									"src": "2241:6:18",
									"type": ""
								}
							],
							"src": "2182:186:18"
						},
						{
							"body": {
								"nativeSrc": "2730:902:18",
								"nodeType": "YulBlock",
								"src": "2730:902:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2747:9:18",
													"nodeType": "YulIdentifier",
													"src": "2747:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "2762:6:18",
															"nodeType": "YulIdentifier",
															"src": "2762:6:18"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "2774:3:18",
																	"nodeType": "YulLiteral",
																	"src": "2774:3:18",
																	"type": "",
																	"value": "248"
																},
																{
																	"kind": "number",
																	"nativeSrc": "2779:3:18",
																	"nodeType": "YulLiteral",
																	"src": "2779:3:18",
																	"type": "",
																	"value": "255"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "2770:3:18",
																"nodeType": "YulIdentifier",
																"src": "2770:3:18"
															},
															"nativeSrc": "2770:13:18",
															"nodeType": "YulFunctionCall",
															"src": "2770:13:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "2758:3:18",
														"nodeType": "YulIdentifier",
														"src": "2758:3:18"
													},
													"nativeSrc": "2758:26:18",
													"nodeType": "YulFunctionCall",
													"src": "2758:26:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2740:6:18",
												"nodeType": "YulIdentifier",
												"src": "2740:6:18"
											},
											"nativeSrc": "2740:45:18",
											"nodeType": "YulFunctionCall",
											"src": "2740:45:18"
										},
										"nativeSrc": "2740:45:18",
										"nodeType": "YulExpressionStatement",
										"src": "2740:45:18"
									},
									{
										"nativeSrc": "2794:12:18",
										"nodeType": "YulVariableDeclaration",
										"src": "2794:12:18",
										"value": {
											"kind": "number",
											"nativeSrc": "2804:2:18",
											"nodeType": "YulLiteral",
											"src": "2804:2:18",
											"type": "",
											"value": "32"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "2798:2:18",
												"nodeType": "YulTypedName",
												"src": "2798:2:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2826:9:18",
															"nodeType": "YulIdentifier",
															"src": "2826:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "2837:2:18",
															"nodeType": "YulLiteral",
															"src": "2837:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2822:3:18",
														"nodeType": "YulIdentifier",
														"src": "2822:3:18"
													},
													"nativeSrc": "2822:18:18",
													"nodeType": "YulFunctionCall",
													"src": "2822:18:18"
												},
												{
													"kind": "number",
													"nativeSrc": "2842:3:18",
													"nodeType": "YulLiteral",
													"src": "2842:3:18",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2815:6:18",
												"nodeType": "YulIdentifier",
												"src": "2815:6:18"
											},
											"nativeSrc": "2815:31:18",
											"nodeType": "YulFunctionCall",
											"src": "2815:31:18"
										},
										"nativeSrc": "2815:31:18",
										"nodeType": "YulExpressionStatement",
										"src": "2815:31:18"
									},
									{
										"nativeSrc": "2855:60:18",
										"nodeType": "YulVariableDeclaration",
										"src": "2855:60:18",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "2887:6:18",
													"nodeType": "YulIdentifier",
													"src": "2887:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2899:9:18",
															"nodeType": "YulIdentifier",
															"src": "2899:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "2910:3:18",
															"nodeType": "YulLiteral",
															"src": "2910:3:18",
															"type": "",
															"value": "224"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2895:3:18",
														"nodeType": "YulIdentifier",
														"src": "2895:3:18"
													},
													"nativeSrc": "2895:19:18",
													"nodeType": "YulFunctionCall",
													"src": "2895:19:18"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "2869:17:18",
												"nodeType": "YulIdentifier",
												"src": "2869:17:18"
											},
											"nativeSrc": "2869:46:18",
											"nodeType": "YulFunctionCall",
											"src": "2869:46:18"
										},
										"variables": [
											{
												"name": "tail_1",
												"nativeSrc": "2859:6:18",
												"nodeType": "YulTypedName",
												"src": "2859:6:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2935:9:18",
															"nodeType": "YulIdentifier",
															"src": "2935:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "2946:2:18",
															"nodeType": "YulLiteral",
															"src": "2946:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2931:3:18",
														"nodeType": "YulIdentifier",
														"src": "2931:3:18"
													},
													"nativeSrc": "2931:18:18",
													"nodeType": "YulFunctionCall",
													"src": "2931:18:18"
												},
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "2955:6:18",
															"nodeType": "YulIdentifier",
															"src": "2955:6:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "2963:9:18",
															"nodeType": "YulIdentifier",
															"src": "2963:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2951:3:18",
														"nodeType": "YulIdentifier",
														"src": "2951:3:18"
													},
													"nativeSrc": "2951:22:18",
													"nodeType": "YulFunctionCall",
													"src": "2951:22:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2924:6:18",
												"nodeType": "YulIdentifier",
												"src": "2924:6:18"
											},
											"nativeSrc": "2924:50:18",
											"nodeType": "YulFunctionCall",
											"src": "2924:50:18"
										},
										"nativeSrc": "2924:50:18",
										"nodeType": "YulExpressionStatement",
										"src": "2924:50:18"
									},
									{
										"nativeSrc": "2983:47:18",
										"nodeType": "YulVariableDeclaration",
										"src": "2983:47:18",
										"value": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "3015:6:18",
													"nodeType": "YulIdentifier",
													"src": "3015:6:18"
												},
												{
													"name": "tail_1",
													"nativeSrc": "3023:6:18",
													"nodeType": "YulIdentifier",
													"src": "3023:6:18"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "2997:17:18",
												"nodeType": "YulIdentifier",
												"src": "2997:17:18"
											},
											"nativeSrc": "2997:33:18",
											"nodeType": "YulFunctionCall",
											"src": "2997:33:18"
										},
										"variables": [
											{
												"name": "tail_2",
												"nativeSrc": "2987:6:18",
												"nodeType": "YulTypedName",
												"src": "2987:6:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3050:9:18",
															"nodeType": "YulIdentifier",
															"src": "3050:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3061:2:18",
															"nodeType": "YulLiteral",
															"src": "3061:2:18",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3046:3:18",
														"nodeType": "YulIdentifier",
														"src": "3046:3:18"
													},
													"nativeSrc": "3046:18:18",
													"nodeType": "YulFunctionCall",
													"src": "3046:18:18"
												},
												{
													"name": "value3",
													"nativeSrc": "3066:6:18",
													"nodeType": "YulIdentifier",
													"src": "3066:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3039:6:18",
												"nodeType": "YulIdentifier",
												"src": "3039:6:18"
											},
											"nativeSrc": "3039:34:18",
											"nodeType": "YulFunctionCall",
											"src": "3039:34:18"
										},
										"nativeSrc": "3039:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "3039:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3093:9:18",
															"nodeType": "YulIdentifier",
															"src": "3093:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3104:3:18",
															"nodeType": "YulLiteral",
															"src": "3104:3:18",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3089:3:18",
														"nodeType": "YulIdentifier",
														"src": "3089:3:18"
													},
													"nativeSrc": "3089:19:18",
													"nodeType": "YulFunctionCall",
													"src": "3089:19:18"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "3114:6:18",
															"nodeType": "YulIdentifier",
															"src": "3114:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "3130:3:18",
																			"nodeType": "YulLiteral",
																			"src": "3130:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "3135:1:18",
																			"nodeType": "YulLiteral",
																			"src": "3135:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "3126:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "3126:3:18"
																	},
																	"nativeSrc": "3126:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "3126:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3139:1:18",
																	"nodeType": "YulLiteral",
																	"src": "3139:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "3122:3:18",
																"nodeType": "YulIdentifier",
																"src": "3122:3:18"
															},
															"nativeSrc": "3122:19:18",
															"nodeType": "YulFunctionCall",
															"src": "3122:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3110:3:18",
														"nodeType": "YulIdentifier",
														"src": "3110:3:18"
													},
													"nativeSrc": "3110:32:18",
													"nodeType": "YulFunctionCall",
													"src": "3110:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3082:6:18",
												"nodeType": "YulIdentifier",
												"src": "3082:6:18"
											},
											"nativeSrc": "3082:61:18",
											"nodeType": "YulFunctionCall",
											"src": "3082:61:18"
										},
										"nativeSrc": "3082:61:18",
										"nodeType": "YulExpressionStatement",
										"src": "3082:61:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3163:9:18",
															"nodeType": "YulIdentifier",
															"src": "3163:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3174:3:18",
															"nodeType": "YulLiteral",
															"src": "3174:3:18",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3159:3:18",
														"nodeType": "YulIdentifier",
														"src": "3159:3:18"
													},
													"nativeSrc": "3159:19:18",
													"nodeType": "YulFunctionCall",
													"src": "3159:19:18"
												},
												{
													"name": "value5",
													"nativeSrc": "3180:6:18",
													"nodeType": "YulIdentifier",
													"src": "3180:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3152:6:18",
												"nodeType": "YulIdentifier",
												"src": "3152:6:18"
											},
											"nativeSrc": "3152:35:18",
											"nodeType": "YulFunctionCall",
											"src": "3152:35:18"
										},
										"nativeSrc": "3152:35:18",
										"nodeType": "YulExpressionStatement",
										"src": "3152:35:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3207:9:18",
															"nodeType": "YulIdentifier",
															"src": "3207:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3218:3:18",
															"nodeType": "YulLiteral",
															"src": "3218:3:18",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3203:3:18",
														"nodeType": "YulIdentifier",
														"src": "3203:3:18"
													},
													"nativeSrc": "3203:19:18",
													"nodeType": "YulFunctionCall",
													"src": "3203:19:18"
												},
												{
													"arguments": [
														{
															"name": "tail_2",
															"nativeSrc": "3228:6:18",
															"nodeType": "YulIdentifier",
															"src": "3228:6:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "3236:9:18",
															"nodeType": "YulIdentifier",
															"src": "3236:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3224:3:18",
														"nodeType": "YulIdentifier",
														"src": "3224:3:18"
													},
													"nativeSrc": "3224:22:18",
													"nodeType": "YulFunctionCall",
													"src": "3224:22:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3196:6:18",
												"nodeType": "YulIdentifier",
												"src": "3196:6:18"
											},
											"nativeSrc": "3196:51:18",
											"nodeType": "YulFunctionCall",
											"src": "3196:51:18"
										},
										"nativeSrc": "3196:51:18",
										"nodeType": "YulExpressionStatement",
										"src": "3196:51:18"
									},
									{
										"nativeSrc": "3256:17:18",
										"nodeType": "YulVariableDeclaration",
										"src": "3256:17:18",
										"value": {
											"name": "tail_2",
											"nativeSrc": "3267:6:18",
											"nodeType": "YulIdentifier",
											"src": "3267:6:18"
										},
										"variables": [
											{
												"name": "pos",
												"nativeSrc": "3260:3:18",
												"nodeType": "YulTypedName",
												"src": "3260:3:18",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3282:27:18",
										"nodeType": "YulVariableDeclaration",
										"src": "3282:27:18",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "3302:6:18",
													"nodeType": "YulIdentifier",
													"src": "3302:6:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "3296:5:18",
												"nodeType": "YulIdentifier",
												"src": "3296:5:18"
											},
											"nativeSrc": "3296:13:18",
											"nodeType": "YulFunctionCall",
											"src": "3296:13:18"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "3286:6:18",
												"nodeType": "YulTypedName",
												"src": "3286:6:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "3325:6:18",
													"nodeType": "YulIdentifier",
													"src": "3325:6:18"
												},
												{
													"name": "length",
													"nativeSrc": "3333:6:18",
													"nodeType": "YulIdentifier",
													"src": "3333:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3318:6:18",
												"nodeType": "YulIdentifier",
												"src": "3318:6:18"
											},
											"nativeSrc": "3318:22:18",
											"nodeType": "YulFunctionCall",
											"src": "3318:22:18"
										},
										"nativeSrc": "3318:22:18",
										"nodeType": "YulExpressionStatement",
										"src": "3318:22:18"
									},
									{
										"nativeSrc": "3349:22:18",
										"nodeType": "YulAssignment",
										"src": "3349:22:18",
										"value": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "3360:6:18",
													"nodeType": "YulIdentifier",
													"src": "3360:6:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3368:2:18",
													"nodeType": "YulLiteral",
													"src": "3368:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3356:3:18",
												"nodeType": "YulIdentifier",
												"src": "3356:3:18"
											},
											"nativeSrc": "3356:15:18",
											"nodeType": "YulFunctionCall",
											"src": "3356:15:18"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "3349:3:18",
												"nodeType": "YulIdentifier",
												"src": "3349:3:18"
											}
										]
									},
									{
										"nativeSrc": "3380:29:18",
										"nodeType": "YulVariableDeclaration",
										"src": "3380:29:18",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "3398:6:18",
													"nodeType": "YulIdentifier",
													"src": "3398:6:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3406:2:18",
													"nodeType": "YulLiteral",
													"src": "3406:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3394:3:18",
												"nodeType": "YulIdentifier",
												"src": "3394:3:18"
											},
											"nativeSrc": "3394:15:18",
											"nodeType": "YulFunctionCall",
											"src": "3394:15:18"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nativeSrc": "3384:6:18",
												"nodeType": "YulTypedName",
												"src": "3384:6:18",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3418:10:18",
										"nodeType": "YulVariableDeclaration",
										"src": "3418:10:18",
										"value": {
											"kind": "number",
											"nativeSrc": "3427:1:18",
											"nodeType": "YulLiteral",
											"src": "3427:1:18",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "3422:1:18",
												"nodeType": "YulTypedName",
												"src": "3422:1:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3486:120:18",
											"nodeType": "YulBlock",
											"src": "3486:120:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "3507:3:18",
																"nodeType": "YulIdentifier",
																"src": "3507:3:18"
															},
															{
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nativeSrc": "3518:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3518:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3512:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "3512:5:18"
																},
																"nativeSrc": "3512:13:18",
																"nodeType": "YulFunctionCall",
																"src": "3512:13:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "3500:6:18",
															"nodeType": "YulIdentifier",
															"src": "3500:6:18"
														},
														"nativeSrc": "3500:26:18",
														"nodeType": "YulFunctionCall",
														"src": "3500:26:18"
													},
													"nativeSrc": "3500:26:18",
													"nodeType": "YulExpressionStatement",
													"src": "3500:26:18"
												},
												{
													"nativeSrc": "3539:19:18",
													"nodeType": "YulAssignment",
													"src": "3539:19:18",
													"value": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "3550:3:18",
																"nodeType": "YulIdentifier",
																"src": "3550:3:18"
															},
															{
																"name": "_1",
																"nativeSrc": "3555:2:18",
																"nodeType": "YulIdentifier",
																"src": "3555:2:18"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3546:3:18",
															"nodeType": "YulIdentifier",
															"src": "3546:3:18"
														},
														"nativeSrc": "3546:12:18",
														"nodeType": "YulFunctionCall",
														"src": "3546:12:18"
													},
													"variableNames": [
														{
															"name": "pos",
															"nativeSrc": "3539:3:18",
															"nodeType": "YulIdentifier",
															"src": "3539:3:18"
														}
													]
												},
												{
													"nativeSrc": "3571:25:18",
													"nodeType": "YulAssignment",
													"src": "3571:25:18",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "3585:6:18",
																"nodeType": "YulIdentifier",
																"src": "3585:6:18"
															},
															{
																"name": "_1",
																"nativeSrc": "3593:2:18",
																"nodeType": "YulIdentifier",
																"src": "3593:2:18"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3581:3:18",
															"nodeType": "YulIdentifier",
															"src": "3581:3:18"
														},
														"nativeSrc": "3581:15:18",
														"nodeType": "YulFunctionCall",
														"src": "3581:15:18"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nativeSrc": "3571:6:18",
															"nodeType": "YulIdentifier",
															"src": "3571:6:18"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "3448:1:18",
													"nodeType": "YulIdentifier",
													"src": "3448:1:18"
												},
												{
													"name": "length",
													"nativeSrc": "3451:6:18",
													"nodeType": "YulIdentifier",
													"src": "3451:6:18"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "3445:2:18",
												"nodeType": "YulIdentifier",
												"src": "3445:2:18"
											},
											"nativeSrc": "3445:13:18",
											"nodeType": "YulFunctionCall",
											"src": "3445:13:18"
										},
										"nativeSrc": "3437:169:18",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "3459:18:18",
											"nodeType": "YulBlock",
											"src": "3459:18:18",
											"statements": [
												{
													"nativeSrc": "3461:14:18",
													"nodeType": "YulAssignment",
													"src": "3461:14:18",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "3470:1:18",
																"nodeType": "YulIdentifier",
																"src": "3470:1:18"
															},
															{
																"kind": "number",
																"nativeSrc": "3473:1:18",
																"nodeType": "YulLiteral",
																"src": "3473:1:18",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3466:3:18",
															"nodeType": "YulIdentifier",
															"src": "3466:3:18"
														},
														"nativeSrc": "3466:9:18",
														"nodeType": "YulFunctionCall",
														"src": "3466:9:18"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "3461:1:18",
															"nodeType": "YulIdentifier",
															"src": "3461:1:18"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "3441:3:18",
											"nodeType": "YulBlock",
											"src": "3441:3:18",
											"statements": []
										},
										"src": "3437:169:18"
									},
									{
										"nativeSrc": "3615:11:18",
										"nodeType": "YulAssignment",
										"src": "3615:11:18",
										"value": {
											"name": "pos",
											"nativeSrc": "3623:3:18",
											"nodeType": "YulIdentifier",
											"src": "3623:3:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3615:4:18",
												"nodeType": "YulIdentifier",
												"src": "3615:4:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nativeSrc": "2373:1259:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2651:9:18",
									"nodeType": "YulTypedName",
									"src": "2651:9:18",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "2662:6:18",
									"nodeType": "YulTypedName",
									"src": "2662:6:18",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "2670:6:18",
									"nodeType": "YulTypedName",
									"src": "2670:6:18",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "2678:6:18",
									"nodeType": "YulTypedName",
									"src": "2678:6:18",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "2686:6:18",
									"nodeType": "YulTypedName",
									"src": "2686:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "2694:6:18",
									"nodeType": "YulTypedName",
									"src": "2694:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2702:6:18",
									"nodeType": "YulTypedName",
									"src": "2702:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2710:6:18",
									"nodeType": "YulTypedName",
									"src": "2710:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2721:4:18",
									"nodeType": "YulTypedName",
									"src": "2721:4:18",
									"type": ""
								}
							],
							"src": "2373:1259:18"
						},
						{
							"body": {
								"nativeSrc": "3807:523:18",
								"nodeType": "YulBlock",
								"src": "3807:523:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "3854:16:18",
											"nodeType": "YulBlock",
											"src": "3854:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3863:1:18",
																"nodeType": "YulLiteral",
																"src": "3863:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3866:1:18",
																"nodeType": "YulLiteral",
																"src": "3866:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3856:6:18",
															"nodeType": "YulIdentifier",
															"src": "3856:6:18"
														},
														"nativeSrc": "3856:12:18",
														"nodeType": "YulFunctionCall",
														"src": "3856:12:18"
													},
													"nativeSrc": "3856:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "3856:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3828:7:18",
															"nodeType": "YulIdentifier",
															"src": "3828:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "3837:9:18",
															"nodeType": "YulIdentifier",
															"src": "3837:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3824:3:18",
														"nodeType": "YulIdentifier",
														"src": "3824:3:18"
													},
													"nativeSrc": "3824:23:18",
													"nodeType": "YulFunctionCall",
													"src": "3824:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3849:3:18",
													"nodeType": "YulLiteral",
													"src": "3849:3:18",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3820:3:18",
												"nodeType": "YulIdentifier",
												"src": "3820:3:18"
											},
											"nativeSrc": "3820:33:18",
											"nodeType": "YulFunctionCall",
											"src": "3820:33:18"
										},
										"nativeSrc": "3817:53:18",
										"nodeType": "YulIf",
										"src": "3817:53:18"
									},
									{
										"nativeSrc": "3879:39:18",
										"nodeType": "YulAssignment",
										"src": "3879:39:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3908:9:18",
													"nodeType": "YulIdentifier",
													"src": "3908:9:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "3889:18:18",
												"nodeType": "YulIdentifier",
												"src": "3889:18:18"
											},
											"nativeSrc": "3889:29:18",
											"nodeType": "YulFunctionCall",
											"src": "3889:29:18"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "3879:6:18",
												"nodeType": "YulIdentifier",
												"src": "3879:6:18"
											}
										]
									},
									{
										"nativeSrc": "3927:48:18",
										"nodeType": "YulAssignment",
										"src": "3927:48:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3960:9:18",
															"nodeType": "YulIdentifier",
															"src": "3960:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3971:2:18",
															"nodeType": "YulLiteral",
															"src": "3971:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3956:3:18",
														"nodeType": "YulIdentifier",
														"src": "3956:3:18"
													},
													"nativeSrc": "3956:18:18",
													"nodeType": "YulFunctionCall",
													"src": "3956:18:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "3937:18:18",
												"nodeType": "YulIdentifier",
												"src": "3937:18:18"
											},
											"nativeSrc": "3937:38:18",
											"nodeType": "YulFunctionCall",
											"src": "3937:38:18"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "3927:6:18",
												"nodeType": "YulIdentifier",
												"src": "3927:6:18"
											}
										]
									},
									{
										"nativeSrc": "3984:42:18",
										"nodeType": "YulAssignment",
										"src": "3984:42:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4011:9:18",
															"nodeType": "YulIdentifier",
															"src": "4011:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4022:2:18",
															"nodeType": "YulLiteral",
															"src": "4022:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4007:3:18",
														"nodeType": "YulIdentifier",
														"src": "4007:3:18"
													},
													"nativeSrc": "4007:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4007:18:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3994:12:18",
												"nodeType": "YulIdentifier",
												"src": "3994:12:18"
											},
											"nativeSrc": "3994:32:18",
											"nodeType": "YulFunctionCall",
											"src": "3994:32:18"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "3984:6:18",
												"nodeType": "YulIdentifier",
												"src": "3984:6:18"
											}
										]
									},
									{
										"nativeSrc": "4035:42:18",
										"nodeType": "YulAssignment",
										"src": "4035:42:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4062:9:18",
															"nodeType": "YulIdentifier",
															"src": "4062:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4073:2:18",
															"nodeType": "YulLiteral",
															"src": "4073:2:18",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4058:3:18",
														"nodeType": "YulIdentifier",
														"src": "4058:3:18"
													},
													"nativeSrc": "4058:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4058:18:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4045:12:18",
												"nodeType": "YulIdentifier",
												"src": "4045:12:18"
											},
											"nativeSrc": "4045:32:18",
											"nodeType": "YulFunctionCall",
											"src": "4045:32:18"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "4035:6:18",
												"nodeType": "YulIdentifier",
												"src": "4035:6:18"
											}
										]
									},
									{
										"nativeSrc": "4086:46:18",
										"nodeType": "YulVariableDeclaration",
										"src": "4086:46:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4116:9:18",
															"nodeType": "YulIdentifier",
															"src": "4116:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4127:3:18",
															"nodeType": "YulLiteral",
															"src": "4127:3:18",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4112:3:18",
														"nodeType": "YulIdentifier",
														"src": "4112:3:18"
													},
													"nativeSrc": "4112:19:18",
													"nodeType": "YulFunctionCall",
													"src": "4112:19:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4099:12:18",
												"nodeType": "YulIdentifier",
												"src": "4099:12:18"
											},
											"nativeSrc": "4099:33:18",
											"nodeType": "YulFunctionCall",
											"src": "4099:33:18"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "4090:5:18",
												"nodeType": "YulTypedName",
												"src": "4090:5:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4180:16:18",
											"nodeType": "YulBlock",
											"src": "4180:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4189:1:18",
																"nodeType": "YulLiteral",
																"src": "4189:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4192:1:18",
																"nodeType": "YulLiteral",
																"src": "4192:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4182:6:18",
															"nodeType": "YulIdentifier",
															"src": "4182:6:18"
														},
														"nativeSrc": "4182:12:18",
														"nodeType": "YulFunctionCall",
														"src": "4182:12:18"
													},
													"nativeSrc": "4182:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "4182:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4154:5:18",
															"nodeType": "YulIdentifier",
															"src": "4154:5:18"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "4165:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "4165:5:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4172:4:18",
																	"nodeType": "YulLiteral",
																	"src": "4172:4:18",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "4161:3:18",
																"nodeType": "YulIdentifier",
																"src": "4161:3:18"
															},
															"nativeSrc": "4161:16:18",
															"nodeType": "YulFunctionCall",
															"src": "4161:16:18"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "4151:2:18",
														"nodeType": "YulIdentifier",
														"src": "4151:2:18"
													},
													"nativeSrc": "4151:27:18",
													"nodeType": "YulFunctionCall",
													"src": "4151:27:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4144:6:18",
												"nodeType": "YulIdentifier",
												"src": "4144:6:18"
											},
											"nativeSrc": "4144:35:18",
											"nodeType": "YulFunctionCall",
											"src": "4144:35:18"
										},
										"nativeSrc": "4141:55:18",
										"nodeType": "YulIf",
										"src": "4141:55:18"
									},
									{
										"nativeSrc": "4205:15:18",
										"nodeType": "YulAssignment",
										"src": "4205:15:18",
										"value": {
											"name": "value",
											"nativeSrc": "4215:5:18",
											"nodeType": "YulIdentifier",
											"src": "4215:5:18"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "4205:6:18",
												"nodeType": "YulIdentifier",
												"src": "4205:6:18"
											}
										]
									},
									{
										"nativeSrc": "4229:43:18",
										"nodeType": "YulAssignment",
										"src": "4229:43:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4256:9:18",
															"nodeType": "YulIdentifier",
															"src": "4256:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4267:3:18",
															"nodeType": "YulLiteral",
															"src": "4267:3:18",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4252:3:18",
														"nodeType": "YulIdentifier",
														"src": "4252:3:18"
													},
													"nativeSrc": "4252:19:18",
													"nodeType": "YulFunctionCall",
													"src": "4252:19:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4239:12:18",
												"nodeType": "YulIdentifier",
												"src": "4239:12:18"
											},
											"nativeSrc": "4239:33:18",
											"nodeType": "YulFunctionCall",
											"src": "4239:33:18"
										},
										"variableNames": [
											{
												"name": "value5",
												"nativeSrc": "4229:6:18",
												"nodeType": "YulIdentifier",
												"src": "4229:6:18"
											}
										]
									},
									{
										"nativeSrc": "4281:43:18",
										"nodeType": "YulAssignment",
										"src": "4281:43:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4308:9:18",
															"nodeType": "YulIdentifier",
															"src": "4308:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4319:3:18",
															"nodeType": "YulLiteral",
															"src": "4319:3:18",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4304:3:18",
														"nodeType": "YulIdentifier",
														"src": "4304:3:18"
													},
													"nativeSrc": "4304:19:18",
													"nodeType": "YulFunctionCall",
													"src": "4304:19:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4291:12:18",
												"nodeType": "YulIdentifier",
												"src": "4291:12:18"
											},
											"nativeSrc": "4291:33:18",
											"nodeType": "YulFunctionCall",
											"src": "4291:33:18"
										},
										"variableNames": [
											{
												"name": "value6",
												"nativeSrc": "4281:6:18",
												"nodeType": "YulIdentifier",
												"src": "4281:6:18"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "3637:693:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3725:9:18",
									"nodeType": "YulTypedName",
									"src": "3725:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3736:7:18",
									"nodeType": "YulTypedName",
									"src": "3736:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3748:6:18",
									"nodeType": "YulTypedName",
									"src": "3748:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "3756:6:18",
									"nodeType": "YulTypedName",
									"src": "3756:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "3764:6:18",
									"nodeType": "YulTypedName",
									"src": "3764:6:18",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "3772:6:18",
									"nodeType": "YulTypedName",
									"src": "3772:6:18",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "3780:6:18",
									"nodeType": "YulTypedName",
									"src": "3780:6:18",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "3788:6:18",
									"nodeType": "YulTypedName",
									"src": "3788:6:18",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "3796:6:18",
									"nodeType": "YulTypedName",
									"src": "3796:6:18",
									"type": ""
								}
							],
							"src": "3637:693:18"
						},
						{
							"body": {
								"nativeSrc": "4422:173:18",
								"nodeType": "YulBlock",
								"src": "4422:173:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "4468:16:18",
											"nodeType": "YulBlock",
											"src": "4468:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4477:1:18",
																"nodeType": "YulLiteral",
																"src": "4477:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4480:1:18",
																"nodeType": "YulLiteral",
																"src": "4480:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4470:6:18",
															"nodeType": "YulIdentifier",
															"src": "4470:6:18"
														},
														"nativeSrc": "4470:12:18",
														"nodeType": "YulFunctionCall",
														"src": "4470:12:18"
													},
													"nativeSrc": "4470:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "4470:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "4443:7:18",
															"nodeType": "YulIdentifier",
															"src": "4443:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "4452:9:18",
															"nodeType": "YulIdentifier",
															"src": "4452:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4439:3:18",
														"nodeType": "YulIdentifier",
														"src": "4439:3:18"
													},
													"nativeSrc": "4439:23:18",
													"nodeType": "YulFunctionCall",
													"src": "4439:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "4464:2:18",
													"nodeType": "YulLiteral",
													"src": "4464:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "4435:3:18",
												"nodeType": "YulIdentifier",
												"src": "4435:3:18"
											},
											"nativeSrc": "4435:32:18",
											"nodeType": "YulFunctionCall",
											"src": "4435:32:18"
										},
										"nativeSrc": "4432:52:18",
										"nodeType": "YulIf",
										"src": "4432:52:18"
									},
									{
										"nativeSrc": "4493:39:18",
										"nodeType": "YulAssignment",
										"src": "4493:39:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4522:9:18",
													"nodeType": "YulIdentifier",
													"src": "4522:9:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "4503:18:18",
												"nodeType": "YulIdentifier",
												"src": "4503:18:18"
											},
											"nativeSrc": "4503:29:18",
											"nodeType": "YulFunctionCall",
											"src": "4503:29:18"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "4493:6:18",
												"nodeType": "YulIdentifier",
												"src": "4493:6:18"
											}
										]
									},
									{
										"nativeSrc": "4541:48:18",
										"nodeType": "YulAssignment",
										"src": "4541:48:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4574:9:18",
															"nodeType": "YulIdentifier",
															"src": "4574:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4585:2:18",
															"nodeType": "YulLiteral",
															"src": "4585:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4570:3:18",
														"nodeType": "YulIdentifier",
														"src": "4570:3:18"
													},
													"nativeSrc": "4570:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4570:18:18"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "4551:18:18",
												"nodeType": "YulIdentifier",
												"src": "4551:18:18"
											},
											"nativeSrc": "4551:38:18",
											"nodeType": "YulFunctionCall",
											"src": "4551:38:18"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "4541:6:18",
												"nodeType": "YulIdentifier",
												"src": "4541:6:18"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "4335:260:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4380:9:18",
									"nodeType": "YulTypedName",
									"src": "4380:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "4391:7:18",
									"nodeType": "YulTypedName",
									"src": "4391:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "4403:6:18",
									"nodeType": "YulTypedName",
									"src": "4403:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4411:6:18",
									"nodeType": "YulTypedName",
									"src": "4411:6:18",
									"type": ""
								}
							],
							"src": "4335:260:18"
						},
						{
							"body": {
								"nativeSrc": "4655:325:18",
								"nodeType": "YulBlock",
								"src": "4655:325:18",
								"statements": [
									{
										"nativeSrc": "4665:22:18",
										"nodeType": "YulAssignment",
										"src": "4665:22:18",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "4679:1:18",
													"nodeType": "YulLiteral",
													"src": "4679:1:18",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "4682:4:18",
													"nodeType": "YulIdentifier",
													"src": "4682:4:18"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "4675:3:18",
												"nodeType": "YulIdentifier",
												"src": "4675:3:18"
											},
											"nativeSrc": "4675:12:18",
											"nodeType": "YulFunctionCall",
											"src": "4675:12:18"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "4665:6:18",
												"nodeType": "YulIdentifier",
												"src": "4665:6:18"
											}
										]
									},
									{
										"nativeSrc": "4696:38:18",
										"nodeType": "YulVariableDeclaration",
										"src": "4696:38:18",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "4726:4:18",
													"nodeType": "YulIdentifier",
													"src": "4726:4:18"
												},
												{
													"kind": "number",
													"nativeSrc": "4732:1:18",
													"nodeType": "YulLiteral",
													"src": "4732:1:18",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "4722:3:18",
												"nodeType": "YulIdentifier",
												"src": "4722:3:18"
											},
											"nativeSrc": "4722:12:18",
											"nodeType": "YulFunctionCall",
											"src": "4722:12:18"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "4700:18:18",
												"nodeType": "YulTypedName",
												"src": "4700:18:18",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4773:31:18",
											"nodeType": "YulBlock",
											"src": "4773:31:18",
											"statements": [
												{
													"nativeSrc": "4775:27:18",
													"nodeType": "YulAssignment",
													"src": "4775:27:18",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "4789:6:18",
																"nodeType": "YulIdentifier",
																"src": "4789:6:18"
															},
															{
																"kind": "number",
																"nativeSrc": "4797:4:18",
																"nodeType": "YulLiteral",
																"src": "4797:4:18",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "4785:3:18",
															"nodeType": "YulIdentifier",
															"src": "4785:3:18"
														},
														"nativeSrc": "4785:17:18",
														"nodeType": "YulFunctionCall",
														"src": "4785:17:18"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "4775:6:18",
															"nodeType": "YulIdentifier",
															"src": "4775:6:18"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "4753:18:18",
													"nodeType": "YulIdentifier",
													"src": "4753:18:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4746:6:18",
												"nodeType": "YulIdentifier",
												"src": "4746:6:18"
											},
											"nativeSrc": "4746:26:18",
											"nodeType": "YulFunctionCall",
											"src": "4746:26:18"
										},
										"nativeSrc": "4743:61:18",
										"nodeType": "YulIf",
										"src": "4743:61:18"
									},
									{
										"body": {
											"nativeSrc": "4863:111:18",
											"nodeType": "YulBlock",
											"src": "4863:111:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4884:1:18",
																"nodeType": "YulLiteral",
																"src": "4884:1:18",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4891:3:18",
																		"nodeType": "YulLiteral",
																		"src": "4891:3:18",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4896:10:18",
																		"nodeType": "YulLiteral",
																		"src": "4896:10:18",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "4887:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4887:3:18"
																},
																"nativeSrc": "4887:20:18",
																"nodeType": "YulFunctionCall",
																"src": "4887:20:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "4877:6:18",
															"nodeType": "YulIdentifier",
															"src": "4877:6:18"
														},
														"nativeSrc": "4877:31:18",
														"nodeType": "YulFunctionCall",
														"src": "4877:31:18"
													},
													"nativeSrc": "4877:31:18",
													"nodeType": "YulExpressionStatement",
													"src": "4877:31:18"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4928:1:18",
																"nodeType": "YulLiteral",
																"src": "4928:1:18",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "4931:4:18",
																"nodeType": "YulLiteral",
																"src": "4931:4:18",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "4921:6:18",
															"nodeType": "YulIdentifier",
															"src": "4921:6:18"
														},
														"nativeSrc": "4921:15:18",
														"nodeType": "YulFunctionCall",
														"src": "4921:15:18"
													},
													"nativeSrc": "4921:15:18",
													"nodeType": "YulExpressionStatement",
													"src": "4921:15:18"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4956:1:18",
																"nodeType": "YulLiteral",
																"src": "4956:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4959:4:18",
																"nodeType": "YulLiteral",
																"src": "4959:4:18",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4949:6:18",
															"nodeType": "YulIdentifier",
															"src": "4949:6:18"
														},
														"nativeSrc": "4949:15:18",
														"nodeType": "YulFunctionCall",
														"src": "4949:15:18"
													},
													"nativeSrc": "4949:15:18",
													"nodeType": "YulExpressionStatement",
													"src": "4949:15:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "4819:18:18",
													"nodeType": "YulIdentifier",
													"src": "4819:18:18"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "4842:6:18",
															"nodeType": "YulIdentifier",
															"src": "4842:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4850:2:18",
															"nodeType": "YulLiteral",
															"src": "4850:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "4839:2:18",
														"nodeType": "YulIdentifier",
														"src": "4839:2:18"
													},
													"nativeSrc": "4839:14:18",
													"nodeType": "YulFunctionCall",
													"src": "4839:14:18"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "4816:2:18",
												"nodeType": "YulIdentifier",
												"src": "4816:2:18"
											},
											"nativeSrc": "4816:38:18",
											"nodeType": "YulFunctionCall",
											"src": "4816:38:18"
										},
										"nativeSrc": "4813:161:18",
										"nodeType": "YulIf",
										"src": "4813:161:18"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "4600:380:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "4635:4:18",
									"nodeType": "YulTypedName",
									"src": "4635:4:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "4644:6:18",
									"nodeType": "YulTypedName",
									"src": "4644:6:18",
									"type": ""
								}
							],
							"src": "4600:380:18"
						},
						{
							"body": {
								"nativeSrc": "5017:95:18",
								"nodeType": "YulBlock",
								"src": "5017:95:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5034:1:18",
													"nodeType": "YulLiteral",
													"src": "5034:1:18",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "5041:3:18",
															"nodeType": "YulLiteral",
															"src": "5041:3:18",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "5046:10:18",
															"nodeType": "YulLiteral",
															"src": "5046:10:18",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "5037:3:18",
														"nodeType": "YulIdentifier",
														"src": "5037:3:18"
													},
													"nativeSrc": "5037:20:18",
													"nodeType": "YulFunctionCall",
													"src": "5037:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5027:6:18",
												"nodeType": "YulIdentifier",
												"src": "5027:6:18"
											},
											"nativeSrc": "5027:31:18",
											"nodeType": "YulFunctionCall",
											"src": "5027:31:18"
										},
										"nativeSrc": "5027:31:18",
										"nodeType": "YulExpressionStatement",
										"src": "5027:31:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5074:1:18",
													"nodeType": "YulLiteral",
													"src": "5074:1:18",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "5077:4:18",
													"nodeType": "YulLiteral",
													"src": "5077:4:18",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5067:6:18",
												"nodeType": "YulIdentifier",
												"src": "5067:6:18"
											},
											"nativeSrc": "5067:15:18",
											"nodeType": "YulFunctionCall",
											"src": "5067:15:18"
										},
										"nativeSrc": "5067:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "5067:15:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5098:1:18",
													"nodeType": "YulLiteral",
													"src": "5098:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "5101:4:18",
													"nodeType": "YulLiteral",
													"src": "5101:4:18",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "5091:6:18",
												"nodeType": "YulIdentifier",
												"src": "5091:6:18"
											},
											"nativeSrc": "5091:15:18",
											"nodeType": "YulFunctionCall",
											"src": "5091:15:18"
										},
										"nativeSrc": "5091:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "5091:15:18"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "4985:127:18",
							"nodeType": "YulFunctionDefinition",
							"src": "4985:127:18"
						},
						{
							"body": {
								"nativeSrc": "5358:350:18",
								"nodeType": "YulBlock",
								"src": "5358:350:18",
								"statements": [
									{
										"nativeSrc": "5368:27:18",
										"nodeType": "YulAssignment",
										"src": "5368:27:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5380:9:18",
													"nodeType": "YulIdentifier",
													"src": "5380:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5391:3:18",
													"nodeType": "YulLiteral",
													"src": "5391:3:18",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5376:3:18",
												"nodeType": "YulIdentifier",
												"src": "5376:3:18"
											},
											"nativeSrc": "5376:19:18",
											"nodeType": "YulFunctionCall",
											"src": "5376:19:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5368:4:18",
												"nodeType": "YulIdentifier",
												"src": "5368:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5411:9:18",
													"nodeType": "YulIdentifier",
													"src": "5411:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "5422:6:18",
													"nodeType": "YulIdentifier",
													"src": "5422:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5404:6:18",
												"nodeType": "YulIdentifier",
												"src": "5404:6:18"
											},
											"nativeSrc": "5404:25:18",
											"nodeType": "YulFunctionCall",
											"src": "5404:25:18"
										},
										"nativeSrc": "5404:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "5404:25:18"
									},
									{
										"nativeSrc": "5438:29:18",
										"nodeType": "YulVariableDeclaration",
										"src": "5438:29:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "5456:3:18",
															"nodeType": "YulLiteral",
															"src": "5456:3:18",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "5461:1:18",
															"nodeType": "YulLiteral",
															"src": "5461:1:18",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "5452:3:18",
														"nodeType": "YulIdentifier",
														"src": "5452:3:18"
													},
													"nativeSrc": "5452:11:18",
													"nodeType": "YulFunctionCall",
													"src": "5452:11:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5465:1:18",
													"nodeType": "YulLiteral",
													"src": "5465:1:18",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "5448:3:18",
												"nodeType": "YulIdentifier",
												"src": "5448:3:18"
											},
											"nativeSrc": "5448:19:18",
											"nodeType": "YulFunctionCall",
											"src": "5448:19:18"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "5442:2:18",
												"nodeType": "YulTypedName",
												"src": "5442:2:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5487:9:18",
															"nodeType": "YulIdentifier",
															"src": "5487:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5498:2:18",
															"nodeType": "YulLiteral",
															"src": "5498:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5483:3:18",
														"nodeType": "YulIdentifier",
														"src": "5483:3:18"
													},
													"nativeSrc": "5483:18:18",
													"nodeType": "YulFunctionCall",
													"src": "5483:18:18"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "5507:6:18",
															"nodeType": "YulIdentifier",
															"src": "5507:6:18"
														},
														{
															"name": "_1",
															"nativeSrc": "5515:2:18",
															"nodeType": "YulIdentifier",
															"src": "5515:2:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5503:3:18",
														"nodeType": "YulIdentifier",
														"src": "5503:3:18"
													},
													"nativeSrc": "5503:15:18",
													"nodeType": "YulFunctionCall",
													"src": "5503:15:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5476:6:18",
												"nodeType": "YulIdentifier",
												"src": "5476:6:18"
											},
											"nativeSrc": "5476:43:18",
											"nodeType": "YulFunctionCall",
											"src": "5476:43:18"
										},
										"nativeSrc": "5476:43:18",
										"nodeType": "YulExpressionStatement",
										"src": "5476:43:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5539:9:18",
															"nodeType": "YulIdentifier",
															"src": "5539:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5550:2:18",
															"nodeType": "YulLiteral",
															"src": "5550:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5535:3:18",
														"nodeType": "YulIdentifier",
														"src": "5535:3:18"
													},
													"nativeSrc": "5535:18:18",
													"nodeType": "YulFunctionCall",
													"src": "5535:18:18"
												},
												{
													"arguments": [
														{
															"name": "value2",
															"nativeSrc": "5559:6:18",
															"nodeType": "YulIdentifier",
															"src": "5559:6:18"
														},
														{
															"name": "_1",
															"nativeSrc": "5567:2:18",
															"nodeType": "YulIdentifier",
															"src": "5567:2:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5555:3:18",
														"nodeType": "YulIdentifier",
														"src": "5555:3:18"
													},
													"nativeSrc": "5555:15:18",
													"nodeType": "YulFunctionCall",
													"src": "5555:15:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5528:6:18",
												"nodeType": "YulIdentifier",
												"src": "5528:6:18"
											},
											"nativeSrc": "5528:43:18",
											"nodeType": "YulFunctionCall",
											"src": "5528:43:18"
										},
										"nativeSrc": "5528:43:18",
										"nodeType": "YulExpressionStatement",
										"src": "5528:43:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5591:9:18",
															"nodeType": "YulIdentifier",
															"src": "5591:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5602:2:18",
															"nodeType": "YulLiteral",
															"src": "5602:2:18",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5587:3:18",
														"nodeType": "YulIdentifier",
														"src": "5587:3:18"
													},
													"nativeSrc": "5587:18:18",
													"nodeType": "YulFunctionCall",
													"src": "5587:18:18"
												},
												{
													"name": "value3",
													"nativeSrc": "5607:6:18",
													"nodeType": "YulIdentifier",
													"src": "5607:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5580:6:18",
												"nodeType": "YulIdentifier",
												"src": "5580:6:18"
											},
											"nativeSrc": "5580:34:18",
											"nodeType": "YulFunctionCall",
											"src": "5580:34:18"
										},
										"nativeSrc": "5580:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "5580:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5634:9:18",
															"nodeType": "YulIdentifier",
															"src": "5634:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5645:3:18",
															"nodeType": "YulLiteral",
															"src": "5645:3:18",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5630:3:18",
														"nodeType": "YulIdentifier",
														"src": "5630:3:18"
													},
													"nativeSrc": "5630:19:18",
													"nodeType": "YulFunctionCall",
													"src": "5630:19:18"
												},
												{
													"name": "value4",
													"nativeSrc": "5651:6:18",
													"nodeType": "YulIdentifier",
													"src": "5651:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5623:6:18",
												"nodeType": "YulIdentifier",
												"src": "5623:6:18"
											},
											"nativeSrc": "5623:35:18",
											"nodeType": "YulFunctionCall",
											"src": "5623:35:18"
										},
										"nativeSrc": "5623:35:18",
										"nodeType": "YulExpressionStatement",
										"src": "5623:35:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5678:9:18",
															"nodeType": "YulIdentifier",
															"src": "5678:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5689:3:18",
															"nodeType": "YulLiteral",
															"src": "5689:3:18",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5674:3:18",
														"nodeType": "YulIdentifier",
														"src": "5674:3:18"
													},
													"nativeSrc": "5674:19:18",
													"nodeType": "YulFunctionCall",
													"src": "5674:19:18"
												},
												{
													"name": "value5",
													"nativeSrc": "5695:6:18",
													"nodeType": "YulIdentifier",
													"src": "5695:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5667:6:18",
												"nodeType": "YulIdentifier",
												"src": "5667:6:18"
											},
											"nativeSrc": "5667:35:18",
											"nodeType": "YulFunctionCall",
											"src": "5667:35:18"
										},
										"nativeSrc": "5667:35:18",
										"nodeType": "YulExpressionStatement",
										"src": "5667:35:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "5117:591:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5287:9:18",
									"nodeType": "YulTypedName",
									"src": "5287:9:18",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "5298:6:18",
									"nodeType": "YulTypedName",
									"src": "5298:6:18",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "5306:6:18",
									"nodeType": "YulTypedName",
									"src": "5306:6:18",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "5314:6:18",
									"nodeType": "YulTypedName",
									"src": "5314:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "5322:6:18",
									"nodeType": "YulTypedName",
									"src": "5322:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5330:6:18",
									"nodeType": "YulTypedName",
									"src": "5330:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5338:6:18",
									"nodeType": "YulTypedName",
									"src": "5338:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5349:4:18",
									"nodeType": "YulTypedName",
									"src": "5349:4:18",
									"type": ""
								}
							],
							"src": "5117:591:18"
						},
						{
							"body": {
								"nativeSrc": "5842:175:18",
								"nodeType": "YulBlock",
								"src": "5842:175:18",
								"statements": [
									{
										"nativeSrc": "5852:26:18",
										"nodeType": "YulAssignment",
										"src": "5852:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5864:9:18",
													"nodeType": "YulIdentifier",
													"src": "5864:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5875:2:18",
													"nodeType": "YulLiteral",
													"src": "5875:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5860:3:18",
												"nodeType": "YulIdentifier",
												"src": "5860:3:18"
											},
											"nativeSrc": "5860:18:18",
											"nodeType": "YulFunctionCall",
											"src": "5860:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5852:4:18",
												"nodeType": "YulIdentifier",
												"src": "5852:4:18"
											}
										]
									},
									{
										"nativeSrc": "5887:29:18",
										"nodeType": "YulVariableDeclaration",
										"src": "5887:29:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "5905:3:18",
															"nodeType": "YulLiteral",
															"src": "5905:3:18",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "5910:1:18",
															"nodeType": "YulLiteral",
															"src": "5910:1:18",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "5901:3:18",
														"nodeType": "YulIdentifier",
														"src": "5901:3:18"
													},
													"nativeSrc": "5901:11:18",
													"nodeType": "YulFunctionCall",
													"src": "5901:11:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5914:1:18",
													"nodeType": "YulLiteral",
													"src": "5914:1:18",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "5897:3:18",
												"nodeType": "YulIdentifier",
												"src": "5897:3:18"
											},
											"nativeSrc": "5897:19:18",
											"nodeType": "YulFunctionCall",
											"src": "5897:19:18"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "5891:2:18",
												"nodeType": "YulTypedName",
												"src": "5891:2:18",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5932:9:18",
													"nodeType": "YulIdentifier",
													"src": "5932:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "5947:6:18",
															"nodeType": "YulIdentifier",
															"src": "5947:6:18"
														},
														{
															"name": "_1",
															"nativeSrc": "5955:2:18",
															"nodeType": "YulIdentifier",
															"src": "5955:2:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5943:3:18",
														"nodeType": "YulIdentifier",
														"src": "5943:3:18"
													},
													"nativeSrc": "5943:15:18",
													"nodeType": "YulFunctionCall",
													"src": "5943:15:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5925:6:18",
												"nodeType": "YulIdentifier",
												"src": "5925:6:18"
											},
											"nativeSrc": "5925:34:18",
											"nodeType": "YulFunctionCall",
											"src": "5925:34:18"
										},
										"nativeSrc": "5925:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "5925:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5979:9:18",
															"nodeType": "YulIdentifier",
															"src": "5979:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5990:2:18",
															"nodeType": "YulLiteral",
															"src": "5990:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5975:3:18",
														"nodeType": "YulIdentifier",
														"src": "5975:3:18"
													},
													"nativeSrc": "5975:18:18",
													"nodeType": "YulFunctionCall",
													"src": "5975:18:18"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "5999:6:18",
															"nodeType": "YulIdentifier",
															"src": "5999:6:18"
														},
														{
															"name": "_1",
															"nativeSrc": "6007:2:18",
															"nodeType": "YulIdentifier",
															"src": "6007:2:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5995:3:18",
														"nodeType": "YulIdentifier",
														"src": "5995:3:18"
													},
													"nativeSrc": "5995:15:18",
													"nodeType": "YulFunctionCall",
													"src": "5995:15:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5968:6:18",
												"nodeType": "YulIdentifier",
												"src": "5968:6:18"
											},
											"nativeSrc": "5968:43:18",
											"nodeType": "YulFunctionCall",
											"src": "5968:43:18"
										},
										"nativeSrc": "5968:43:18",
										"nodeType": "YulExpressionStatement",
										"src": "5968:43:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
							"nativeSrc": "5713:304:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5803:9:18",
									"nodeType": "YulTypedName",
									"src": "5803:9:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5814:6:18",
									"nodeType": "YulTypedName",
									"src": "5814:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5822:6:18",
									"nodeType": "YulTypedName",
									"src": "5822:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5833:4:18",
									"nodeType": "YulTypedName",
									"src": "5833:4:18",
									"type": ""
								}
							],
							"src": "5713:304:18"
						},
						{
							"body": {
								"nativeSrc": "6179:188:18",
								"nodeType": "YulBlock",
								"src": "6179:188:18",
								"statements": [
									{
										"nativeSrc": "6189:26:18",
										"nodeType": "YulAssignment",
										"src": "6189:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6201:9:18",
													"nodeType": "YulIdentifier",
													"src": "6201:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6212:2:18",
													"nodeType": "YulLiteral",
													"src": "6212:2:18",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6197:3:18",
												"nodeType": "YulIdentifier",
												"src": "6197:3:18"
											},
											"nativeSrc": "6197:18:18",
											"nodeType": "YulFunctionCall",
											"src": "6197:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6189:4:18",
												"nodeType": "YulIdentifier",
												"src": "6189:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6231:9:18",
													"nodeType": "YulIdentifier",
													"src": "6231:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "6246:6:18",
															"nodeType": "YulIdentifier",
															"src": "6246:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "6262:3:18",
																			"nodeType": "YulLiteral",
																			"src": "6262:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "6267:1:18",
																			"nodeType": "YulLiteral",
																			"src": "6267:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "6258:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "6258:3:18"
																	},
																	"nativeSrc": "6258:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "6258:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6271:1:18",
																	"nodeType": "YulLiteral",
																	"src": "6271:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "6254:3:18",
																"nodeType": "YulIdentifier",
																"src": "6254:3:18"
															},
															"nativeSrc": "6254:19:18",
															"nodeType": "YulFunctionCall",
															"src": "6254:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "6242:3:18",
														"nodeType": "YulIdentifier",
														"src": "6242:3:18"
													},
													"nativeSrc": "6242:32:18",
													"nodeType": "YulFunctionCall",
													"src": "6242:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6224:6:18",
												"nodeType": "YulIdentifier",
												"src": "6224:6:18"
											},
											"nativeSrc": "6224:51:18",
											"nodeType": "YulFunctionCall",
											"src": "6224:51:18"
										},
										"nativeSrc": "6224:51:18",
										"nodeType": "YulExpressionStatement",
										"src": "6224:51:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6295:9:18",
															"nodeType": "YulIdentifier",
															"src": "6295:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "6306:2:18",
															"nodeType": "YulLiteral",
															"src": "6306:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6291:3:18",
														"nodeType": "YulIdentifier",
														"src": "6291:3:18"
													},
													"nativeSrc": "6291:18:18",
													"nodeType": "YulFunctionCall",
													"src": "6291:18:18"
												},
												{
													"name": "value1",
													"nativeSrc": "6311:6:18",
													"nodeType": "YulIdentifier",
													"src": "6311:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6284:6:18",
												"nodeType": "YulIdentifier",
												"src": "6284:6:18"
											},
											"nativeSrc": "6284:34:18",
											"nodeType": "YulFunctionCall",
											"src": "6284:34:18"
										},
										"nativeSrc": "6284:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "6284:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6338:9:18",
															"nodeType": "YulIdentifier",
															"src": "6338:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "6349:2:18",
															"nodeType": "YulLiteral",
															"src": "6349:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6334:3:18",
														"nodeType": "YulIdentifier",
														"src": "6334:3:18"
													},
													"nativeSrc": "6334:18:18",
													"nodeType": "YulFunctionCall",
													"src": "6334:18:18"
												},
												{
													"name": "value2",
													"nativeSrc": "6354:6:18",
													"nodeType": "YulIdentifier",
													"src": "6354:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6327:6:18",
												"nodeType": "YulIdentifier",
												"src": "6327:6:18"
											},
											"nativeSrc": "6327:34:18",
											"nodeType": "YulFunctionCall",
											"src": "6327:34:18"
										},
										"nativeSrc": "6327:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "6327:34:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "6022:345:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6132:9:18",
									"nodeType": "YulTypedName",
									"src": "6132:9:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6143:6:18",
									"nodeType": "YulTypedName",
									"src": "6143:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6151:6:18",
									"nodeType": "YulTypedName",
									"src": "6151:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6159:6:18",
									"nodeType": "YulTypedName",
									"src": "6159:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6170:4:18",
									"nodeType": "YulTypedName",
									"src": "6170:4:18",
									"type": ""
								}
							],
							"src": "6022:345:18"
						},
						{
							"body": {
								"nativeSrc": "6473:102:18",
								"nodeType": "YulBlock",
								"src": "6473:102:18",
								"statements": [
									{
										"nativeSrc": "6483:26:18",
										"nodeType": "YulAssignment",
										"src": "6483:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6495:9:18",
													"nodeType": "YulIdentifier",
													"src": "6495:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6506:2:18",
													"nodeType": "YulLiteral",
													"src": "6506:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6491:3:18",
												"nodeType": "YulIdentifier",
												"src": "6491:3:18"
											},
											"nativeSrc": "6491:18:18",
											"nodeType": "YulFunctionCall",
											"src": "6491:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6483:4:18",
												"nodeType": "YulIdentifier",
												"src": "6483:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6525:9:18",
													"nodeType": "YulIdentifier",
													"src": "6525:9:18"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "6540:6:18",
															"nodeType": "YulIdentifier",
															"src": "6540:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "6556:3:18",
																			"nodeType": "YulLiteral",
																			"src": "6556:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "6561:1:18",
																			"nodeType": "YulLiteral",
																			"src": "6561:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "6552:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "6552:3:18"
																	},
																	"nativeSrc": "6552:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "6552:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6565:1:18",
																	"nodeType": "YulLiteral",
																	"src": "6565:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "6548:3:18",
																"nodeType": "YulIdentifier",
																"src": "6548:3:18"
															},
															"nativeSrc": "6548:19:18",
															"nodeType": "YulFunctionCall",
															"src": "6548:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "6536:3:18",
														"nodeType": "YulIdentifier",
														"src": "6536:3:18"
													},
													"nativeSrc": "6536:32:18",
													"nodeType": "YulFunctionCall",
													"src": "6536:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6518:6:18",
												"nodeType": "YulIdentifier",
												"src": "6518:6:18"
											},
											"nativeSrc": "6518:51:18",
											"nodeType": "YulFunctionCall",
											"src": "6518:51:18"
										},
										"nativeSrc": "6518:51:18",
										"nodeType": "YulExpressionStatement",
										"src": "6518:51:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "6372:203:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6442:9:18",
									"nodeType": "YulTypedName",
									"src": "6442:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6453:6:18",
									"nodeType": "YulTypedName",
									"src": "6453:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6464:4:18",
									"nodeType": "YulTypedName",
									"src": "6464:4:18",
									"type": ""
								}
							],
							"src": "6372:203:18"
						},
						{
							"body": {
								"nativeSrc": "6628:174:18",
								"nodeType": "YulBlock",
								"src": "6628:174:18",
								"statements": [
									{
										"nativeSrc": "6638:16:18",
										"nodeType": "YulAssignment",
										"src": "6638:16:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6649:1:18",
													"nodeType": "YulIdentifier",
													"src": "6649:1:18"
												},
												{
													"name": "y",
													"nativeSrc": "6652:1:18",
													"nodeType": "YulIdentifier",
													"src": "6652:1:18"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6645:3:18",
												"nodeType": "YulIdentifier",
												"src": "6645:3:18"
											},
											"nativeSrc": "6645:9:18",
											"nodeType": "YulFunctionCall",
											"src": "6645:9:18"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "6638:3:18",
												"nodeType": "YulIdentifier",
												"src": "6638:3:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6685:111:18",
											"nodeType": "YulBlock",
											"src": "6685:111:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6706:1:18",
																"nodeType": "YulLiteral",
																"src": "6706:1:18",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6713:3:18",
																		"nodeType": "YulLiteral",
																		"src": "6713:3:18",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6718:10:18",
																		"nodeType": "YulLiteral",
																		"src": "6718:10:18",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "6709:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6709:3:18"
																},
																"nativeSrc": "6709:20:18",
																"nodeType": "YulFunctionCall",
																"src": "6709:20:18"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "6699:6:18",
															"nodeType": "YulIdentifier",
															"src": "6699:6:18"
														},
														"nativeSrc": "6699:31:18",
														"nodeType": "YulFunctionCall",
														"src": "6699:31:18"
													},
													"nativeSrc": "6699:31:18",
													"nodeType": "YulExpressionStatement",
													"src": "6699:31:18"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6750:1:18",
																"nodeType": "YulLiteral",
																"src": "6750:1:18",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "6753:4:18",
																"nodeType": "YulLiteral",
																"src": "6753:4:18",
																"type": "",
																"value": "0x11"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "6743:6:18",
															"nodeType": "YulIdentifier",
															"src": "6743:6:18"
														},
														"nativeSrc": "6743:15:18",
														"nodeType": "YulFunctionCall",
														"src": "6743:15:18"
													},
													"nativeSrc": "6743:15:18",
													"nodeType": "YulExpressionStatement",
													"src": "6743:15:18"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6778:1:18",
																"nodeType": "YulLiteral",
																"src": "6778:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "6781:4:18",
																"nodeType": "YulLiteral",
																"src": "6781:4:18",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "6771:6:18",
															"nodeType": "YulIdentifier",
															"src": "6771:6:18"
														},
														"nativeSrc": "6771:15:18",
														"nodeType": "YulFunctionCall",
														"src": "6771:15:18"
													},
													"nativeSrc": "6771:15:18",
													"nodeType": "YulExpressionStatement",
													"src": "6771:15:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6669:1:18",
													"nodeType": "YulIdentifier",
													"src": "6669:1:18"
												},
												{
													"name": "sum",
													"nativeSrc": "6672:3:18",
													"nodeType": "YulIdentifier",
													"src": "6672:3:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "6666:2:18",
												"nodeType": "YulIdentifier",
												"src": "6666:2:18"
											},
											"nativeSrc": "6666:10:18",
											"nodeType": "YulFunctionCall",
											"src": "6666:10:18"
										},
										"nativeSrc": "6663:133:18",
										"nodeType": "YulIf",
										"src": "6663:133:18"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "6580:222:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "6611:1:18",
									"nodeType": "YulTypedName",
									"src": "6611:1:18",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "6614:1:18",
									"nodeType": "YulTypedName",
									"src": "6614:1:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "6620:3:18",
									"nodeType": "YulTypedName",
									"src": "6620:3:18",
									"type": ""
								}
							],
							"src": "6580:222:18"
						},
						{
							"body": {
								"nativeSrc": "7020:276:18",
								"nodeType": "YulBlock",
								"src": "7020:276:18",
								"statements": [
									{
										"nativeSrc": "7030:27:18",
										"nodeType": "YulAssignment",
										"src": "7030:27:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7042:9:18",
													"nodeType": "YulIdentifier",
													"src": "7042:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "7053:3:18",
													"nodeType": "YulLiteral",
													"src": "7053:3:18",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7038:3:18",
												"nodeType": "YulIdentifier",
												"src": "7038:3:18"
											},
											"nativeSrc": "7038:19:18",
											"nodeType": "YulFunctionCall",
											"src": "7038:19:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7030:4:18",
												"nodeType": "YulIdentifier",
												"src": "7030:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7073:9:18",
													"nodeType": "YulIdentifier",
													"src": "7073:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "7084:6:18",
													"nodeType": "YulIdentifier",
													"src": "7084:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7066:6:18",
												"nodeType": "YulIdentifier",
												"src": "7066:6:18"
											},
											"nativeSrc": "7066:25:18",
											"nodeType": "YulFunctionCall",
											"src": "7066:25:18"
										},
										"nativeSrc": "7066:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "7066:25:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7111:9:18",
															"nodeType": "YulIdentifier",
															"src": "7111:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7122:2:18",
															"nodeType": "YulLiteral",
															"src": "7122:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7107:3:18",
														"nodeType": "YulIdentifier",
														"src": "7107:3:18"
													},
													"nativeSrc": "7107:18:18",
													"nodeType": "YulFunctionCall",
													"src": "7107:18:18"
												},
												{
													"name": "value1",
													"nativeSrc": "7127:6:18",
													"nodeType": "YulIdentifier",
													"src": "7127:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7100:6:18",
												"nodeType": "YulIdentifier",
												"src": "7100:6:18"
											},
											"nativeSrc": "7100:34:18",
											"nodeType": "YulFunctionCall",
											"src": "7100:34:18"
										},
										"nativeSrc": "7100:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "7100:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7154:9:18",
															"nodeType": "YulIdentifier",
															"src": "7154:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7165:2:18",
															"nodeType": "YulLiteral",
															"src": "7165:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7150:3:18",
														"nodeType": "YulIdentifier",
														"src": "7150:3:18"
													},
													"nativeSrc": "7150:18:18",
													"nodeType": "YulFunctionCall",
													"src": "7150:18:18"
												},
												{
													"name": "value2",
													"nativeSrc": "7170:6:18",
													"nodeType": "YulIdentifier",
													"src": "7170:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7143:6:18",
												"nodeType": "YulIdentifier",
												"src": "7143:6:18"
											},
											"nativeSrc": "7143:34:18",
											"nodeType": "YulFunctionCall",
											"src": "7143:34:18"
										},
										"nativeSrc": "7143:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "7143:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7197:9:18",
															"nodeType": "YulIdentifier",
															"src": "7197:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7208:2:18",
															"nodeType": "YulLiteral",
															"src": "7208:2:18",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7193:3:18",
														"nodeType": "YulIdentifier",
														"src": "7193:3:18"
													},
													"nativeSrc": "7193:18:18",
													"nodeType": "YulFunctionCall",
													"src": "7193:18:18"
												},
												{
													"name": "value3",
													"nativeSrc": "7213:6:18",
													"nodeType": "YulIdentifier",
													"src": "7213:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7186:6:18",
												"nodeType": "YulIdentifier",
												"src": "7186:6:18"
											},
											"nativeSrc": "7186:34:18",
											"nodeType": "YulFunctionCall",
											"src": "7186:34:18"
										},
										"nativeSrc": "7186:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "7186:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7240:9:18",
															"nodeType": "YulIdentifier",
															"src": "7240:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7251:3:18",
															"nodeType": "YulLiteral",
															"src": "7251:3:18",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7236:3:18",
														"nodeType": "YulIdentifier",
														"src": "7236:3:18"
													},
													"nativeSrc": "7236:19:18",
													"nodeType": "YulFunctionCall",
													"src": "7236:19:18"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "7261:6:18",
															"nodeType": "YulIdentifier",
															"src": "7261:6:18"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "7277:3:18",
																			"nodeType": "YulLiteral",
																			"src": "7277:3:18",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "7282:1:18",
																			"nodeType": "YulLiteral",
																			"src": "7282:1:18",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "7273:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "7273:3:18"
																	},
																	"nativeSrc": "7273:11:18",
																	"nodeType": "YulFunctionCall",
																	"src": "7273:11:18"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7286:1:18",
																	"nodeType": "YulLiteral",
																	"src": "7286:1:18",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "7269:3:18",
																"nodeType": "YulIdentifier",
																"src": "7269:3:18"
															},
															"nativeSrc": "7269:19:18",
															"nodeType": "YulFunctionCall",
															"src": "7269:19:18"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7257:3:18",
														"nodeType": "YulIdentifier",
														"src": "7257:3:18"
													},
													"nativeSrc": "7257:32:18",
													"nodeType": "YulFunctionCall",
													"src": "7257:32:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7229:6:18",
												"nodeType": "YulIdentifier",
												"src": "7229:6:18"
											},
											"nativeSrc": "7229:61:18",
											"nodeType": "YulFunctionCall",
											"src": "7229:61:18"
										},
										"nativeSrc": "7229:61:18",
										"nodeType": "YulExpressionStatement",
										"src": "7229:61:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "6807:489:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6957:9:18",
									"nodeType": "YulTypedName",
									"src": "6957:9:18",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "6968:6:18",
									"nodeType": "YulTypedName",
									"src": "6968:6:18",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "6976:6:18",
									"nodeType": "YulTypedName",
									"src": "6976:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6984:6:18",
									"nodeType": "YulTypedName",
									"src": "6984:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6992:6:18",
									"nodeType": "YulTypedName",
									"src": "6992:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7000:6:18",
									"nodeType": "YulTypedName",
									"src": "7000:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7011:4:18",
									"nodeType": "YulTypedName",
									"src": "7011:4:18",
									"type": ""
								}
							],
							"src": "6807:489:18"
						},
						{
							"body": {
								"nativeSrc": "7482:217:18",
								"nodeType": "YulBlock",
								"src": "7482:217:18",
								"statements": [
									{
										"nativeSrc": "7492:27:18",
										"nodeType": "YulAssignment",
										"src": "7492:27:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7504:9:18",
													"nodeType": "YulIdentifier",
													"src": "7504:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "7515:3:18",
													"nodeType": "YulLiteral",
													"src": "7515:3:18",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7500:3:18",
												"nodeType": "YulIdentifier",
												"src": "7500:3:18"
											},
											"nativeSrc": "7500:19:18",
											"nodeType": "YulFunctionCall",
											"src": "7500:19:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7492:4:18",
												"nodeType": "YulIdentifier",
												"src": "7492:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7535:9:18",
													"nodeType": "YulIdentifier",
													"src": "7535:9:18"
												},
												{
													"name": "value0",
													"nativeSrc": "7546:6:18",
													"nodeType": "YulIdentifier",
													"src": "7546:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7528:6:18",
												"nodeType": "YulIdentifier",
												"src": "7528:6:18"
											},
											"nativeSrc": "7528:25:18",
											"nodeType": "YulFunctionCall",
											"src": "7528:25:18"
										},
										"nativeSrc": "7528:25:18",
										"nodeType": "YulExpressionStatement",
										"src": "7528:25:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7573:9:18",
															"nodeType": "YulIdentifier",
															"src": "7573:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7584:2:18",
															"nodeType": "YulLiteral",
															"src": "7584:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7569:3:18",
														"nodeType": "YulIdentifier",
														"src": "7569:3:18"
													},
													"nativeSrc": "7569:18:18",
													"nodeType": "YulFunctionCall",
													"src": "7569:18:18"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "7593:6:18",
															"nodeType": "YulIdentifier",
															"src": "7593:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7601:4:18",
															"nodeType": "YulLiteral",
															"src": "7601:4:18",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7589:3:18",
														"nodeType": "YulIdentifier",
														"src": "7589:3:18"
													},
													"nativeSrc": "7589:17:18",
													"nodeType": "YulFunctionCall",
													"src": "7589:17:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7562:6:18",
												"nodeType": "YulIdentifier",
												"src": "7562:6:18"
											},
											"nativeSrc": "7562:45:18",
											"nodeType": "YulFunctionCall",
											"src": "7562:45:18"
										},
										"nativeSrc": "7562:45:18",
										"nodeType": "YulExpressionStatement",
										"src": "7562:45:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7627:9:18",
															"nodeType": "YulIdentifier",
															"src": "7627:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7638:2:18",
															"nodeType": "YulLiteral",
															"src": "7638:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7623:3:18",
														"nodeType": "YulIdentifier",
														"src": "7623:3:18"
													},
													"nativeSrc": "7623:18:18",
													"nodeType": "YulFunctionCall",
													"src": "7623:18:18"
												},
												{
													"name": "value2",
													"nativeSrc": "7643:6:18",
													"nodeType": "YulIdentifier",
													"src": "7643:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7616:6:18",
												"nodeType": "YulIdentifier",
												"src": "7616:6:18"
											},
											"nativeSrc": "7616:34:18",
											"nodeType": "YulFunctionCall",
											"src": "7616:34:18"
										},
										"nativeSrc": "7616:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "7616:34:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7670:9:18",
															"nodeType": "YulIdentifier",
															"src": "7670:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7681:2:18",
															"nodeType": "YulLiteral",
															"src": "7681:2:18",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7666:3:18",
														"nodeType": "YulIdentifier",
														"src": "7666:3:18"
													},
													"nativeSrc": "7666:18:18",
													"nodeType": "YulFunctionCall",
													"src": "7666:18:18"
												},
												{
													"name": "value3",
													"nativeSrc": "7686:6:18",
													"nodeType": "YulIdentifier",
													"src": "7686:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7659:6:18",
												"nodeType": "YulIdentifier",
												"src": "7659:6:18"
											},
											"nativeSrc": "7659:34:18",
											"nodeType": "YulFunctionCall",
											"src": "7659:34:18"
										},
										"nativeSrc": "7659:34:18",
										"nodeType": "YulExpressionStatement",
										"src": "7659:34:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
							"nativeSrc": "7301:398:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7427:9:18",
									"nodeType": "YulTypedName",
									"src": "7427:9:18",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "7438:6:18",
									"nodeType": "YulTypedName",
									"src": "7438:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "7446:6:18",
									"nodeType": "YulTypedName",
									"src": "7446:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "7454:6:18",
									"nodeType": "YulTypedName",
									"src": "7454:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7462:6:18",
									"nodeType": "YulTypedName",
									"src": "7462:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7473:4:18",
									"nodeType": "YulTypedName",
									"src": "7473:4:18",
									"type": ""
								}
							],
							"src": "7301:398:18"
						},
						{
							"body": {
								"nativeSrc": "7736:95:18",
								"nodeType": "YulBlock",
								"src": "7736:95:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7753:1:18",
													"nodeType": "YulLiteral",
													"src": "7753:1:18",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "7760:3:18",
															"nodeType": "YulLiteral",
															"src": "7760:3:18",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "7765:10:18",
															"nodeType": "YulLiteral",
															"src": "7765:10:18",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "7756:3:18",
														"nodeType": "YulIdentifier",
														"src": "7756:3:18"
													},
													"nativeSrc": "7756:20:18",
													"nodeType": "YulFunctionCall",
													"src": "7756:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7746:6:18",
												"nodeType": "YulIdentifier",
												"src": "7746:6:18"
											},
											"nativeSrc": "7746:31:18",
											"nodeType": "YulFunctionCall",
											"src": "7746:31:18"
										},
										"nativeSrc": "7746:31:18",
										"nodeType": "YulExpressionStatement",
										"src": "7746:31:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7793:1:18",
													"nodeType": "YulLiteral",
													"src": "7793:1:18",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "7796:4:18",
													"nodeType": "YulLiteral",
													"src": "7796:4:18",
													"type": "",
													"value": "0x21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7786:6:18",
												"nodeType": "YulIdentifier",
												"src": "7786:6:18"
											},
											"nativeSrc": "7786:15:18",
											"nodeType": "YulFunctionCall",
											"src": "7786:15:18"
										},
										"nativeSrc": "7786:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "7786:15:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7817:1:18",
													"nodeType": "YulLiteral",
													"src": "7817:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "7820:4:18",
													"nodeType": "YulLiteral",
													"src": "7820:4:18",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "7810:6:18",
												"nodeType": "YulIdentifier",
												"src": "7810:6:18"
											},
											"nativeSrc": "7810:15:18",
											"nodeType": "YulFunctionCall",
											"src": "7810:15:18"
										},
										"nativeSrc": "7810:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "7810:15:18"
									}
								]
							},
							"name": "panic_error_0x21",
							"nativeSrc": "7704:127:18",
							"nodeType": "YulFunctionDefinition",
							"src": "7704:127:18"
						}
					]
				},
				"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        let _1 := 32\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value4 := value\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
				"id": 18,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {
			"2019": [
				{
					"length": 32,
					"start": 1536
				}
			],
			"2021": [
				{
					"length": 32,
					"start": 1494
				}
			],
			"2023": [
				{
					"length": 32,
					"start": 1452
				}
			],
			"2025": [
				{
					"length": 32,
					"start": 1617
				}
			],
			"2027": [
				{
					"length": 32,
					"start": 1657
				}
			],
			"2030": [
				{
					"length": 32,
					"start": 1745
				}
			],
			"2033": [
				{
					"length": 32,
					"start": 1790
				}
			]
		},
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101a8578063a9059cbb146101b0578063d505accf146101c3578063dd62ed3e146101d857600080fd5b806370a08231146101515780637ecebe001461017a57806384b0196e1461018d57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633644e51514610149575b600080fd5b6100dc610211565b6040516100e99190610c62565b60405180910390f35b610105610100366004610c98565b6102a3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610cc2565b6102bd565b604051601281526020016100e9565b6101196102e1565b61011961015f366004610cfe565b6001600160a01b031660009081526020819052604090205490565b610119610188366004610cfe565b6102f0565b61019561030e565b6040516100e99796959493929190610d19565b6100dc610354565b6101056101be366004610c98565b610363565b6101d66101d1366004610db2565b610371565b005b6101196101e6366004610e25565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022090610e58565b80601f016020809104026020016040519081016040528092919081815260200182805461024c90610e58565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050905090565b6000336102b18185856104b0565b60019150505b92915050565b6000336102cb8582856104c2565b6102d6858585610540565b506001949350505050565b60006102eb61059f565b905090565b6001600160a01b0381166000908152600760205260408120546102b7565b6000606080600080600060606103226106ca565b61032a6106f7565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461022090610e58565b6000336102b1818585610540565b8342111561039a5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886103e78c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061044282610724565b9050600061045282878787610751565b9050896001600160a01b0316816001600160a01b031614610499576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610391565b6104a48a8a8a6104b0565b50505050505050505050565b6104bd838383600161077f565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461053a578181101561052b57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610391565b61053a8484848403600061077f565b50505050565b6001600160a01b03831661056a57604051634b637e8f60e11b815260006004820152602401610391565b6001600160a01b0382166105945760405163ec442f0560e01b815260006004820152602401610391565b6104bd838383610854565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156105f857507f000000000000000000000000000000000000000000000000000000000000000046145b1561062257507f000000000000000000000000000000000000000000000000000000000000000090565b6102eb604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60606102eb7f0000000000000000000000000000000000000000000000000000000000000000600561097e565b60606102eb7f0000000000000000000000000000000000000000000000000000000000000000600661097e565b60006102b761073161059f565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061076388888888610a29565b9250925092506107738282610af8565b50909695505050505050565b6001600160a01b0384166107a95760405163e602df0560e01b815260006004820152602401610391565b6001600160a01b0383166107d357604051634a1406b160e11b815260006004820152602401610391565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561053a57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161084691815260200190565b60405180910390a350505050565b6001600160a01b03831661087f5780600260008282546108749190610e92565b909155506108f19050565b6001600160a01b038316600090815260208190526040902054818110156108d25760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610391565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661090d5760028054829003905561092c565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161097191815260200190565b60405180910390a3505050565b606060ff83146109985761099183610bb5565b90506102b7565b8180546109a490610e58565b80601f01602080910402602001604051908101604052809291908181526020018280546109d090610e58565b8015610a1d5780601f106109f257610100808354040283529160200191610a1d565b820191906000526020600020905b815481529060010190602001808311610a0057829003601f168201915b505050505090506102b7565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610a645750600091506003905082610aee565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610ab8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ae457506000925060019150829050610aee565b9250600091508190505b9450945094915050565b6000826003811115610b0c57610b0c610eb3565b03610b15575050565b6001826003811115610b2957610b29610eb3565b03610b475760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610b5b57610b5b610eb3565b03610b7c5760405163fce698f760e01b815260048101829052602401610391565b6003826003811115610b9057610b90610eb3565b03610bb1576040516335e2f38360e21b815260048101829052602401610391565b5050565b60606000610bc283610bf4565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156102b757604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b81811015610c4257602081850181015186830182015201610c26565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610c756020830184610c1c565b9392505050565b80356001600160a01b0381168114610c9357600080fd5b919050565b60008060408385031215610cab57600080fd5b610cb483610c7c565b946020939093013593505050565b600080600060608486031215610cd757600080fd5b610ce084610c7c565b9250610cee60208501610c7c565b9150604084013590509250925092565b600060208284031215610d1057600080fd5b610c7582610c7c565b60ff60f81b881681526000602060e06020840152610d3a60e084018a610c1c565b8381036040850152610d4c818a610c1c565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b81811015610da057835183529284019291840191600101610d84565b50909c9b505050505050505050505050565b600080600080600080600060e0888a031215610dcd57600080fd5b610dd688610c7c565b9650610de460208901610c7c565b95506040880135945060608801359350608088013560ff81168114610e0857600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e3857600080fd5b610e4183610c7c565b9150610e4f60208401610c7c565b90509250929050565b600181811c90821680610e6c57607f821691505b602082108103610e8c57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102b757634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212209fcada7485cfd0367975e363f341cc51d41c08eba8101e259d7b0fa6e054291764736f6c63430008190033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x149 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x211 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x135 CALLDATASIZE PUSH1 0x4 PUSH2 0xCC2 JUMP JUMPDEST PUSH2 0x2BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x2E1 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xCFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST PUSH2 0x195 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD19 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x354 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDB2 JUMP JUMPDEST PUSH2 0x371 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x119 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x220 SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x24C SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x299 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x26E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x299 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x27C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B1 DUP2 DUP6 DUP6 PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2CB DUP6 DUP3 DUP6 PUSH2 0x4C2 JUMP JUMPDEST PUSH2 0x2D6 DUP6 DUP6 DUP6 PUSH2 0x540 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB PUSH2 0x59F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0x322 PUSH2 0x6CA JUMP JUMPDEST PUSH2 0x32A PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x220 SWAP1 PUSH2 0xE58 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B1 DUP2 DUP6 DUP6 PUSH2 0x540 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x3E7 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x442 DUP3 PUSH2 0x724 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x452 DUP3 DUP8 DUP8 DUP8 PUSH2 0x751 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x499 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x4A4 DUP11 DUP11 DUP11 PUSH2 0x4B0 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4BD DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x77F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x53A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52B JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x53A DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x77F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x56A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x594 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x4BD DUP4 DUP4 DUP4 PUSH2 0x854 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x5F8 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x622 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EB PUSH32 0x0 PUSH1 0x5 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EB PUSH32 0x0 PUSH1 0x6 PUSH2 0x97E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7 PUSH2 0x731 PUSH2 0x59F JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x763 DUP9 DUP9 DUP9 DUP9 PUSH2 0xA29 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x773 DUP3 DUP3 PUSH2 0xAF8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x53A JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x846 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x87F JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x874 SWAP2 SWAP1 PUSH2 0xE92 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x8F1 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x90D JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x971 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0x998 JUMPI PUSH2 0x991 DUP4 PUSH2 0xBB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B7 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x9A4 SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9D0 SWAP1 PUSH2 0xE58 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA1D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA1D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA00 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xA64 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xAEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAE4 JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xAEE JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB0C JUMPI PUSH2 0xB0C PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xB15 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB29 JUMPI PUSH2 0xB29 PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB5B JUMPI PUSH2 0xB5B PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xB7C JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB90 JUMPI PUSH2 0xB90 PUSH2 0xEB3 JUMP JUMPDEST SUB PUSH2 0xBB1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x391 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xBC2 DUP4 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC42 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xC26 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC75 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC1C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB4 DUP4 PUSH2 0xC7C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCE0 DUP5 PUSH2 0xC7C JUMP JUMPDEST SWAP3 POP PUSH2 0xCEE PUSH1 0x20 DUP6 ADD PUSH2 0xC7C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC75 DUP3 PUSH2 0xC7C JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xD3A PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0xC1C JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xD4C DUP2 DUP11 PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA0 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xD84 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xDCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD6 DUP9 PUSH2 0xC7C JUMP JUMPDEST SWAP7 POP PUSH2 0xDE4 PUSH1 0x20 DUP10 ADD PUSH2 0xC7C JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE41 DUP4 PUSH2 0xC7C JUMP JUMPDEST SWAP2 POP PUSH2 0xE4F PUSH1 0x20 DUP5 ADD PUSH2 0xC7C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xE6C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE8C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2B7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 0xCA 0xDA PUSH21 0x85CFD0367975E363F341CC51D41C08EBA8101E259D PUSH28 0xFA6E054291764736F6C634300081900330000000000000000000000 ",
		"sourceMap": "249:165:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1269:14:18;;1262:22;1244:41;;1232:2;1217:18;4293:186:2;1104:187:18;3144:97:2;3222:12;;3144:97;;;1442:25:18;;;1430:2;1415:18;3144:97:2;1296:177:18;5039:244:2;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1953:36:18;;1941:2;1926:18;3002:82:2;1811:184:18;2656:112:4;;;:::i;3299:116:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:2;3364:7;3390:18;;;;;;;;;;;;3299:116;2406:143:4;;;;;;:::i;:::-;;:::i;5144:557:13:-;;;:::i;:::-;;;;;;;;;;;;;:::i;2276:93:2:-;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;1680:672:4:-;;;;;;:::i;:::-;;:::i;:::-;;3846:140:2;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:2;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2074:89;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:7;4420:31:2;735:10:7;4436:7:2;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:7;5182:37:2;5198:4;735:10:7;5213:5:2;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:2;;5039:244;-1:-1:-1;;;;5039:244:2:o;2656:112:4:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;2406:143::-;-1:-1:-1;;;;;624:14:8;;2497:7:4;624:14:8;;;:7;:14;;;;;;2523:19:4;538:107:8;5144:557:13;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:13;;;-1:-1:-1;5482:212:13;;-1:-1:-1;5590:13:13;;-1:-1:-1;5625:4:13;;-1:-1:-1;5652:1:13;-1:-1:-1;5668:16:13;-1:-1:-1;5482:212:13;-1:-1:-1;5144:557:13:o;2276:93:2:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:7;3733:27:2;735:10:7;3750:2:2;3754:5;3733:9;:27::i;1680:672:4:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:4;;;;;1442:25:18;;;1415:18;;1932:33:4;;;;;;;;1879:97;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:8;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:4;2017:78;;;;;;5404:25:18;;;;-1:-1:-1;;;;;5503:15:18;;;5483:18;;;5476:43;5555:15;;;;5535:18;;;5528:43;5587:18;;;5580:34;5630:19;;;5623:35;5674:19;;;5667:35;;;5376:19;;2017:78:4;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:4;:6;-1:-1:-1;;;;;2220:15:4;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:4;;-1:-1:-1;;;;;5943:15:18;;;2258:35:4;;;5925:34:18;5995:15;;5975:18;;;5968:43;5860:18;;2258:35:4;5713:304:18;2216:88:4;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;8989:128:2:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:2;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:2;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:2;;-1:-1:-1;;;;;6242:32:18;;10936:60:2;;;6224:51:18;6291:18;;;6284:34;;;6334:18;;;6327:34;;;6197:18;;10936:60:2;6022:345:18;10881:130:2;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:2;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:2;;5807:1;5780:30;;;6518:51:18;6491:18;;5780:30:2;6372:203:18;5735:86:2;-1:-1:-1;;;;;5834:16:2;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:2;;5902:1;5873:32;;;6518:51:18;6491:18;;5873:32:2;6372:203:18;5830:86:2;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:13:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:13;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:13;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;7066:25:18;4226:11:13;7107:18:18;;;7100:34;;;;4239:14:13;7150:18:18;;;7143:34;4255:13:13;7193:18:18;;;7186:34;4278:4:13;7236:19:18;;;7229:61;4168:7:13;;7038:19:18;;4204:80:13;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;6021:126;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;4917:176::-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:14;3549:11;-1:-1:-1;;;3573:23:14;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:12;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:12;;6803:260;-1:-1:-1;;;;;;6803:260:12:o;9949:432:2:-;-1:-1:-1;;;;;10061:19:2;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:2;;10132:1;10103:32;;;6518:51:18;6491:18;;10103:32:2;6372:203:18;10057:89:2;-1:-1:-1;;;;;10159:21:2;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:2;;10231:1;10203:31;;;6518:51:18;6491:18;;10203:31:2;6372:203:18;10155:90:2;-1:-1:-1;;;;;10254:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:2;10342:5;-1:-1:-1;;;;;10333:31:2;;10358:5;10333:31;;;;1442:25:18;;1430:2;1415:18;;1296:177;10333:31:2;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:2;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:2;;-1:-1:-1;6356:540:2;;-1:-1:-1;;;;;6570:15:2;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:2;;-1:-1:-1;;;;;6242:32:18;;6649:50:2;;;6224:51:18;6291:18;;;6284:34;;;6334:18;;;6327:34;;;6197:18;;6649:50:2;6022:345:18;6599:115:2;-1:-1:-1;;;;;6834:15:2;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:2;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:2;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:2;7355:4;-1:-1:-1;;;;;7346:25:2;;7365:5;7346:25;;;;1442::18;;1430:2;1415:18;;1296:177;7346:25:2;;;;;;;;6271:1107;;;:::o;3385:267:9:-;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:12;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:12;;-1:-1:-1;6301:30:12;;-1:-1:-1;6333:1:12;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;7528:25:18;;;7601:4;7589:17;;7569:18;;;7562:45;;;;7623:18;;;7616:34;;;7666:18;;;7659:34;;;6457:24:12;;7500:19:18;;6457:24:12;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:12;;-1:-1:-1;;6457:24:12;;;-1:-1:-1;;;;;;;6495:20:12;;6491:113;;-1:-1:-1;6547:1:12;;-1:-1:-1;6551:29:12;;-1:-1:-1;6547:1:12;;-1:-1:-1;6531:62:12;;6491:113;6622:6;-1:-1:-1;6630:20:12;;-1:-1:-1;6630:20:12;;-1:-1:-1;5140:1530:12;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:12;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:12;;;;;1442:25:18;;;1415:18;;7550:46:12;1296:177:18;7479:243:12;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:12;;;;;1442:25:18;;;1415:18;;7679:32:12;1296:177:18;7613:109:12;7196:532;;:::o;2078:405:9:-;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:9;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:9;;;-1:-1:-1;2435:4:9;2426:14;;2419:28;;;;-1:-1:-1;2390:16:9;2078:405::o;2555:245::-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:9;;;;;;;;;;;14:423:18;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:162;170:6;167:1;164:13;156:162;;;232:4;288:13;;;284:22;;278:29;260:11;;;256:20;;249:59;185:12;156:162;;;160:3;363:1;356:4;347:6;342:3;338:16;334:27;327:38;426:4;419:2;415:7;410:2;402:6;398:15;394:29;389:3;385:39;381:50;374:57;;;14:423;;;;:::o;442:220::-;591:2;580:9;573:21;554:4;611:45;652:2;641:9;637:18;629:6;611:45;:::i;:::-;603:53;442:220;-1:-1:-1;;;442:220:18:o;667:173::-;735:20;;-1:-1:-1;;;;;784:31:18;;774:42;;764:70;;830:1;827;820:12;764:70;667:173;;;:::o;845:254::-;913:6;921;974:2;962:9;953:7;949:23;945:32;942:52;;;990:1;987;980:12;942:52;1013:29;1032:9;1013:29;:::i;:::-;1003:39;1089:2;1074:18;;;;1061:32;;-1:-1:-1;;;845:254:18:o;1478:328::-;1555:6;1563;1571;1624:2;1612:9;1603:7;1599:23;1595:32;1592:52;;;1640:1;1637;1630:12;1592:52;1663:29;1682:9;1663:29;:::i;:::-;1653:39;;1711:38;1745:2;1734:9;1730:18;1711:38;:::i;:::-;1701:48;;1796:2;1785:9;1781:18;1768:32;1758:42;;1478:328;;;;;:::o;2182:186::-;2241:6;2294:2;2282:9;2273:7;2269:23;2265:32;2262:52;;;2310:1;2307;2300:12;2262:52;2333:29;2352:9;2333:29;:::i;2373:1259::-;2779:3;2774;2770:13;2762:6;2758:26;2747:9;2740:45;2721:4;2804:2;2842:3;2837:2;2826:9;2822:18;2815:31;2869:46;2910:3;2899:9;2895:19;2887:6;2869:46;:::i;:::-;2963:9;2955:6;2951:22;2946:2;2935:9;2931:18;2924:50;2997:33;3023:6;3015;2997:33;:::i;:::-;3061:2;3046:18;;3039:34;;;-1:-1:-1;;;;;3110:32:18;;3104:3;3089:19;;3082:61;3130:3;3159:19;;3152:35;;;3224:22;;;3218:3;3203:19;;3196:51;3296:13;;3318:22;;;3368:2;3394:15;;;;-1:-1:-1;3356:15:18;;;;-1:-1:-1;3437:169:18;3451:6;3448:1;3445:13;3437:169;;;3512:13;;3500:26;;3581:15;;;;3546:12;;;;3473:1;3466:9;3437:169;;;-1:-1:-1;3623:3:18;;2373:1259;-1:-1:-1;;;;;;;;;;;;2373:1259:18:o;3637:693::-;3748:6;3756;3764;3772;3780;3788;3796;3849:3;3837:9;3828:7;3824:23;3820:33;3817:53;;;3866:1;3863;3856:12;3817:53;3889:29;3908:9;3889:29;:::i;:::-;3879:39;;3937:38;3971:2;3960:9;3956:18;3937:38;:::i;:::-;3927:48;;4022:2;4011:9;4007:18;3994:32;3984:42;;4073:2;4062:9;4058:18;4045:32;4035:42;;4127:3;4116:9;4112:19;4099:33;4172:4;4165:5;4161:16;4154:5;4151:27;4141:55;;4192:1;4189;4182:12;4141:55;3637:693;;;;-1:-1:-1;3637:693:18;;;;4215:5;4267:3;4252:19;;4239:33;;-1:-1:-1;4319:3:18;4304:19;;;4291:33;;3637:693;-1:-1:-1;;3637:693:18:o;4335:260::-;4403:6;4411;4464:2;4452:9;4443:7;4439:23;4435:32;4432:52;;;4480:1;4477;4470:12;4432:52;4503:29;4522:9;4503:29;:::i;:::-;4493:39;;4551:38;4585:2;4574:9;4570:18;4551:38;:::i;:::-;4541:48;;4335:260;;;;;:::o;4600:380::-;4679:1;4675:12;;;;4722;;;4743:61;;4797:4;4789:6;4785:17;4775:27;;4743:61;4850:2;4842:6;4839:14;4819:18;4816:38;4813:161;;4896:10;4891:3;4887:20;4884:1;4877:31;4931:4;4928:1;4921:15;4959:4;4956:1;4949:15;4813:161;;4600:380;;;:::o;6580:222::-;6645:9;;;6666:10;;;6663:133;;;6718:10;6713:3;6709:20;6706:1;6699:31;6753:4;6750:1;6743:15;6781:4;6778:1;6771:15;7704:127;7765:10;7760:3;7756:20;7753:1;7746:31;7796:4;7793:1;7786:15;7820:4;7817:1;7810:15"
	},
	"Assembly": ".code\n  PUSH 160\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 40\t\t\tcontract LAMP is ERC20, ERC20P...\n  MSTORE \t\t\tcontract LAMP is ERC20, ERC20P...\n  CALLVALUE \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  DUP1 \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  ISZERO \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  PUSH [tag] 1\t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  JUMPI \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  PUSH 0\t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  DUP1 \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  REVERT \t\t\tconstructor() ERC20(\"LAMP\", \"L...\ntag 1\t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  JUMPDEST \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  POP \t\t\tconstructor() ERC20(\"LAMP\", \"L...\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 4\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 4C414D5\t\t\t\n  PUSH E4\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 31\t\t\t\n  PUSH F8\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 4\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 4C414D5\t\t\t\n  PUSH E4\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 3\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 4C4D5\t\t\t\n  PUSH EC\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 3\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 7\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 7\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 4\t\t\t\n  PUSH [tag] 9\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 9\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH [tag] 11\t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 5\t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 11\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 120\t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 13\t\t\t\n  DUP2 \t\t\t\n  PUSH 6\t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 13\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 140\t\t\t\n  MSTORE \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  KECCAK256 \t\t\t\n  PUSH E0\t\t\t\n  MSTORE \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  PUSH 100\t\t\t\n  MSTORE \t\t\t\n  CHAINID \t\t\t\n  PUSH A0\t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 14\t\t\t\n  PUSH E0\t\t\t\n  MLOAD \t\t\t\n  PUSH 100\t\t\t\n  MLOAD \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP3 \t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 60\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  CHAINID \t\t\t\n  PUSH 80\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  ADDRESS \t\t\t\n  PUSH A0\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  PUSH C0\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  DUP4 \t\t\t\n  SUB \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 14\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  ADDRESS \t\t\t\n  PUSH C0\t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 18\t\t\t_mint(msg.sender, 25000000000 ...\n  CALLER \t\t\tmsg.sender\n  PUSH [tag] 21\t\t\t10 ** decimals()\n  PUSH 12\t\t\t\n  PUSH A\t\t\t10\n  PUSH [tag] 22\t\t\t10 ** decimals()\n  JUMP \t\t\t10 ** decimals()\ntag 21\t\t\t10 ** decimals()\n  JUMPDEST \t\t\t10 ** decimals()\n  PUSH [tag] 23\t\t\t25000000000 * 10 ** decimals()\n  SWAP1 \t\t\t25000000000 * 10 ** decimals()\n  PUSH 5D21DBA00\t\t\t25000000000\n  PUSH [tag] 24\t\t\t25000000000 * 10 ** decimals()\n  JUMP \t\t\t25000000000 * 10 ** decimals()\ntag 23\t\t\t25000000000 * 10 ** decimals()\n  JUMPDEST \t\t\t25000000000 * 10 ** decimals()\n  PUSH [tag] 25\t\t\t_mint\n  JUMP \t\t\t_mint(msg.sender, 25000000000 ...\ntag 18\t\t\t_mint(msg.sender, 25000000000 ...\n  JUMPDEST \t\t\t_mint(msg.sender, 25000000000 ...\n  PUSH [tag] 72\t\t\tcontract LAMP is ERC20, ERC20P...\n  JUMP \t\t\tcontract LAMP is ERC20, ERC20P...\ntag 12\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP4 \t\t\t\n  MLOAD \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 28\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 29\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 30\t\t\t\n  JUMP \t\t\t\ntag 29\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 28\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 34\t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 34\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH FF\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 31\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 25\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH EC442F05\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  ADD \t\t\t\ntag 41\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 40\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 43\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 44\t\t\t\n  JUMP \t\t\t\ntag 43\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 30\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 46\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 305A27A9\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 41\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 48\t\t\t\n  JUMP \t\t\t\ntag 46\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 49\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 50\t\t\t\n  JUMP \t\t\t\ntag 49\t\t\t\n  JUMPDEST \t\t\t\n  OR \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 44\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMPI \t\t\t\n  DUP1 \t\t\t\n  PUSH 2\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 54\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 55\t\t\t\n  JUMP \t\t\t\ntag 54\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 56\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 53\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  SWAP1 \t\t\t\n  KECCAK256 \t\t\t\n  SLOAD \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 57\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 391434E3\t\t\t\n  PUSH E2\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 44\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 64\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 41\t\t\t\n  JUMP \t\t\t\ntag 57\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  SWAP1 \t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\ntag 56\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 60\t\t\t\n  JUMPI \t\t\t\n  PUSH 2\t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 61\t\t\t\n  JUMP \t\t\t\ntag 60\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  SWAP1 \t\t\t\n  KECCAK256 \t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\ntag 61\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n  DUP4 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 62\t\t\t\n  SWAP2 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 62\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 64\t\t\te-Identifier: MIT\\n// Compatib...\n  JUMPDEST \t\t\te-Identifier: MIT\\n// Compatib...\n  PUSH 4E487B71\t\t\t5.0.0\\nprag\n  PUSH E0\t\t\tcts\n  SHL \t\t\tntracts ^5.0.0\\npragm\n  PUSH 0\t\t\t \n  MSTORE \t\t\teppelin Contracts ^5.0.0\\nprag...\n  PUSH 41\t\t\t\\nimp\n  PUSH 4\t\t\t0\n  MSTORE \t\t\t ^0.8.20;\\n\\nimpo\n  PUSH 24\t\t\tontr\n  PUSH 0\t\t\tn\n  REVERT \t\t\tzeppelin/contra\ntag 65\t\t\token/ERC20/ERC20.sol\";\\nimport...\n  JUMPDEST \t\t\token/ERC20/ERC20.sol\";\\nimport...\n  PUSH 1\t\t\ti\n  DUP2 \t\t\ttensions/ERC\n  DUP2 \t\t\ttensions/ERC\n  SHR \t\t\ttensions/ERC\n  SWAP1 \t\t\ttensions/ERC\n  DUP3 \t\t\tC20, ERC20Pe\n  AND \t\t\tC20, ERC20Pe\n  DUP1 \t\t\tC20, ERC20Pe\n  PUSH [tag] 75\t\t\t  constructor() ERC20(\"LAMP\", ...\n  JUMPI \t\t\t  constructor() ERC20(\"LAMP\", ...\n  PUSH 7F\t\t\t\") {\n  DUP3 \t\t\tit(\"LA\n  AND \t\t\tPermit(\"LAMP\") {\\n\n  SWAP2 \t\t\tMP\") ERC20Permit(\"LAMP\") {\\n\n  POP \t\t\tMP\") ERC20Permit(\"LAMP\") {\\n\ntag 75\t\t\t  constructor() ERC20(\"LAMP\", ...\n  JUMPDEST \t\t\t  constructor() ERC20(\"LAMP\", ...\n  PUSH 20\t\t\tci\n  DUP3 \t\t\t10 ** \n  LT \t\t\t * 10 ** decim\n  DUP2 \t\t\t.sender, 250000000\n  SUB \t\t\tmsg.sender, 25000000000 * 10 *...\n  PUSH [tag] 76\t\t\tnt(msg.sender, 25000000000 * 1...\n  JUMPI \t\t\tnt(msg.sender, 25000000000 * 1...\n  PUSH 4E487B71\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 22\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 76\t\t\tnt(msg.sender, 25000000000 * 1...\n  JUMPDEST \t\t\tnt(msg.sender, 25000000000 * 1...\n  POP \t\t\tnt(msg.sender, 25000000000 * 1...\n  SWAP2 \t\t\token/ERC20/ERC20.sol\";\\nimport...\n  SWAP1 \t\t\token/ERC20/ERC20.sol\";\\nimport...\n  POP \t\t\token/ERC20/ERC20.sol\";\\nimport...\n  JUMP \t\t\token/ERC20/ERC20.sol\";\\nimport...\ntag 67\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 79\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  PUSH 0\t\t\t\n  KECCAK256 \t\t\t\n  PUSH 1F\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH 5\t\t\t\n  SHR \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  PUSH 20\t\t\t\n  DUP7 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 80\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\ntag 80\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH 5\t\t\t\n  SHR \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\ntag 81\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 83\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 81\t\t\t\n  JUMP \t\t\t\ntag 83\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 79\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 8\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 87\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 87\t\t\t\n  PUSH [tag] 64\t\t\t\n  JUMP \t\t\t\ntag 87\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 88\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 89\t\t\t\n  DUP5 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 65\t\t\t\n  JUMP \t\t\t\ntag 89\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 67\t\t\t\n  JUMP \t\t\t\ntag 88\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 91\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 92\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP6 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\ntag 92\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP7 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  PUSH 1\t\t\t\n  DUP6 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  OR \t\t\t\n  DUP6 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 83\t\t\t\n  JUMP \t\t\t\ntag 91\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP6 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  KECCAK256 \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP7 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\ntag 95\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 97\t\t\t\n  JUMPI \t\t\t\n  DUP9 \t\t\t\n  DUP7 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  SWAP5 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 95\t\t\t\n  JUMP \t\t\t\ntag 97\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 98\t\t\t\n  JUMPI \t\t\t\n  DUP8 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP9 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  PUSH F8\t\t\t\n  AND \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\ntag 98\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  SHL \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 69\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B71\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 11\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 70\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\ntag 101\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 103\t\t\t\n  JUMPI \t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DIV \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 105\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 105\t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 105\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 106\t\t\t\n  JUMPI \t\t\t\n  SWAP2 \t\t\t\n  DUP2 \t\t\t\n  MUL \t\t\t\n  SWAP2 \t\t\t\ntag 106\t\t\t\n  JUMPDEST \t\t\t\n  SWAP4 \t\t\t\n  DUP5 \t\t\t\n  SHR \t\t\t\n  SWAP4 \t\t\t\n  SWAP1 \t\t\t\n  DUP1 \t\t\t\n  MUL \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 101\t\t\t\n  JUMP \t\t\t\ntag 103\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 71\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 108\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 108\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 109\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 109\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 111\t\t\t\n  JUMPI \t\t\t\n  PUSH 2\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 112\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 110\t\t\t\n  JUMP \t\t\t\ntag 111\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 112\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FF\t\t\t\n  DUP5 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 114\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 114\t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 114\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  SHL \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 110\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  PUSH 133\t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  AND \t\t\t\n  PUSH 4E\t\t\t\n  DUP5 \t\t\t\n  LT \t\t\t\n  PUSH B\t\t\t\n  DUP5 \t\t\t\n  LT \t\t\t\n  AND \t\t\t\n  OR \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 115\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  EXP \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 115\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 116\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 70\t\t\t\n  JUMP \t\t\t\ntag 116\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DIV \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 118\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 118\t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 118\t\t\t\n  JUMPDEST \t\t\t\n  MUL \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 22\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 120\t\t\t\n  PUSH FF\t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 71\t\t\t\n  JUMP \t\t\t\ntag 120\t\t\t\n  JUMPDEST \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 24\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  MUL \t\t\t\n  DUP2 \t\t\t\n  ISZERO \t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DIV \t\t\t\n  DUP5 \t\t\t\n  EQ \t\t\t\n  OR \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 31\t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 48\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  MSTORE \t\t\t\n  DUP4 \t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\ntag 127\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 129\t\t\t\n  JUMPI \t\t\t\n  DUP6 \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 127\t\t\t\n  JUMP \t\t\t\ntag 129\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 0\t\t\t\n  PUSH 40\t\t\t\n  DUP3 \t\t\t\n  DUP7 \t\t\t\n  ADD \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  AND \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  ADD \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 50\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 76\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 20\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  PUSH 3\t\t\t\n  SHL \t\t\t\n  SHL \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 55\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 31\t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMP \t\t\t\ntag 72\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH A0\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH C0\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH E0\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 100\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 120\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 140\t\t\tcontract LAMP is ERC20, ERC20P...\n  MLOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  CODECOPY \t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2033\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2030\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2027\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2025\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2023\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2021\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  ASSIGNIMMUTABLE 2019\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract LAMP is ERC20, ERC20P...\n  PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n  RETURN \t\t\tcontract LAMP is ERC20, ERC20P...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 40\t\t\tcontract LAMP is ERC20, ERC20P...\n      MSTORE \t\t\tcontract LAMP is ERC20, ERC20P...\n      CALLVALUE \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      ISZERO \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 1\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      REVERT \t\t\tcontract LAMP is ERC20, ERC20P...\n    tag 1\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPDEST \t\t\tcontract LAMP is ERC20, ERC20P...\n      POP \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 4\t\t\tcontract LAMP is ERC20, ERC20P...\n      CALLDATASIZE \t\t\tcontract LAMP is ERC20, ERC20P...\n      LT \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 2\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n      CALLDATALOAD \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH E0\t\t\tcontract LAMP is ERC20, ERC20P...\n      SHR \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 70A08231\t\t\tcontract LAMP is ERC20, ERC20P...\n      GT \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 16\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 95D89B41\t\t\tcontract LAMP is ERC20, ERC20P...\n      GT \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 17\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 95D89B41\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 12\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH A9059CBB\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 13\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH D505ACCF\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 14\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH DD62ED3E\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 15\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      REVERT \t\t\tcontract LAMP is ERC20, ERC20P...\n    tag 17\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPDEST \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 70A08231\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 9\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 7ECEBE00\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 10\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 84B0196E\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 11\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      REVERT \t\t\tcontract LAMP is ERC20, ERC20P...\n    tag 16\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPDEST \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 6FDDE03\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 3\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 95EA7B3\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 4\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 18160DDD\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 5\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 23B872DD\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 6\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 313CE567\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 7\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 3644E515\t\t\tcontract LAMP is ERC20, ERC20P...\n      EQ \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH [tag] 8\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPI \t\t\tcontract LAMP is ERC20, ERC20P...\n    tag 2\t\t\tcontract LAMP is ERC20, ERC20P...\n      JUMPDEST \t\t\tcontract LAMP is ERC20, ERC20P...\n      PUSH 0\t\t\tcontract LAMP is ERC20, ERC20P...\n      DUP1 \t\t\tcontract LAMP is ERC20, ERC20P...\n      REVERT \t\t\tcontract LAMP is ERC20, ERC20P...\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 18\t\t\t\n      PUSH [tag] 19\t\t\t\n      JUMP \t\t\t\n    tag 18\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 20\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 21\t\t\t\n      JUMP \t\t\t\n    tag 20\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 22\t\t\t\n      PUSH [tag] 23\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 24\t\t\t\n      JUMP \t\t\t\n    tag 23\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 22\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 20\t\t\t\n      JUMP \t\t\t\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n    tag 28\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 20\t\t\t\n      JUMP \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 22\t\t\t\n      PUSH [tag] 33\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 34\t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 35\t\t\t\n      JUMP \t\t\t\n    tag 7\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 12\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 20\t\t\t\n      JUMP \t\t\t\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 28\t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 9\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 28\t\t\t\n      PUSH [tag] 46\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 46\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 10\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 28\t\t\t\n      PUSH [tag] 51\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 51\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 52\t\t\t\n      JUMP \t\t\t\n    tag 11\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 54\t\t\t\n      PUSH [tag] 55\t\t\t\n      JUMP \t\t\t\n    tag 54\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 20\t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 57\t\t\t\n      JUMP \t\t\t\n    tag 12\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 18\t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 22\t\t\t\n      PUSH [tag] 62\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 24\t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 63\t\t\t\n      JUMP \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 65\t\t\t\n      PUSH [tag] 66\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 67\t\t\t\n      JUMP \t\t\t\n    tag 66\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 68\t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 15\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 28\t\t\t\n      PUSH [tag] 70\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 71\t\t\t\n      JUMP \t\t\t\n    tag 70\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 3\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 75\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 75\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 77\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 77\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 79\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 79\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 78\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      PUSH [tag] 84\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      PUSH [tag] 89\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 91\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 91\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 42\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 95\t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 7\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 55\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 102\t\t\t\n      PUSH [tag] 103\t\t\t\n      JUMP \t\t\t\n    tag 102\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 104\t\t\t\n      PUSH [tag] 105\t\t\t\n      JUMP \t\t\t\n    tag 104\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH F\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      SWAP12 \t\t\t\n      SWAP4 \t\t\t\n      SWAP11 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      CHAINID \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      ADDRESS \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 59\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 75\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 63\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      PUSH [tag] 84\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      TIMESTAMP \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 120\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 313C8981\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n    tag 121\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 120\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 122\t\t\t\n      DUP13 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 7\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP7 \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP5 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH C0\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH E0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 126\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 127\t\t\t\n      JUMP \t\t\t\n    tag 126\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 128\t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 129\t\t\t\n      JUMP \t\t\t\n    tag 128\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP10 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 130\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 25C00723\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP12 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 130\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 133\t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 133\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 85\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 142\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7DC7A0D9\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 145\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4B637E8F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 150\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMP \t\t\t\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      ADDRESS \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      PUSHIMMUTABLE 2023\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 2021\t\t\t\n      CHAINID \t\t\t\n      EQ \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 2019\t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 95\t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSHIMMUTABLE 2025\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSHIMMUTABLE 2027\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      CHAINID \t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      ADDRESS \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      PUSH C0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 103\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 95\t\t\t\n      PUSHIMMUTABLE 2030\t\t\t\n      PUSH 5\t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 105\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 95\t\t\t\n      PUSHIMMUTABLE 2033\t\t\t\n      PUSH 6\t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 127\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 81\t\t\t\n      PUSH [tag] 169\t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1901\t\t\t\n      PUSH F0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 42\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 172\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 173\t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 174\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 177\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E602DF05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 179\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4A1406B1\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 179\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 182\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 185\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 186\t\t\t\n      JUMP \t\t\t\n    tag 185\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 187\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 391434E3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 188\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 192\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH FF\t\t\t\n      DUP4 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 198\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 199\t\t\t\n      JUMP \t\t\t\n    tag 198\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 201\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 201\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 202\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 203\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 204\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 203\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 203\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 173\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 208\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 3\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMP \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      DUP11 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FF\t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      PUSH A0\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      GAS \t\t\t\n      STATICCALL \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 212\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      RETURNDATACOPY \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMP \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 219\t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMP \t\t\t\n    tag 219\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 225\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 225\t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMP \t\t\t\n    tag 225\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 226\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH F645EEDF\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 226\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 231\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 231\t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 232\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FCE698F7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 238\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 238\t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 35E2F383\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 242\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 243\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 1F\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2CD44AC3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 249\t\t\te-Identifier: MIT\\n// Compatib...\n      JUMPDEST \t\t\te-Identifier: MIT\\n// Compatib...\n      PUSH 0\t\t\tepp\n      DUP2 \t\t\tty ^0\n      MLOAD \t\t\tsolidity ^0.\n      DUP1 \t\t\teppeli\n      DUP5 \t\t\tope\n      MSTORE \t\t\tport \"@openzeppelin\n      PUSH 0\t\t\to\n    tag 253\t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      JUMPDEST \t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      DUP2 \t\t\tmport \n      DUP2 \t\t\t;\n      LT \t\t\tol\";\\nimport \"\n      ISZERO \t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      PUSH [tag] 255\t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      JUMPI \t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      PUSH 20\t\t\tC20P\n      DUP2 \t\t\t   constructo\n      DUP6 \t\t\t   constructo\n      ADD \t\t\t   constructo\n      DUP2 \t\t\t {\\n    constructor() E\n      ADD \t\t\t {\\n    constructor() E\n      MLOAD \t\t\tPermit {\\n    constructor() ER\n      DUP7 \t\t\tMP is ERC20\n      DUP4 \t\t\tMP is ERC20\n      ADD \t\t\tMP is ERC20\n      DUP3 \t\t\tt LAMP is ERC20, ERC\n      ADD \t\t\tt LAMP is ERC20, ERC\n      MSTORE \t\t\tcontract LAMP is ERC20, ERC20P...\n      ADD \t\t\tpelin/contra\n      PUSH [tag] 253\t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      JUMP \t\t\t/ERC20.sol\";\\nimport \"@openzep...\n    tag 255\t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      JUMPDEST \t\t\t/ERC20.sol\";\\nimport \"@openzep...\n      POP \t\t\t20.\n      PUSH 0\t\t\ts\n      PUSH 20\t\t\t_min\n      DUP3 \t\t\t\\n     \n      DUP7 \t\t\tP\")\n      ADD \t\t\t\"LAMP\") {\\n      \n      ADD \t\t\tmit(\"LAMP\") {\\n        _mint\n      MSTORE \t\t\tRC20Permit(\"LAMP\") {\\n        ...\n      PUSH 20\t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t }\n      DUP4 \t\t\t());\\n \n      ADD \t\t\tmals());\\n    }\\n\n      AND \t\t\tdecimals());\\n    }\\n}\\n\n      DUP6 \t\t\t0 *\n      ADD \t\t\t * 10 ** decimals());\\n    }\\n...\n      ADD \t\t\t0000 * 10 ** decimals());\\n   ...\n      SWAP2 \t\t\t25000000000 * 10 ** decimals()...\n      POP \t\t\t25000000000 * 10 ** decimals()...\n      POP \t\t\t25000000000 * 10 ** decimals()...\n      SWAP3 \t\t\te-Identifier: MIT\\n// Compatib...\n      SWAP2 \t\t\te-Identifier: MIT\\n// Compatib...\n      POP \t\t\te-Identifier: MIT\\n// Compatib...\n      POP \t\t\te-Identifier: MIT\\n// Compatib...\n      JUMP \t\t\te-Identifier: MIT\\n// Compatib...\n    tag 21\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 257\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 259\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 259\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 262\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      PUSH 20\t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 266\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 267\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 268\t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 47\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 272\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 272\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 257\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 57\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      PUSH E0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 275\t\t\t\n      PUSH E0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 275\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 40\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 276\t\t\t\n      DUP2 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 276\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      DUP10 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      PUSH 80\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH C0\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP6 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 277\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      MLOAD \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 277\t\t\t\n      JUMP \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP13 \t\t\t\n      SWAP12 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH E0\t\t\t\n      DUP9 \t\t\t\n      DUP11 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 281\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 282\t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 283\t\t\t\n      PUSH 20\t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 283\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH 80\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 284\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 284\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      SWAP10 \t\t\t\n      SWAP6 \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP7 \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      PUSH A0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH C0\t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 71\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 286\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 287\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 287\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 288\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 250\t\t\t\n      JUMP \t\t\t\n    tag 288\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 76\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 290\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 290\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 291\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 291\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 21\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    .data\n"
}